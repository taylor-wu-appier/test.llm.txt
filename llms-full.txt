<SYSTEM>This is the full developer documentation for the Aiqua Design System.</SYSTEM>

# ACTION_WRAPPER_HEIGHT

```typescript
const ACTION_WRAPPER_HEIGHT = 56;
```
# ActionHeaderContent

```typescript
type ActionHeaderContent = React.ReactNode;
```
# AddFilter

The AddFilter component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Basic = {
  render: Template,
  args: {
    label: 'Add Filter',
    children: [<MenuItem value="status" key="status">
        Status
      </MenuItem>, <MenuItem value="date" key="date">
        Date
      </MenuItem>, <MenuItem value="category" key="category">
        Category
      </MenuItem>, <MenuItem value="priority" key="priority">
        Priority
      </MenuItem>, <MenuDivider key="divider" />, <MenuItem key="advanced" submenu={{
      items: [<MenuItem value="severity" key="severity">
              Severity
            </MenuItem>, <MenuItem value="type" key="type">
              Type
            </MenuItem>, <MenuItem value="component" key="component">
              Component
            </MenuItem>]
    }}>
        Advanced Filters
      </MenuItem>, <MenuDivider key="divider2" />, <MenuIconItem value="custom" key="custom" icon={<DSIcon is="settingsSolid20" />}>
        Custom Filter
      </MenuIconItem>]
  }
};
```

## Usage

```tsx
import { AddFilter } from "@appier/aiqua-design-system

<AddFilter />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `onChange` | `(selectedFilters: string[]) => void` | Yes | Callback function called when selected filters change |
| `children` | `ReactNode` | Yes | Menu items to be rendered as filter options |
| `label` | `string` | No | Label of the filter |
| `value` | `string[]` | No | Currently selected filter values |
| `menuProps` | `Partial<Omit<MenuProps, 'open' \| 'anchorEl' \| 'onClose'>>` | No | Props to customize the Menu component |
| `disabled` | `boolean` | No | Whether the component is disabled. Will be combined with internal logic (no options = disabled) |

## Examples

### With No Options

```tsx
export const WithNoOptions = {
  render: Template,
  args: {
    label: 'Add Filter',
    children: []
  },
  parameters: {
    docs: {
      description: {
        story: 'When there are no filter options available, the AddFilter component is disabled.'
      }
    }
  }
};
```

### With Preselected Filters

```tsx
export const WithPreselectedFilters = {
  render: PreselectedTemplate,
  args: {
    label: 'Add Filter',
    children: [<MenuItem value="status" key="status">
        Status
      </MenuItem>, <MenuItem value="date" key="date">
        Date
      </MenuItem>, <MenuItem value="category" key="category">
        Category
      </MenuItem>, <MenuItem value="priority" key="priority">
        Priority
      </MenuItem>, <MenuItem key="project-filters" submenu={{
      items: [<MenuItem value="milestone" key="milestone">
              Milestone
            </MenuItem>, <MenuItem key="team-filters" submenu={{
        items: [<MenuItem value="sprint" key="sprint">
                    Sprint
                  </MenuItem>]
      }}>
              Team Filters
            </MenuItem>]
    }}>
        Project Filters
      </MenuItem>]
  },
  parameters: {
    docs: {
      description: {
        story: 'This example demonstrates the AddFilter component with preselected filters (Status and Category). The preselected filters are displayed as filter components, and users can still add additional filters from the dropdown menu.'
      }
    }
  }
};
```

### With Many Filters

```tsx
export const WithManyFilters = {
  render: ManyFiltersTemplate,
  args: {
    label: 'Add Filter',
    children: [<MenuItem value="status" key="status">
        Status
      </MenuItem>, <MenuItem value="date" key="date">
        Date
      </MenuItem>, <MenuItem value="category" key="category">
        Category
      </MenuItem>, <MenuItem value="priority" key="priority">
        Priority
      </MenuItem>, <MenuItem key="project-group" submenu={{
      items: [<MenuItem value="milestone" key="milestone">
              Milestone
            </MenuItem>, <MenuItem value="version" key="version">
              Version
            </MenuItem>]
    }}>
        Project Group
      </MenuItem>, <MenuItem key="team-group" submenu={{
      items: [<MenuItem value="sprint" key="sprint">
              Sprint
            </MenuItem>]
    }}>
        Team Group
      </MenuItem>, <MenuItem key="technical-group" submenu={{
      items: [<MenuItem value="component" key="component">
              Component
            </MenuItem>, <MenuItem value="platform" key="platform">
              Platform
            </MenuItem>, <MenuItem value="severity" key="severity">
              Severity
            </MenuItem>, <MenuItem value="type" key="type">
              Type
            </MenuItem>]
    }}>
        Technical Group
      </MenuItem>]
  },
  parameters: {
    docs: {
      description: {
        story: 'This example demonstrates how the AddFilter component handles many selected filters. It shows proper wrapping behavior when multiple filters are applied, ensuring the interface remains usable even with a large number of active filters. The filters are organized into logical groups using submenus for better organization.'
      }
    }
  }
};
```

### With Nested Submenus

```tsx
export const WithNestedSubmenus = {
  render: Template,
  args: {
    label: 'Add Filter',
    children: [<MenuItem value="status" key="status">
        Status
      </MenuItem>, <MenuItem key="categories" submenu={{
      items: [<MenuItem value="category" key="category">
              Category
            </MenuItem>, <MenuItem key="subcategories" submenu={{
        items: [<MenuItem value="subcategory1" key="subcategory1">
                    Subcategory 1
                  </MenuItem>, <MenuItem value="subcategory2" key="subcategory2">
                    Subcategory 2
                  </MenuItem>, <MenuItem key="deepnested" submenu={{
          items: [<MenuItem value="deepnested1" key="deepnested1">
                          Deep Nested 1
                        </MenuItem>, <MenuItem value="deepnested2" key="deepnested2">
                          Deep Nested 2
                        </MenuItem>]
        }}>
                    Deep Nested
                  </MenuItem>]
      }}>
              Subcategories
            </MenuItem>]
    }}>
        Categories
      </MenuItem>, <MenuItem key="organization" submenu={{
      items: [<MenuItem key="departments" submenu={{
        items: [<MenuItem value="engineering" key="engineering">
                    Engineering
                  </MenuItem>, <MenuItem value="design" key="design">
                    Design
                  </MenuItem>, <MenuItem value="product" key="product">
                    Product
                  </MenuItem>]
      }}>
              Departments
            </MenuItem>]
    }}>
        Organization
      </MenuItem>]
  },
  parameters: {
    docs: {
      description: {
        story: 'This example demonstrates the AddFilter component with deeply nested submenu structure. It showcases how multiple levels of nesting can be used to organize filters into hierarchical categories, making it easier for users to find specific filters in complex filtering systems.'
      }
    }
  }
};
```

### With Mixed Filter Types

```tsx
export const WithMixedFilterTypes = {
  render: MixedFiltersTemplate,
  args: {
    label: 'Add Filter',
    children: [<MenuItem value="category" key="category">
        Category
      </MenuItem>, <MenuItem value="date" key="date">
        Date
      </MenuItem>, <MenuItem key="advanced" submenu={{
      items: [<MenuItem value="component" key="component">
              Component
            </MenuItem>, <MenuItem value="version" key="version">
              Version
            </MenuItem>]
    }}>
        Advanced
      </MenuItem>]
  },
  parameters: {
    docs: {
      description: {
        story: 'This example demonstrates using AddFilter alongside other filter types in a complete filter bar. It shows how SingleSelectFilter, MultiSelectFilter, and AddFilter components can be used together to create a comprehensive filtering interface. The example includes a display of the selected values to demonstrate how different filter types can coexist and complement each other in a real application scenario.'
      }
    }
  }
};
```


# AddFilterProps

```typescript
interface AddFilterProps extends OmittedBaseFilterProps {
  /** Callback function called when selected filters change */
  onChange: (selectedFilters: string[]) => void;
  /** Menu items to be rendered as filter options */
  children: ReactNode;
  /** Label of the filter */
  label?: string;
  /** Currently selected filter values */
  value?: string[];
  /** Props to customize the Menu component */
  menuProps?: Partial<Omit<MenuProps, 'open' | 'anchorEl' | 'onClose'>>;
  /** Whether the component is disabled. Will be combined with internal logic (no options = disabled) */
  disabled?: boolean;
}
```
# AddTag

The AddTag component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const NonClickableTag = {
  render: Template
};
```

## Usage

```tsx
import { AddTag } from "@appier/aiqua-design-system

<AddTag />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `existingTags` | `string[]` | No | The existing tags used for search purpose. |
| `addTagLabel` | `string` | No | Defines the label for the add tag action |
| `createTagLabel` | `string` | No | Defines the label for the create tag action |
| `disabled` | `boolean` | No | Defines whether the component is disabled |
| `inputProps` | `React.InputHTMLAttributes<HTMLInputElement>` | No | The attributes for the native `input` element. |
| `onTagAdd` | `(newTag: string) => void` | No | The handler called when new tag is added |

## Examples

### Removable With Non Clickable Tag

```tsx
export const RemovableWithNonClickableTag = {
  render: Template,
  args: {
    removable: true
  },
  parameters: {
    controls: {
      exclude: ['clickable', 'removable']
    }
  }
};
```

### Clickable Tag

```tsx
export const ClickableTag = {
  render: Template,
  args: {
    clickable: true
  },
  parameters: {
    controls: {
      exclude: ['removable', 'clickable']
    }
  }
};
```

### Clickable With Removable Tag

```tsx
export const ClickableWithRemovableTag = {
  render: Template,
  args: {
    ...RemovableWithNonClickableTag.args,
    ...ClickableTag.args
  },
  parameters: {
    controls: {
      exclude: ['removable', 'clickable']
    }
  }
};
```


# AddTagProps

```typescript
interface AddTagProps {
  /**
   * The existing tags used for search purpose.
   */
  existingTags?: string[];
  /**
   * Defines the label for the add tag action
   */
  addTagLabel?: string;
  /**
   * Defines the label for the create tag action
   */
  createTagLabel?: string;
  /**
   * Defines whether the component is disabled
   */
  disabled?: boolean;
  /**
   * The attributes for the native `input` element.
   */
  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
  /**
   * The handler called when new tag is added
   */
  onTagAdd?: (newTag: string) => void;
}
```
# AffixInput

Version `v2.0.2` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=16831-128638&t=AJpHD5HQ2KyonQSH-0)

Enhance user input in form text fields with AffixInput, which enables the use of prefixes and suffixes. These visual elements, such as symbols or abbreviations, provide contextual cues to guide users in entering the appropriate type of information.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { AffixInput } from "@appier/aiqua-design-system

<AffixInput />
```

## Examples

### Value

```tsx
export const Value = () => {
  const [inputValue, setInputValue] = React.useState('appier');
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <AffixInput label="URL (Uncontrolled)" defaultValue="appier" prefix="https://" suffix=".com" width={300} />
      <AffixInput label="URL (Controlled)" value={inputValue} onChange={setInputValue} prefix="https://" suffix=".com" width={300} />
    </div>;
};
```

### Prefix And Suffix

```tsx
export const PrefixAndSuffix = {
  render: () => {
    return <div style={{
      display: 'flex',
      flexDirection: 'column',
      gap: '8px'
    }}>
        <AffixInput prefix="$" defaultValue="123456" />
        <AffixInput suffix="kg" defaultValue="60" />
        <AffixInput prefix="https://" suffix=".com" defaultValue="appier" />
      </div>;
  }
};
```

### Label And Hint

```tsx
export const LabelAndHint = {
  args: {
    hint: 'Hint',
    label: 'Label'
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```

### Error

```tsx
export const Error = {
  args: {
    error: 'Error text'
  }
};
```


# AffixInputProps

```typescript
type AffixInputProps = Override<Override<InputHTMLAttributes<HTMLInputElement>, InputProps<string>>, ConfigProps>;
```
# Avatar

The Avatar component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { Avatar } from "@appier/aiqua-design-system

<Avatar />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `size` | `(typeof SIZES)[keyof typeof SIZES]` | No | Defines the size of the Avatar. The Avatar will take the default size if the value is `undefined`. |
| `shape` | `(typeof SHAPES)[keyof typeof SHAPES]` | No | Defines the shape of the Avatar. The Avatar will take the default shape if the value is `undefined`. |
| `color` | `(typeof COLORS)[keyof typeof COLORS]` | No | Defines the color of the Avatar. The Avatar will use pre-define color sets if the value is `undefined`. |
| `name` | `string` | No | Defines the name of the Avatar. The Avatar will auto-generates an abbreviation of the initials of the name. Will set the auto-generates abbreviation to src for alt. |
| `abbr` | `string` | No | The abbreviation can also be set manually. |
| `src` | `string` | No | The image source of the Avatar. |

## Examples

### Size

```tsx
export const Size = () => {
  return <div className="flex items-center gap-spacing-8">
      <Avatar size="small" />
      <Avatar size="medium" />
      <Avatar size="large" />
    </div>;
};
```

### Name And Abbr

```tsx
export const NameAndAbbr = () => {
  return <div className="flex items-center gap-spacing-8">
      <Avatar abbr="A" name="Aaron Yang" />
      <Avatar src="https://www.w3schools.com/w3images/avatar2.png" />
      <Avatar src="https://www.w3schools.com/w3images/avatar-2.png" name="Aaron Yang" />
      <Avatar />
      <Avatar name="沛星" />
      <Avatar name="互動" />
      <Avatar name="科技" />
    </div>;
};
```

### Color

```tsx
export const Color = () => {
  return <div className="flex items-center gap-spacing-8">
      <Avatar name="Aaron Chen" />
      <Avatar name="Aaron Yang" />
      <Avatar name="Alice Lin" />
      <Avatar color={COLORS.BLUE} abbr="B" />
      <Avatar color={COLORS.ORANGE} abbr="O" />
      <Avatar color={COLORS.GREEN} abbr="G" />
      <Avatar color={COLORS.PURPLE} abbr="P" />
      <Avatar color={COLORS.FUCHSIA} abbr="F" />
      <Avatar color={COLORS.GRAY} abbr="G" />
    </div>;
};
```

### Shape

```tsx
export const Shape = () => {
  return <div className="flex items-center gap-spacing-8">
      <Avatar shape={SHAPES.ROUND} />
      <Avatar shape={SHAPES.SQUARE} />
    </div>;
};
```


# AvatarProps

```typescript
type AvatarProps = React.HTMLAttributes<HTMLDivElement> & {
  /**
   * Defines the size of the Avatar. The Avatar will take the default size if the value is `undefined`.
   */
  size?: (typeof SIZES)[keyof typeof SIZES];
  /**
   * Defines the shape of the Avatar. The Avatar will take the default shape if the value is `undefined`.
   */
  shape?: (typeof SHAPES)[keyof typeof SHAPES];
  /**
   * Defines the color of the Avatar. The Avatar will use pre-define color sets if the value is `undefined`.
   */
  color?: (typeof COLORS)[keyof typeof COLORS];
  /**
   * Defines the name of the Avatar. The Avatar will auto-generates an abbreviation of the initials of the name.
   * Will set the auto-generates abbreviation to src for alt.
   */
  name?: string;
  /**
   * The abbreviation can also be set manually.
   */
  abbr?: string;
  /**
   * The image source of the Avatar.
   */
  src?: string;
};
```
# Badge

Version `v2.0.1` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-%7C-Spec?type=design&node-id=14908-48748&mode=design&t=fLAiqPfT1lWqC02M-0)

The Badge component is a small informational label used to display statuses, highlight new features, or indicate notifications within a user interface, often featuring bold colors and concise icons to attract immediate attention.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { Badge } from "@appier/aiqua-design-system

<Badge />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `label` | `React.ReactNode` | No | Defines the label beside component. |
| `content` | `React.ReactNode` | No | Defines the content of badge component. |
| `variant` | `(typeof VARIANT)[keyof typeof VARIANT]` | No | Defines the variant of the badge. The badge will take the default variant if the value is `undefined`. |
| `size` | `(typeof SIZE)[keyof typeof SIZE]` | No | Defines the size of the badge. The badge will take the default size if the value is `undefined`. |
| `color` | `(typeof COLOR)[keyof typeof COLOR]` | No | Defines the color of the badge. The badge will take the default color if the value is `undefined`. |
| `colorStyle` | `(typeof STYLE)[keyof typeof STYLE]` | No | Defines the colorStyle of the badge. The badge will take the default style if the value is `undefined`. |

## Examples

### Variant

```tsx
export const Variant = () => {
  return <div className="flex items-center gap-spacing-8">
      <Badge content="label" variant="text" />
      <Badge content="0" variant="number" />
    </div>;
};
```

### Size

```tsx
export const Size = () => {
  return <div className="flex items-center gap-spacing-8">
      <Badge content="small" size="small" />
      <Badge content="0" size="small" variant="number" />

      <Badge content="medium" />
      <Badge content="0" size="medium" variant="number" />
    </div>;
};
```

### With Label

```tsx
export const WithLabel = {
  args: {
    label: 'Label'
  }
};
```

### Color

```tsx
export const Color = () => {
  return <div className="flex items-center gap-spacing-8">
      <Badge content="label" color="default" />
      <Badge content="label" color="primary" />
      <Badge content="label" color="secondary" />
      <Badge content="label" color="error" />
      <Badge content="label" color="warning" />
      <Badge content="label" color="success" />
      <Badge content="label" color="info" />
      <Badge content="label" color="teal" />
      <Badge content="label" color="fuchsia" />
    </div>;
};
```

### Color Style

```tsx
export const ColorStyle = () => {
  return <div className="flex flex-col gap-spacing-4">
      <span className="text-content-high headline-5">Default:</span>
      <div className="flex items-center gap-spacing-8">
        <Badge content="label" color="default" />
        <Badge content="label" color="primary" />
        <Badge content="label" color="secondary" />
        <Badge content="label" color="error" />
        <Badge content="label" color="warning" />
        <Badge content="label" color="success" />
        <Badge content="label" color="info" />
        <Badge content="label" color="teal" />
        <Badge content="label" color="fuchsia" />
      </div>

      <span className="mt-spacing-8 text-content-high headline-5">Solid:</span>
      <div className="flex items-center gap-spacing-8">
        <Badge content="label" color="default" colorStyle="solid" />
        <Badge content="label" color="primary" colorStyle="solid" />
        <Badge content="label" color="secondary" colorStyle="solid" />
        <Badge content="label" color="error" colorStyle="solid" />
        <Badge content="label" color="warning" colorStyle="solid" />
        <Badge content="label" color="success" colorStyle="solid" />
        <Badge content="label" color="info" colorStyle="solid" />
        <Badge content="label" color="teal" colorStyle="solid" />
        <Badge content="label" color="fuchsia" colorStyle="solid" />
      </div>
    </div>;
};
```


# BadgeProps

```typescript
type BadgeProps = ConfigProps & StyleProps & Omit<React.HTMLAttributes<HTMLDivElement>, 'content'>;
```
# BaseFilter

The BaseFilter component is a key part of the Aiqua Design System.

## Usage

```tsx
import { BaseFilter } from "@appier/aiqua-design-system";

<BaseFilter />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `label` | `string` | Yes | Defines the label of the BaseFilter |
| `defaultDisplayedValue` | `string` | No | Defines the default displayed value string of the BaseFilter |
| `displayedValue` | `string` | No | Defines the displayed value string of the BaseFilter, be overwritten by `defaultDisplayedValue` if not specified |
| `displayedValueLength` | `number` | No | Defines how many values are selected for multi-select filters |
| `children` | `React.ReactNode` | Yes | Defines the BaseFilter popover elements |
| `open` | `boolean` | No | Defines if the BaseFilter popover children elements are visible |
| `focused` | `boolean` | No | Defines if the BaseFilter is focused |
| `disabled` | `boolean` | No | Defines if the BaseFilter is disabled |
| `onClick` | `(event: React.MouseEvent<HTMLDivElement>) => void` | Yes | Defines the callback function when the BaseFilter is clicked |
| `onFilterClear` | `() => void` | No | Defines the callback function when the BaseFilter clear icon is clicked |
| `icon` | `React.ReactNode` | No | Custom icon to display on the left side of the filter. |

> **Note:** This is a scaffold file. To generate full, rich examples, please create a `*.stories.tsx` file for this component.

# BaseFilterProps

```typescript
type BaseFilterProps = {
  /**
   * Defines the label of the BaseFilter
   */
  label: string;
  /**
   * Defines the default displayed value string of the BaseFilter
   */
  defaultDisplayedValue?: string;
  /**
   * Defines the displayed value string of the BaseFilter,
   * be overwritten by `defaultDisplayedValue` if not specified
   */
  displayedValue?: string;
  /**
   * Defines how many values are selected for multi-select filters
   */
  displayedValueLength?: number;
  /**
   * Defines the BaseFilter popover elements
   */
  children: React.ReactNode;
  /**
   * Defines if the BaseFilter popover children elements are visible
   */
  open?: boolean;
  /**
   * Defines if the BaseFilter is focused
   */
  focused?: boolean;
  /**
   * Defines if the BaseFilter is disabled
   */
  disabled?: boolean;
  /**
   * Defines the callback function when the BaseFilter is clicked
   */
  onClick: (event: React.MouseEvent<HTMLDivElement>) => void;
  /**
   * Defines the callback function when the BaseFilter clear icon is clicked
   */
  onFilterClear?: () => void;
  /**
   * Custom icon to display on the left side of the filter.
   */
  icon?: React.ReactNode;
} & React.HTMLAttributes<HTMLDivElement>;
```
# BasePickerContainer

The BasePickerContainer component is a key part of the Aiqua Design System.

## Usage

```tsx
import { BasePickerContainer } from "@appier/aiqua-design-system";

<BasePickerContainer />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `displayInputValue` | `string` | No | - |
| `onPickerClose` | `() => void` | No | - |
| `onInputClear` | `(e: React.MouseEvent<HTMLOrSVGElement>) => void` | No | - |
| `customAnchorEl` | `React.ReactNode` | No | - |
| `customInputEl` | `React.ReactNode` | No | - |
| `onOpenChange` | `(isOpen: boolean) => void` | No | - |
| `icon` | `'datePickerOutlined20' \| 'scheduleOutlined20'` | No | - |

> **Note:** This is a scaffold file. To generate full, rich examples, please create a `*.stories.tsx` file for this component.

# BasePickerProps

```typescript
type BasePickerProps = React.HTMLAttributes<HTMLDivElement> & Pick<PickerProps<any>, 'label' | 'hint' | 'error' | 'disabled' | 'inputRootRef' | 'zIndex'> & {
  displayInputValue?: string;
  onPickerClose?: () => void;
  onInputClear?: (e: React.MouseEvent<HTMLOrSVGElement>) => void;
  customAnchorEl?: React.ReactNode;
  customInputEl?: React.ReactNode;
  onOpenChange?: (isOpen: boolean) => void;
  icon?: 'datePickerOutlined20' | 'scheduleOutlined20';
};
```
# BasicChartProps

```typescript
interface BasicChartProps {
  /**
   * Defines the data that will be used for drawing the chart.
   * This includes defining the columns as well as each data points (rows)
   */
  chartData: ChartDataInterface;
  /**
   * Defining the dimension of the chart, which will be one of the cols within chartData.col.
   * The dimension indicates the categories (the different areas).
   */
  chartDimensions: ChartDimensions;
  /**
   * Defining the metrics of the chart, which will be cone of the cols wihtin chartData.col.
   * The metric indicates each data point.
   */
  chartMetrics: ChartMetrics;
  /**
   * Defining the timezone of the chart.
   */
  timezone?: Timezone;
  /**
   * The text to be shown on the chart when dimension is not defined.
   * Will be set to "Undefined" is no value passed in.
   */
  chartNullDimensionText?: string;
  /**
   * Defining how will the timestamp on the x-axis will be formatted.
   */
  chartAxisDateFormat?: TimeFormat;
  /**
   * Defining how will the timstamp on the tooltip will be formatted.
   */
  chartTooltipDateFormat?: TimeFormat;
  /**
   * Defining the color theme of the categories from the dimension. The color will be apply
   * accords to the order of the string array. This affects the legend as well as the points on line.
   */
  chartColorTheme?: string[];
  /**
   * Configuring light / dark mode of the chart.
   */
  chartTheme?: THEME_TYPES;
  /**
   * Other property that will be used for configuring the chart.
   * Including the notation, decimal places, coloring order as well as the split number.
   */
  chartOptions?: BasicChartUiMetricsInterface;
  /**
   * A function that allows direct customization of the chart configuration.
   * This function receives the component's ECharts configuration and should
   * return a new configuration object with applied customizations.
   *
   * Use this only for experimental or product-specific behaviors that are
   * not yet part of the design system's official specification.
   *
   * @param config - The default ECharts configuration object.
   * @returns A new configuration object with applied customizations.
   */
  customizeConfig?: (config: echarts.EChartsCoreOption) => echarts.EChartsCoreOption;
}
```
# BasicChartTooltipOptions

```typescript
interface BasicChartTooltipOptions {
  tooltipSubtitle?: string;
  tooltipComparisonSubtitle?: string;
  showTooltipSubtitleBreakline?: boolean;
}
```
# BasicChartUiMetricsInterface

```typescript
interface BasicChartUiMetricsInterface {
  metric?: BasicChartUiOption[];
}
```
# BasicChartUiOption

```typescript
interface BasicChartUiOption {
  displayNotation?: ChartUiOptionsDisplayNotationEnum;
  decimalPlaces?: number;
}
```
# BasicQuickSelectionOption

```typescript
interface BasicQuickSelectionOption {
  label: string;
  key: BasicSelectionLabel;
  range?: (Date | undefined)[];
  isSelected?: boolean;
}
```
# BORDER_COLOR

```typescript
const BORDER_COLOR = {
  GENERAL: 'general',
  EMPHASIS: 'emphasis'
} as const;
```
# BorderColor

```typescript
type BorderColor = (typeof BORDER_COLOR)[keyof typeof BORDER_COLOR];
```
# Breadcrumb

The Breadcrumb component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: args => <Breadcrumb {...args}>
      <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
      <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
      <BreadcrumbItem href="https://www.appier.com/zh-tw/">
        Appier
      </BreadcrumbItem>
      <BreadcrumbItem disabled>AIQUA</BreadcrumbItem>
    </Breadcrumb>
};
```

## Usage

```tsx
import { Breadcrumb } from "@appier/aiqua-design-system

<Breadcrumb />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `size` | `(typeof SIZES)[keyof typeof SIZES]` | No | Defines the size of the breadcrumb. The breadcrumb will take the default size if the value is undefined. |
| `separator` | `React.ReactNode \| string` | No | Custom separator node. |

## Examples

### With Truncate

```tsx
export const WithTruncate = {
  render: args => <Breadcrumb {...args}>
      <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
      <BreadcrumbItem href="https://www.youtube.com/">Youtube</BreadcrumbItem>
      <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
      <BreadcrumbItem href="https://www.appier.com/zh-tw/">
        Appier
      </BreadcrumbItem>
      <BreadcrumbItem disabled>AIQUA</BreadcrumbItem>
    </Breadcrumb>
};
```

### With Editable Current Page

```tsx
export const WithEditableCurrentPage = {
  render: args => <Breadcrumb {...args}>
      <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
      <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
      <BreadcrumbItem href="https://www.appier.com/zh-tw/">
        Appier
      </BreadcrumbItem>
      <BreadcrumbItem editable>AIQUA</BreadcrumbItem>
    </Breadcrumb>
};
```

### With Editable Current Page And Default Value

```tsx
export const WithEditableCurrentPageAndDefaultValue = {
  render: args => <Breadcrumb {...args}>
      <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
      <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
      <BreadcrumbItem href="https://www.appier.com/zh-tw/">
        Appier
      </BreadcrumbItem>
      <BreadcrumbItem editable editableDefaultValue="Default Title">
        AIQUA
      </BreadcrumbItem>
    </Breadcrumb>
};
```


# BreadcrumbItem

The BreadcrumbItem component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: args => <Breadcrumb {...args}>
      <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
      <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
      <BreadcrumbItem href="https://www.appier.com/zh-tw/">
        Appier
      </BreadcrumbItem>
      <BreadcrumbItem disabled>AIQUA</BreadcrumbItem>
    </Breadcrumb>
};
```

## Usage

```tsx
import { BreadcrumbItem } from "@appier/aiqua-design-system

<BreadcrumbItem />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `href` | `string` | No | Target of hyperlink. |
| `disabled` | `boolean` | No | If `true`, the crumb is accepted a hyperlink. |
| `editable` | `boolean` | No | If `true`, allow current crumb could be edit. |
| `editableDefaultValue` | `string` | No | Default value for editable crumbs, if user clear the edit input, then show the this value |
| `onClick` | `(e: MouseEvent<HTMLSpanElement>) => void` | No | Set the handler to handle click event. |
| `onEditableInputComplete` | `(newValue: string) => void` | No | Set the handler to handle complete event if there have inner input element. |
| `onEditableInputChange` | `(newValue: string) => void` | No | The handler called when the value of the inner input changes. |
| `editableInputProps` | `object` | No | Attributes applied to the inner `input` element. |
| `children` | `React.ReactNode` | Yes | The content of the crumb. |

## Examples

### With Truncate

```tsx
export const WithTruncate = {
  render: args => <Breadcrumb {...args}>
      <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
      <BreadcrumbItem href="https://www.youtube.com/">Youtube</BreadcrumbItem>
      <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
      <BreadcrumbItem href="https://www.appier.com/zh-tw/">
        Appier
      </BreadcrumbItem>
      <BreadcrumbItem disabled>AIQUA</BreadcrumbItem>
    </Breadcrumb>
};
```

### With Editable Current Page

```tsx
export const WithEditableCurrentPage = {
  render: args => <Breadcrumb {...args}>
      <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
      <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
      <BreadcrumbItem href="https://www.appier.com/zh-tw/">
        Appier
      </BreadcrumbItem>
      <BreadcrumbItem editable>AIQUA</BreadcrumbItem>
    </Breadcrumb>
};
```

### With Editable Current Page And Default Value

```tsx
export const WithEditableCurrentPageAndDefaultValue = {
  render: args => <Breadcrumb {...args}>
      <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
      <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
      <BreadcrumbItem href="https://www.appier.com/zh-tw/">
        Appier
      </BreadcrumbItem>
      <BreadcrumbItem editable editableDefaultValue="Default Title">
        AIQUA
      </BreadcrumbItem>
    </Breadcrumb>
};
```


# BreadcrumbItemProps

```typescript
interface BreadcrumbItemProps extends HTMLAttributes<HTMLSpanElement> {
  /**
   * Target of hyperlink.
   */
  href?: string;
  /**
   * If `true`, the crumb is accepted a hyperlink.
   */
  disabled?: boolean;
  /**
   * If `true`, allow current crumb could be edit.
   */
  editable?: boolean;
  /**
   * Default value for editable crumbs, if user clear the edit input, then show the this value
   */
  editableDefaultValue?: string;
  /**
   * Set the handler to handle click event.
   */
  onClick?: (e: MouseEvent<HTMLSpanElement>) => void;
  /**
   * Set the handler to handle complete event if there have inner input element.
   */
  onEditableInputComplete?: (newValue: string) => void;
  /**
   * The handler called when the value of the inner input changes.
   */
  onEditableInputChange?: (newValue: string) => void;
  /**
   * Attributes applied to the inner `input` element.
   */
  editableInputProps?: object;
  /**
   * The content of the crumb.
   */
  children: React.ReactNode;
}
```
# BreadcrumbProps

```typescript
type BreadcrumbProps = StyleProps & ConfigProps & HTMLAttributes<HTMLDivElement>;
```
# ButtonOwnProps

```typescript
interface ButtonOwnProps<ElementType extends React.ElementType = 'button'> extends React.HTMLAttributes<HTMLElement>, StyleProps, ConfigProps {
  /**
   * The HTML tag or React Element (e.g. `RouterLink`) to use for the wrapper element.
   * @default 'button'
   */
  as?: ElementType;
}
```
# ButtonProps

```typescript
type ButtonProps<ElementType extends React.ElementType = 'button'> = ButtonOwnProps<ElementType> & React.ComponentPropsWithoutRef<ElementType>;
```
# CALENDAR_WIDTH

```typescript
const CALENDAR_WIDTH = 328;
```
# CalendarBasicProps

```typescript
interface CalendarBasicProps {
  /**
   * Defines minimum date. The calendar will apply five years before today's date if the minDate is undefined.
   */
  minDate?: Date;
  /**
   * Defines maximum date. The calendar will apply five years after today's date if the maxDate is undefined.
   */
  maxDate?: Date;
  /**
   * Note: when minDate and today is in the same month, the date picker will be focused in previous month
   * (work around) This props will hide previous disabled month, letting current month be at the top.
   * `minDate` should be provided when applying this props.
   */
  hideAdjacentMinMonths?: boolean;
}
```
# CalendarWrapper

The CalendarWrapper component is a key part of the Aiqua Design System.

## Usage

```tsx
import { CalendarWrapper } from "@appier/aiqua-design-system";

<CalendarWrapper />
```

> **Note:** This is a scaffold file. To generate full, rich examples, please create a `*.stories.tsx` file for this component.

# Card

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=1-107797&mode=dev)

Cards group information into flexible containers to let users to browse a collection of related items and actions. They are used to organize and present content in a visually appealing manner, making it easy for users to scan, understand, and interact with the information.

## Main Example

```tsx
export const Normal = {
  render: NormalComponent,
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { Card } from "@appier/aiqua-design-system

<Card />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `title` | `React.ReactNode` | No | Defines the title of the component. |
| `subtitle` | `React.ReactNode` | No | Defines the subtitle of the component. Will only be applied to horizontal cards. |
| `content` | `React.ReactNode` | Yes | Defines the content of the component. |
| `action` | `React.ReactNode` | No | Defines the operational area / element of the component. |
| `direction` | `(typeof DIRECTION)[keyof typeof DIRECTION]` | No | Defines the direction of the component. Default set to vertical. |
| `selected` | `boolean` | No | Defines whether the component is selected |
| `disabled` | `boolean` | No | Defines whether the component is disabled |
| `error` | `boolean` | No | Defines whether the component should display error styling |
| `warning` | `boolean` | No | Defines whether the component should display warning styling |
| `titleLineClamp` | `number` | No | Defines the number of lines to show before truncating the title. If set, will show a tooltip with the full title when truncated. |
| `padding` | `number` | No | Defines the padding of the component. Default set to 12. |

## Examples

### With Action

```tsx
export const WithAction = () => <Card content={<VerticalContent />} title={'Card title'} action={<IconButton icon={<DSIcon is="moreOutlined20" />} size="small" />} />;
```

### Direction

```tsx
export const Direction = () => <Card title={'Card title'} direction={DIRECTION.HORIZONTAL} content={<HorizontalContent />} action={<IconButton icon={<DSIcon is="moreOutlined20" />} size="small" />} />;
```

### With Subtitle

```tsx
export const WithSubtitle = () => <Card title={'Card title'} direction={DIRECTION.HORIZONTAL} content={<HorizontalContent />} subtitle={'250KB'} />;
```

### Selected And Disabled

```tsx
export const SelectedAndDisabled = () => <div style={{
  display: 'flex',
  gap: 20
}}>
    <Card content={<VerticalContent />} title={'Card title'} selected />
    <Card content={<VerticalContent />} title={'Card title'} disabled />
  </div>;
```

### Error And Warning

```tsx
export const ErrorAndWarning = () => <div style={{
  display: 'flex',
  gap: 20
}}>
    <Card content={<VerticalContent />} title={'Card title'} error />
    <Card content={<VerticalContent />} title={'Card title'} warning />
  </div>;
```


# CardProps

```typescript
type CardProps = ConfigProps & StyleProps & Omit<React.HTMLAttributes<HTMLDivElement>, 'content'>;
```
# CHART_FIXED_OPTIONS

```typescript
const CHART_FIXED_OPTIONS = {
  legend: {
    type: 'scroll'
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'line'
    }
  },
  grid: {
    left: 0,
    right: 20,
    top: 5,
    bottom: 36,
    containLabel: true
  },
  xAxis: {
    type: 'category',
    axisLine: {
      onZero: false
    }
  }
};
```
# ChartDataInterface

```typescript
interface ChartDataInterface {
  tables: TablesDataInterface[];
}
```
# ChartDimensions

```typescript
type ChartDimensions = Dimension[];
```
# ChartFieldConfig

```typescript
interface ChartFieldConfig {
  field?: string;
}
```
# ChartMetrics

```typescript
type ChartMetrics = Metric[];
```
# Chatroom

The Chatroom component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = Template.bind({});
```

## Usage

```tsx
import { Chatroom } from "@appier/aiqua-design-system

<Chatroom />
```

## Examples

### with Controlled Input

```tsx
export const withControlledInput = () => {
  const [inputValue, setInputValue] = useState('');
  return <div>
      <Chatroom {...normalProps} inputValue={inputValue} onInputValueChange={setInputValue} />
    </div>;
};
```

### Image Upload

```tsx
export const ImageUpload = () => {
  const [messages, setMessages] = React.useState<ChatroomMessage[]>([{
    align: MESSAGE_POSITION.RIGHT,
    timestamp: 1_665_728_477,
    showTimestamp: true,
    messageType: MESSAGE_TYPE.IMAGE,
    showQuickReplies: true,
    messageContents: ['https://aiqua.appier.com/media/aiqua-logo.png', 'Hello!']
  }]);
  const [uploadedFile, setUploadedFile] = React.useState<FileProps[]>([{
    file: new File([], 'dummy'),
    name: 'dummy',
    type: 'image',
    url: 'https://aiqua.appier.com/media/aiqua-logo.png'
  }]);
  const handlerReply = (messages: ChatroomMessage[]) => {
    setMessages(messages);
  };
  const handleUpload = (files: FileProps[], error?: string) => {
    setUploadedFile(files);
    console.log(error);
  };
  return <div>
      <Chatroom agent={normalProps.agent} uploadType={UploadType.IMAGE} upload={handleUpload} onReply={handlerReply} onDeleteFile={setUploadedFile} messages={messages} uploadedFiles={uploadedFile} />
    </div>;
};
```

### with Controller Callback

```tsx
export const withControllerCallback = () => {
  const [messages, setMessages] = React.useState<ChatroomMessage[]>([{
    align: MESSAGE_POSITION.RIGHT,
    timestamp: 1_665_728_477,
    showTimestamp: true,
    messageType: MESSAGE_TYPE.IMAGE,
    showQuickReplies: true,
    messageContents: ['https://aiqua.appier.com/media/aiqua-logo.png', 'Hello!']
  }]);
  const [uploadedFile, setUploadedFile] = React.useState<FileProps[]>([{
    file: new File([], 'dummy'),
    name: 'dummy',
    type: 'image',
    url: 'https://aiqua.appier.com/media/aiqua-logo.png'
  }]);
  const handlerReply = (messages: ChatroomMessage[]) => {
    setMessages(messages);
  };
  const handleUpload = (files: FileProps[]) => {
    setUploadedFile(files);
  };
  return <div>
      <Chatroom agent={normalProps.agent} uploadType={UploadType.IMAGE} upload={handleUpload} onReply={handlerReply} onDeleteFile={setUploadedFile} messages={messages} uploadedFiles={uploadedFile} controllerCallbacks={{
      clickUpload: () => {
        console.log('upload button clicked');
      },
      clickImageThumbnail: () => {
        console.log('image thumbnail clicked');
      },
      clickMessageImage: () => {
        console.log('message image clicked');
      }
    }} />
    </div>;
};
```

### Input Action Button

```tsx
export const InputActionButton = () => {
  const [messages, setMessages] = React.useState<ChatroomMessage[]>([{
    align: MESSAGE_POSITION.RIGHT,
    timestamp: 1_665_728_477,
    showTimestamp: true,
    messageType: MESSAGE_TYPE.TEXT,
    messageContents: ['Create multiple ad groups in batch']
  }]);
  return <div className="h-screen">
      <Chatroom agent={normalProps.agent} onReply={setMessages} messages={messages} inputActionButton={<div className="mb-[1px] h-[20px]">
            <IconButton size="small" icon={<DSIcon is="listViewOutlined20" />} tooltipText="View prompts" onClick={() => {}} />
          </div>} />
    </div>;
};
```

### Other Case

```tsx
export const OtherCase = () => <Chatroom.Root className="w-[360px]">
    <Chatroom.NavbarRoot className="sticky top-spacing-0 z-10 flex h-fit w-full shrink-0 flex-col">
      <Chatroom.NavbarContainer themeType={THEME_TYPES.LIGHT} className="flex w-full flex-row items-center justify-between px-spacing-16 py-spacing-12">
        <div>
          <div className="text-content-high headline-4">
            Keywords suggestion copilot
          </div>
        </div>
        <DSIcon is="crossOutlined20" />
      </Chatroom.NavbarContainer>
      <div className="flex h-[48px] items-center bg-surface-primary px-spacing-20 py-spacing-8">
        <div className="flex-1">
          <div className="text-content-low headline-6">Site/App</div>
          <div className="text-content-high headline-6">Appier Shop</div>
        </div>
        <div className="flex-1">
          <div className="text-content-low headline-6">Devices</div>
          <div className="text-content-high headline-6">Web, iOS, Android</div>
        </div>
        <div>
          <DSIcon is="abTestOutlined20" />
        </div>
      </div>
    </Chatroom.NavbarRoot>
    <Chatroom.Container theme={'light'} className="flex flex-1 flex-col pb-spacing-16">
      <ScrollBar>
        <div className="h-[calc(100vh-64px)] overflow-auto px-spacing-16 pt-spacing-16">
          <Chatroom.MessageBubble align={MESSAGE_POSITION.LEFT} theme={THEME_TYPES.LIGHT}>
            <Chatroom.Text value="Test content" />
          </Chatroom.MessageBubble>
          <Chatroom.MessageBubble align={MESSAGE_POSITION.RIGHT} theme={THEME_TYPES.LIGHT}>
            <Chatroom.Text value="Test content" />
          </Chatroom.MessageBubble>
        </div>
      </ScrollBar>
      <div className="sticky bottom-spacing-0 mx-spacing-16 mt-spacing-12 shrink-0">
        <Chatroom.InputBar send={() => {}} theme={THEME_TYPES.LIGHT} />
      </div>
    </Chatroom.Container>
  </Chatroom.Root>;
```


# ChatroomMessage

```typescript
type ChatroomMessage = Omit<MessageBubbleProps, 'children' | 'showAvatar' | 'theme' | 'isErrorMsg'> & {
  showQuickReplies?: boolean;
  actionHandler?: ReactNode;
  outerActionHandler?: ReactNode;
  messageType: MESSAGE_TYPE;
  messageContents: TextProps['value'] | ReactNode | string[]; // [imageUrl, message] for temporary use
  messageSourceType?: MESSAGE_TYPE;
};
```
# ChatroomProps

```typescript
type ChatroomProps = {
  /**
   * The agent that is answering the user's conversation
   */
  agent: ChatAgent;
  /**
   * The profile of the user
   */
  user?: ChatAgent;
  /**
   * Decide whether to show agent's avatar in font of the message.
   * @default true
   */
  showAgentAvatar?: boolean;
  /**
   * Decide whether to show user's avatar in font of the message.
   * @default true
   */
  showUserAvatar?: boolean;
  /**
   * Decide whether to show the expand button on navbar.
   * @default true
   */
  showExpandButton?: boolean;
  /**
   * Array of messages, left indicates the message that the agent sent, while right points to the user.
   */
  messages?: ChatroomMessage[];
  /**
   * Quick replies for the users to choose
   * TODO: Deprecate chatroom level quick replies as now we support message level quick replies
   */
  quickReplies?: QuickReplyProps[];
  /**
   * Switching the position of the dock.
   */
  withSwitchPosition?: boolean;
  /**
   * the function that will be called when the user send the messages, returning the whole message array.
   * @param messages
   * @returns
   */
  onReply?: (messages: ChatroomMessage[]) => void;
  /**
   * function trigger when position is switched
   * @returns
   */
  onSwitch?: (position?: DockPosition) => void;
  /**
   * function triggered when the chatroom close event is triggered.
   * @returns
   */
  onClose?: () => void;
  /**
   * function triggered when the chatroom expand/collapse event is triggered.
   * @returns
   */
  onExpand?: (isExpand: boolean) => void;
  /**
   * The theme of the chatroom. The chatroom will take the default theme if the value is `undefined`.
   */
  theme?: THEME_TYPES;
  /**
   * @deprecated Use `messages` instead
   * error
   */
  error?: string | ReactNode;
  /**
   * Controller of disabling user input
   */
  isUserInputDisabled?: boolean;
  /**
   * The label for input bar placeholder
   */
  inputPlaceholderLabel?: string;
  /**
   * The default value for input
   */
  inputDefaultValue?: string;
  /**
   * The controlled value for input
   */
  inputValue?: string;
  /**
   * The function that will be called when the user input value changes
   */
  onInputValueChange?: (value: string) => void;
  /**
   * The label for left side expand icon button
   */
  expandTooltip?: string;
  /**
   * The warning message under input
   */
  warningMessage?: string;
  /**
   * The label for dock to right tooltip
   */
  dockToRightTooltip?: string;
  /**
   * The label for dock to left tooltip
   */
  dockToLeftTooltip?: string;
  /**
   * The label for close chatroom tooltip
   */
  closeChatroomTooltip?: string;
  /**
   * Callback for event fired for each controller element.
   * Provide the callback function to the mapping event, including `clickUpload`, `clickImageThumbnail`, `clickMessageImage`
   */
  controllerCallbacks?: ControllerCallbacks;
} & (
// The chatroom doesn't support file upload
({
  uploadType?: undefined;
} & Pick<InputBarProps, 'inputActionButton'>)
// The chatroom has upload turned on
| (Pick<InputBarProps, 'uploadType' | 'upload' | 'uploadedFiles' | 'maxFileSize' | 'maxFileCount' | 'onDeleteFile'> & {
  inputActionButton?: never;
}));
```
# CHECKBOX_FIELD_NAME

```typescript
const CHECKBOX_FIELD_NAME = '_chekboxCol';
```
# Checkbox

Version `v2.0.1` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=15679-118037&t=AJpHD5HQ2KyonQSH-0)

CheckboxTree

## Main Example

```tsx
export const Value = () => {
  const values = [{
    title: <div>
          <p className="m-spacing-0">label: 1</p>
          <p className="m-spacing-0 text-content-low">sub label: 1</p>
        </div>,
    value: true,
    children: [{
      title: '1-1',
      value: true,
      children: [{
        title: '1-1-1',
        value: true,
        children: [{
          title: '1-1-1-1',
          value: true
        }]
      }]
    }, {
      title: '1-2',
      value: false
    }, {
      title: '1-3',
      value: true,
      children: [{
        title: '1-3-1',
        value: false
      }]
    }]
  }, {
    title: '2',
    value: false
  }];
  const [checkedValues, setCheckedValues] = React.useState<Object[]>(values);
  const handleOnChange = (newValues: Object[]) => {
    setCheckedValues(newValues);
  };
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <CheckboxTree values={checkedValues} onChange={handleOnChange} />
    </div>;
};
```

## Usage

```tsx
import { Checkbox } from "@appier/aiqua-design-system

<Checkbox />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `indeterminate` | `boolean` | No | The indeterminate checked state of checkbox. This only affects the icon shown inside checkbox and does not modify the checked props. |
| `isSummary` | `boolean` | No | Defines the Checkbox be summary state or not |

## Examples

### With Icon

```tsx
export const WithIcon = {
  args: {
    isWithIcon: true
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```


# CheckboxConfig

```typescript
type CheckboxConfig = Omit<CheckboxProps, 'label' | 'value'>;
```
# CheckboxGroup

Version `v2.0.1` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=15679-118037&t=AJpHD5HQ2KyonQSH-0)

CheckboxTree

## Main Example

```tsx
export const Value = () => {
  const values = [{
    title: <div>
          <p className="m-spacing-0">label: 1</p>
          <p className="m-spacing-0 text-content-low">sub label: 1</p>
        </div>,
    value: true,
    children: [{
      title: '1-1',
      value: true,
      children: [{
        title: '1-1-1',
        value: true,
        children: [{
          title: '1-1-1-1',
          value: true
        }]
      }]
    }, {
      title: '1-2',
      value: false
    }, {
      title: '1-3',
      value: true,
      children: [{
        title: '1-3-1',
        value: false
      }]
    }]
  }, {
    title: '2',
    value: false
  }];
  const [checkedValues, setCheckedValues] = React.useState<Object[]>(values);
  const handleOnChange = (newValues: Object[]) => {
    setCheckedValues(newValues);
  };
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <CheckboxTree values={checkedValues} onChange={handleOnChange} />
    </div>;
};
```

## Usage

```tsx
import { CheckboxGroup } from "@appier/aiqua-design-system

<CheckboxGroup />
```

## Examples

### With Icon

```tsx
export const WithIcon = {
  args: {
    isWithIcon: true
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```


# CheckboxGroupProps

```typescript
type CheckboxGroupProps = Override<React.HTMLAttributes<HTMLDivElement>, ConfigProps>;
```
# CheckboxProps

```typescript
type CheckboxProps = SwitchBaseProps & ConfigProps & StyleProps;
```
# CheckboxTree

Version `v2.0.1` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=15679-118037&t=AJpHD5HQ2KyonQSH-0)

CheckboxTree

## Main Example

```tsx
export const Value = () => {
  const values = [{
    title: <div>
          <p className="m-spacing-0">label: 1</p>
          <p className="m-spacing-0 text-content-low">sub label: 1</p>
        </div>,
    value: true,
    children: [{
      title: '1-1',
      value: true,
      children: [{
        title: '1-1-1',
        value: true,
        children: [{
          title: '1-1-1-1',
          value: true
        }]
      }]
    }, {
      title: '1-2',
      value: false
    }, {
      title: '1-3',
      value: true,
      children: [{
        title: '1-3-1',
        value: false
      }]
    }]
  }, {
    title: '2',
    value: false
  }];
  const [checkedValues, setCheckedValues] = React.useState<Object[]>(values);
  const handleOnChange = (newValues: Object[]) => {
    setCheckedValues(newValues);
  };
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <CheckboxTree values={checkedValues} onChange={handleOnChange} />
    </div>;
};
```

## Usage

```tsx
import { CheckboxTree } from "@appier/aiqua-design-system

<CheckboxTree />
```

## Examples

### With Icon

```tsx
export const WithIcon = {
  args: {
    isWithIcon: true
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```


# CheckboxTreeProps

```typescript
type CheckboxTreeProps = Override<React.HTMLAttributes<HTMLDivElement>, ConfigProps>;
```
# Col

```typescript
interface Col {
  field: string;
  displayName: string;
  type: (typeof OPTION_FIELD_TYPE)[keyof typeof OPTION_FIELD_TYPE];
  isPreviousPeriod?: boolean;
  isUplift?: boolean;
}
```
# Color

```typescript
interface Color {
  hex: string;
  rgb: RgbColor;
  alpha: number;
}
```
# ColorPicker

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=1-117380&t=9hYhCr6LJkO8hNV0-4)

Allow user to select colors through Hex and RGBA interfaces along with Alpha adjustment. Eyedropper and preset color group are also provided to enhance color manipulations.

### Color Format

##### Input
The input color format supports both Hex string and RGBA string. If Hex string is provided, the value for alpha will be set to 1 as default.

```tsx
const exampleHexInputColor = "#ffffff"
// or
const exampleRgbaInputColor = "rgba(255, 255, 255, 1)"
```

##### Output

The output color format and type are shown as below. The Hex format of the color can be used directly and
the RGBA format should be used along with the exported util function `toRgbaString`.

```tsx
// type
type Color = {
hex: string;
rgb: {
r: number;
g: number;
b: number;
};
alpha: number;
};

// example
const exampleOutputColor = {
hex: '#ffffff',
rgb: {
r: 255,
g: 255,
b: 255,
},
alpha: 1,
}

// using RGBA color
const rgbaString = toRgbaString({
...exampleColor.rgb,
alpha: exampleColor.alpha,
});

// using Hex color with Alpha
const hexWithAlpha = combineHexWithAlpha({
hex: exampleColor.hex,
alpha: exampleColor.alpha,
});
```

### Preset Colors

#### Adding / Deleting
Each preset color can be:
- added by clicking the add button
- removed by hovering on the color square for 1 second and clicking the delete button on the displayed menu

## Main Example

```tsx
export const Normal = {
  render: NormalComponent,
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { ColorPicker } from "@appier/aiqua-design-system

<ColorPicker />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `color` | `InputColor` | No | The color of the `ColorPicker` component, required for a controlled component. |
| `defaultColor` | `InputColor` | No | The default component color. Used when the component is uncontrolled. |
| `onColorChange` | `(color: Color) => void` | No | The handler called when the color of the component changes. |
| `presetColors` | `InputColor[]` | No | The presetn colors of the `ColorPicker` component, required for a controlled component. |
| `defaultPresetColors` | `InputColor[]` | No | The default component preset colors. Used when the component is uncontrolled. |
| `onPresetColorsChange` | `(presetColors: Color[]) => void` | No | The handler called when the preset colors of the component changes. |
| `disablePresetColors` | `boolean` | No | The flag for enabling the preset color function |
| `deleteLabel` | `string` | No | Defines label of Delete button |

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [color, setColor] = React.useState(DEFAULT_COLOR_INPUT);
  const [presetColors, setPresetColors] = React.useState(DEFAULT_PRESET_COLORS_INPUT);
  const handleColorChange = useCallback((color: Color) => {
    setColor(toRgbaString({
      ...color.rgb,
      alpha: color.alpha
    }));
  }, []);
  const handlePresetColorsChange = useCallback((presetColors: Color[]) => {
    setPresetColors(presetColors.map(color => toRgbaString({
      ...color.rgb,
      alpha: color.alpha
    })));
  }, []);
  return <div style={{
    display: 'flex',
    gap: '50px'
  }}>
      {/* Controlled */}
      <ColorPicker color={color} onColorChange={handleColorChange} presetColors={presetColors} onPresetColorsChange={handlePresetColorsChange} />
      {/* Uncontrolled */}
      <ColorPicker defaultColor={DEFAULT_COLOR_INPUT} defaultPresetColors={DEFAULT_PRESET_COLORS_INPUT} onColorChange={c => {
      console.log(c);
    }} />
    </div>;
};
```

### Eye Dropper

```tsx
export const EyeDropper = () => {
  const {
    isEyeDropperSupported,
    open: openEyeDropper
  } = useEyeDropper();
  return <IconButton iconSize={20} size="small" icon={<DSIcon is="dropperOutlined20" />} disabled={!isEyeDropperSupported} onClick={() => {
    openEyeDropper(hex => {
      console.log(hex);
    });
  }} />;
};
```

### Disable Preset Colors

```tsx
export const DisablePresetColors = {
  args: {
    disablePresetColors: true
  }
};
```


# ColorPickerProps

```typescript
interface ColorPickerProps {
  /**
   * The color of the `ColorPicker` component, required for a controlled component.
   */
  color?: InputColor;
  /**
   * The default component color. Used when the component is uncontrolled.
   */
  defaultColor?: InputColor;
  /**
   * The handler called when the color of the component changes.
   */
  onColorChange?: (color: Color) => void;
  /**
   * The presetn colors of the `ColorPicker` component, required for a controlled component.
   */
  presetColors?: InputColor[];
  /**
   * The default component preset colors. Used when the component is uncontrolled.
   */
  defaultPresetColors?: InputColor[];
  /**
   * The handler called when the preset colors of the component changes.
   */
  onPresetColorsChange?: (presetColors: Color[]) => void;
  /**
   * The flag for enabling the preset color function
   */
  disablePresetColors?: boolean;
  /**
   * Defines label of Delete button
   */
  deleteLabel?: string;
}
```
# ColumnChart

The ColumnChart component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const _ColumnChart = {
  render: Template
};
```

## Usage

```tsx
import { ColumnChart } from "@appier/aiqua-design-system

<ColumnChart />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `chartMetrics` | `Metric[]` | Yes | - |
| `chartTooltipOptions` | `BasicChartTooltipOptions` | No | - |

## Examples

### Customization

```tsx
export const Customization = () => {
  return <div>
      <div className="flex items-center gap-spacing-16">
        <h1 className="text-lg">Chart with error bar</h1>
        <span>
          used in AX{' '}
          <a href="https://www.figma.com/design/6d1qcKvOW6NNClSnUzwE09/AI-Gen-User?node-id=6017-42714">
            (figma)
          </a>
        </span>
      </div>
      <ChartWrapper>
        <ColumnChart chartMetrics={CHART_METRIC} chartData={BAR_CHART_TEST_DATA} chartDimensions={CHART_DIMENSIONS} customizeConfig={(config: EChartsCoreOption) => ({
        ...config,
        legend: false,
        series: [{
          ...(config.series as any[])?.find(s => s.type === 'bar'),
          colorBy: 'category'
        }, {
          type: 'custom',
          name: 'error',
          isError: true,
          renderItem: function (params: CustomSeriesRenderItemParams, api: CustomSeriesRenderItemAPI) {
            const xValue = api.value(0);
            const lowPoint = api.coord([xValue, api.value(1)]);
            const highPoint = api.coord([xValue, api.value(2)]);
            const halfWidth = 5;
            const style = {
              stroke: 'black',
              lineWidth: 1.5,
              lineCap: 'round'
            };
            return {
              type: 'group',
              children: [{
                type: 'line',
                transition: ['shape'],
                shape: {
                  x1: highPoint[0] - halfWidth,
                  y1: highPoint[1],
                  x2: highPoint[0] + halfWidth,
                  y2: highPoint[1]
                },
                style
              }, {
                type: 'line',
                transition: ['shape'],
                shape: {
                  x1: highPoint[0],
                  y1: highPoint[1],
                  x2: lowPoint[0],
                  y2: lowPoint[1]
                },
                style
              }, {
                type: 'line',
                transition: ['shape'],
                shape: {
                  x1: lowPoint[0] - halfWidth,
                  y1: lowPoint[1],
                  x2: lowPoint[0] + halfWidth,
                  y2: lowPoint[1]
                },
                style
              }]
            };
          },
          encode: {
            x: 'index',
            y: ['low', 'high']
          },
          data: BAR_CHART_TEST_DATA.tables[0].rows.map(([platform, value]) => [platform, (value as number) * 0.9, (value as number) * 1.1]),
          stack: 'stack',
          z: 100,
          tooltip: {
            show: false
          }
        }]
      })} />
      </ChartWrapper>
    </div>;
};
```


# ColumnChartProps

```typescript
interface ColumnChartProps extends BasicChartProps {
  chartMetrics: Metric[];
  chartTooltipOptions?: BasicChartTooltipOptions;
}
```
# ColumnsStyleOptions

```typescript
interface ColumnsStyleOptions {
  borderBottom?: boolean;
  borderRight?: boolean;
  borderLeft?: boolean;
  minWidth?: string | number;
  width: string | number;
  paddingSize?: typeof SIZES.MEDIUM | typeof SIZES.SMALL;
  align?: (typeof ALIGNMENT)[keyof typeof ALIGNMENT];
  truncatedTooltip?: boolean;
}
```
# ColumnsType

```typescript
type ColumnsType<T> = (ColumnsStyleOptions & {
  field: string;
  headerName: React.ReactNode;
  resizable?: ResizeOptions['resizable'];
  sortable?: boolean;
  sortOrder?: string;
  valueGetter?: (rowData: T, rowIndex: number) => React.ReactNode;
  /**
   * Function to determine cell highlighting
   * @param rowData - The row's data
   * @returns highlight color (string), 'true' for default highlighting, or 'false' for no highlighting
   */
  highlighter?: (rowData: T) => string | boolean;
})[];
```
# ConfigProps

```typescript
interface ConfigProps {
  /**
   * Defines the label beside component.
   */
  label?: React.ReactNode;
  /**
   * Defines the content of badge component.
   */
  content?: React.ReactNode;
  /**
   * Defines the variant of the badge. The badge will take the default variant if the value is `undefined`.
   */
  variant?: (typeof VARIANT)[keyof typeof VARIANT];
  /**
   * Defines the size of the badge. The badge will take the default size if the value is `undefined`.
   */
  size?: (typeof SIZE)[keyof typeof SIZE];
}
```
# ConnectorCard

Version `v2.0.0` | [Figma specification](https://www.figma.com/design/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-%7C-Spec?node-id=24908-145711&t=IdLVtSXHNkOjlC6x-1)

Card display setting

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs'],
  render: (args: ConnectorCardProps<'div'>) => <div className="flex justify-center">
      <ConnectorCard className="sm:col-start-2 lg:col-start-3" {...args} />
    </div>
};
```

## Usage

```tsx
import { ConnectorCard } from "@appier/aiqua-design-system

<ConnectorCard />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `as` | `React.ElementType` | No | Custom tag for the master container, defaults to `a`. |
| `content` | `React.ReactNode` | No | Defines the content of ConnectorCard component. |
| `disabled` | `boolean` | No | Disables the card. |
| `external` | `boolean` | No | Display external icon. |
| `externalTooltip` | `React.ReactNode` | No | Tooltip content for the external icon. |
| `icon` | `DSColorfulIconProps['is']` | Yes | Icon of the card. |
| `status` | `Status` | No | Status of the card. |
| `statusContent` | `React.ReactNode` | No | Custom content for the card status. |
| `tags` | `string[]` | No | Tags to display in the card. |
| `title` | `React.ReactNode` | Yes | Title of the card. |

## Examples

### Status

```tsx
export const Status = () => <div className="grid grid-cols-1 gap-spacing-12 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
    <ConnectorCard title="BotBonnie" status="available" statusContent="Connect" icon="platformBotbonnieFullColor20" />
    <ConnectorCard title="BotBonnie" status="connected" statusContent="Connected" icon="platformBotbonnieFullColor20" />
    <ConnectorCard title="BotBonnie" status="error" statusContent={<span>
          <strong>2</strong> errors
        </span>} icon="platformBotbonnieFullColor20" />
    <ConnectorCard title="BotBonnie" status="info" statusContent="Web SDK required" icon="platformBotbonnieFullColor20" />
    <ConnectorCard title="BotBonnie" status="warning" statusContent={<span>
          <strong>2</strong> disconnected
        </span>} icon="platformBotbonnieFullColor20" />
    <ConnectorCard title="BotBonnie" status="loading" icon="platformBotbonnieFullColor20" />
    <ConnectorCard title="BotBonnie" statusContent="No status" icon="platformBotbonnieFullColor20" />
  </div>;
```

### Disabled

```tsx
export const Disabled = () => <div className="grid grid-cols-1 gap-spacing-12 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
    <ConnectorCard as="button" title="LINE" disabled icon="platformLINEFullColor24" tags={['Shop', 'Communication', 'App', 'E-commerce']} />
  </div>;
```

### As

```tsx
export const As = () => <div className="grid grid-cols-1 gap-spacing-12 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
    <ConnectorCard as="a" href="#" title="Instagram" status="available" statusContent="Connect" icon="platformInstagramFullColor24" />

    <ConnectorCard as="button" title="Instagram" status="available" statusContent="Connect" icon="platformInstagramFullColor24" />
  </div>;
```

### Icon

```tsx
export const Icon = () => <div className="grid grid-cols-1 gap-spacing-12 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
    <ConnectorCard title="Instagram" status="available" statusContent="Connect" icon="platformInstagramFullColor24" />
    <ConnectorCard title="LINE" status="available" statusContent="Connect" icon="platformLINEFullColor24" />
    <ConnectorCard title="TikTok" status="available" statusContent="Connect" icon="platformTiktokFullColor24" />
  </div>;
```

### Tags

```tsx
export const Tags = () => <div className="grid grid-cols-1 gap-spacing-12 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
    <ConnectorCard title="LINE" status="available" statusContent="Connect" icon="platformLINEFullColor24" tags={['E-commerce']} />
    <ConnectorCard title="LINE" status="available" statusContent="Connect" icon="platformLINEFullColor24" tags={['Shop', 'Communication', 'App', 'E-commerce']} />
  </div>;
```

### Ui State

```tsx
export const UiState = () => <div className="grid grid-cols-1 gap-spacing-12 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
    <div>
      <ConnectorCard title="Platform name" icon="platformLINEFullColor24" status="available" statusContent="Connect" tags={['Source', 'Destination']} />
    </div>
    <div>
      <ConnectorCard title="Platform name" icon="platformLINEFullColor24" status="available" statusContent="Connect" />
    </div>
    <div>
      <ConnectorCard title="Platform name" icon="platformLINEFullColor24" tags={['Source', 'Destination']} />
    </div>
    <div>
      <ConnectorCard title="Platform name" icon="platformLINEFullColor24" />
    </div>
  </div>;
```

### External

```tsx
export const External = () => <ConnectorCard as="a" href="https://www.appier.com" title="Platform name" icon="platformLINEFullColor24" external externalTooltip="Open in a new tab" status="available" statusContent="Connect" target="_blank" />;
```


# ConnectorCardProps

```typescript
type ConnectorCardProps<T extends React.ElementType> = ConfigProps & Omit<React.ComponentPropsWithoutRef<T>, keyof ConfigProps> & {
  as?: T;
};
```
# ContentAssistant

The ContentAssistant component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: args => {
    return <ContentAssistant {...args} />;
  }
};
```

## Usage

```tsx
import { ContentAssistant } from "@appier/aiqua-design-system

<ContentAssistant />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `buttonContent` | `React.ReactNode` | Yes | The content for the content assistant button. |
| `assistantHeader` | `React.ReactNode` | Yes | The area to display header of content assistant. |
| `assistantContent` | `React.ReactNode` | Yes | The area to display contents of content assistant. |
| `assistantFooter` | `React.ReactNode[]` | Yes | The area to display footer of content assistant. |
| `isCollapse` | `boolean` | Yes | Whether the content assistant is collapsed |
| `toggleCollapse` | `() => void` | Yes | Toggle the collpase status of content assistant |

## Examples

### With Hooks

```tsx
export const WithHooks = {
  render: args => {
    const {
      contentAssistant,
      toggleCollapse
    } = useContentAssistant(args);
    return <Container>
        <Button onClick={toggleCollapse}>ToggleCollapse</Button>
        {contentAssistant}
      </Container>;
  }
};
```


# ContentAssistantProps

```typescript
interface ContentAssistantProps {
  /**
   * The content for the content assistant button.
   */
  buttonContent: React.ReactNode;
  /**
   * The area to display header of content assistant.
   */
  assistantHeader: React.ReactNode;
  /**
   * The area to display contents of content assistant.
   */
  assistantContent: React.ReactNode;
  /**
   * The area to display footer of content assistant.
   */
  assistantFooter: React.ReactNode[];
  /**
   * Whether the content assistant is collapsed
   */
  isCollapse: boolean;
  /**
   * Toggle the collpase status of content assistant
   */
  toggleCollapse: () => void;
}
```
# CreateToastFnProps

```typescript
type CreateToastFnProps = Omit<ToastProps, 'id' | 'open' | 'type' | 'onRemove'> & {
  id?: string;
  type?: (typeof TOAST_TYPE)[keyof typeof TOAST_TYPE];
};
```
# CUSTOM_QUICK_SELECTION_UNIT

```typescript
const CUSTOM_QUICK_SELECTION_UNIT = {
  MONTH: 'month',
  DAY: 'day',
  RELATIVE_RANGE: 'relative_range',
  ABSOLUTE_RANGE: 'absolute_range'
} as const;
```
# CustomQuickSelectionAbsoluteRangeUnit

```typescript
interface CustomQuickSelectionAbsoluteRangeUnit {
  unit: typeof CUSTOM_QUICK_SELECTION_UNIT.ABSOLUTE_RANGE;
  /**
   * Defines the absolute date range.
   * The value should be an array containing two dates: start date and end date of the expected range
   *
   * For example:
   *  - To select the range of 2024, use:
   *      `[Mon Jan 01 2024 00:00:00 GMT+0800 (Taipei Standard Time), Tue Dec 31 2024 00:00:00 GMT+0800 (Taipei Standard Time)]`
   */
  value: Date[];
}
```
# CustomQuickSelectionBaseProps

```typescript
interface CustomQuickSelectionBaseProps {
  label: string;
  isSelected?: boolean;
  range?: (Date | undefined)[];
  key?: string;
}
```
# CustomQuickSelectionDayUnit

```typescript
interface CustomQuickSelectionDayUnit {
  unit: typeof CUSTOM_QUICK_SELECTION_UNIT.DAY;
  value: number;
  includingToday?: boolean;
}
```
# CustomQuickSelectionMonthUnit

```typescript
interface CustomQuickSelectionMonthUnit {
  unit: typeof CUSTOM_QUICK_SELECTION_UNIT.MONTH;
  value: number;
}
```
# CustomQuickSelectionOption

```typescript
type CustomQuickSelectionOption = CustomQuickSelectionBaseProps & (CustomQuickSelectionDayUnit | CustomQuickSelectionMonthUnit | CustomQuickSelectionRelativeRangeUnit | CustomQuickSelectionAbsoluteRangeUnit);
```
# CustomQuickSelectionRelativeRangeUnit

```typescript
interface CustomQuickSelectionRelativeRangeUnit {
  unit: typeof CUSTOM_QUICK_SELECTION_UNIT.RELATIVE_RANGE;
  /**
   * Defines the date range relative to today.
   * The value should be an array containing two objects that define the relative start and end of expected range
   *
   * For example:
   *  - To select a range of 14 days ago ~ 7 days ago, use:
   *      `[{ unit: 'day', value: -14 }, { unit: 'day', value: -7 }]`
   *
   *  - To select a range of 3 months ago ~ 3 days ago, use:
   *      `[{ unit: 'month', value: -3 }, { unit: 'day', value: -3 }]`
   */
  value: (CustomQuickSelectionDayUnit | CustomQuickSelectionMonthUnit)[];
}
```
# DataSource

```typescript
type DataSource = string[];
```
# DATE_ITEM_HEIGHT

```typescript
const DATE_ITEM_HEIGHT = 40;
```
# DateInput

```typescript
interface DateInput {
  /**
   * The short hint displayed in the date input before the user click a value.
   */
  placeholder?: string;
  /**
   * The controlled base value of date input
   */
  value: string;
  /**
   * Callback function fired when input changed.
   */
  onChange?: (newValue: string) => void;
  /**
   * Callback function fired when date be updated.
   */
  onDateUpdate?: (newDate?: Date) => void;
  /**
   * The value should fallback when input is invalid
   */
  fallbackDate?: Date;
  /**
   * Defines minimum selectable date.
   */
  selectedMinDate: Date;
  /**
   * Defines maximum selectable date.
   */
  selectedMaxDate: Date;
  /**
   * allow autoFocus to the date input box
   */
  autoFocus?: boolean;
}
```
# DatePicker

The DatePicker component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Solo = {
  render: Template
};
```

## Usage

```tsx
import { DatePicker } from "@appier/aiqua-design-system

<DatePicker />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `dateInputPlaceholder` | `string` | No | Defines placeholder of picker dateInput. |
| `todayLabel` | `string` | No | Defines label of Today button |
| `customAnchorEl` | `React.ReactNode` | No | The custom anchor element for date picker. Used as the replacement of select input |
| `onOpenChange` | `(isOpen: boolean) => void` | No | The handler called when the open state of the picker changes. |
| `defaultInputDate` | `Date` | No | the default date when focusing on the input box within the popup |

## Examples

### With Label

```tsx
export const WithLabel = {
  render: Template,
  args: {
    label: 'label'
  },
  parameters: {
    controls: {
      exclude: ['hint']
    }
  }
};
```

### With Hint

```tsx
export const WithHint = {
  render: Template,
  args: {
    hint: 'hint'
  }
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  render: Template,
  args: {
    ...WithHint.args,
    ...WithLabel.args
  }
};
```

### Trigger By Icon Button

```tsx
export const TriggerByIconButton = {
  render: args => {
    const [focused, setFocused] = useState(false);
    const handleOpenChange = useCallback((isOpen: boolean) => {
      setFocused(isOpen);
    }, []);
    return <>
        <DatePicker {...args} customAnchorEl={<IconButton icon={<DSIcon is="datePickerOutlined20" />} focused={focused} />} onOpenChange={handleOpenChange} />
      </>;
  }
};
```

### Hide Adjacent Min Months

```tsx
export const HideAdjacentMinMonths = {
  render: Template,
  args: {
    hideAdjacentMinMonths: true,
    minDate: new Date()
  }
};
```

### Solo And Cropped

```tsx
export const SoloAndCropped = {
  render: args => {
    return <div className="w-[100px]">
        <DatePicker {...args}></DatePicker>
      </div>;
  }
};
```


# DatePickerProps

```typescript
type DatePickerProps = CalendarBasicProps & PickerProps<Date> & {
  /**
   * Defines placeholder of picker dateInput.
   */
  dateInputPlaceholder?: string;
  /**
   * Defines label of Today button
   */
  todayLabel?: string;
  /**
   * The custom anchor element for date picker. Used as the replacement of select input
   */
  customAnchorEl?: React.ReactNode;
  /**
   * The handler called when the open state of the picker changes.
   */
  onOpenChange?: (isOpen: boolean) => void;
  /**
   * the default date when focusing on the input box within the popup
   */
  defaultInputDate?: Date;
};
```
# DateQuickSelectionPicker

The DateQuickSelectionPicker component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Solo = {
  render: Template
};
```

## Usage

```tsx
import { DateQuickSelectionPicker } from "@appier/aiqua-design-system

<DateQuickSelectionPicker />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `quickSelectionRanges` | `QuickSelectionRanges` | No | Defines quick selection options for Picker |
| `onQuickSelectionSelectedChange` | `(currentSelection?: CustomQuickSelectionOption \| BasicQuickSelectionOption) => void` | No | Defines callback function when quick selection selected change |
| `customSelectionLabel` | `string` | No | Defines basic `Custom` selection options label |
| `allTimeSelectionLabel` | `string` | No | Defines basic `All time` selection options label |
| `disableAllTimeSelectionOptions` | `boolean` | No | Disable `All time` selection options in quick selection panel |
| `defaultQuickSelectionKey` | `string` | No | Defines default quick selection key |
| `quickSelectionAreaClassName` | `string` | No | Defines class name for quick selection area, which is used to apply custom styles For example, you can use this to apply custom width to the quick selection area |

## Examples

### With Label

```tsx
export const WithLabel = {
  render: Template,
  args: {
    label: 'label'
  },
  parameters: {
    controls: {
      exclude: ['hint']
    }
  }
};
```

### With Hint

```tsx
export const WithHint = {
  render: Template,
  args: {
    hint: 'hint'
  }
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  render: Template,
  args: {
    ...WithHint.args,
    ...WithLabel.args
  }
};
```

### Trigger By Icon Button

```tsx
export const TriggerByIconButton = {
  render: args => {
    const [focused, setFocused] = useState(false);
    const handleOpenChange = useCallback((isOpen: boolean) => {
      setFocused(isOpen);
    }, []);
    return <DateQuickSelectionPickerWrapper>
        <DateQuickSelectionPicker {...args} customAnchorEl={<IconButton icon={<DSIcon is="datePickerOutlined20" />} focused={focused} />} quickSelectionRanges={quickSelectionRange} onOpenChange={handleOpenChange} />
      </DateQuickSelectionPickerWrapper>;
  }
};
```

### With Default Quick Selection

```tsx
export const WithDefaultQuickSelection = {
  render: args => {
    const [selection, setSelection] = useState<any>();
    const handleQuickSelectionSelectedChange = useCallback(currentSelection => {
      if (currentSelection) {
        setSelection(currentSelection);
      }
    }, [setSelection]);
    return <DateQuickSelectionPickerWrapper>
        <DateQuickSelectionPicker {...args} quickSelectionRanges={quickSelectionRange} onQuickSelectionSelectedChange={handleQuickSelectionSelectedChange} value={selection?.range ?? [new Date(), new Date()]} defaultQuickSelectionKey={BasicSelectionLabel.ALL_TIME} />
      </DateQuickSelectionPickerWrapper>;
  }
};
```

### With Custom Quick Selection

```tsx
export const WithCustomQuickSelection = {
  render: args => {
    const [selection, setSelection] = useState<any>();
    const handleQuickSelectionSelectedChange = useCallback(currentSelection => {
      if (currentSelection) {
        setSelection(currentSelection);
      }
    }, [setSelection]);
    const customQuickSelectionRange: QuickSelectionRanges = [{
      label: '2024',
      unit: 'absolute_range',
      value: [moment('2024-01-01', 'YYYY-MM-DD').toDate(), moment('2024-12-31', 'YYYY-MM-DD').toDate()]
    }, {
      label: '2024 Q4',
      unit: 'absolute_range',
      value: [moment('2024-10-01', 'YYYY-MM-DD').toDate(), moment('2024-12-31', 'YYYY-MM-DD').toDate()]
    }, {
      label: '3 months to 7 days before',
      unit: 'relative_range',
      value: [{
        unit: 'month',
        value: -3
      }, {
        unit: 'day',
        value: -7
      }]
    }, {
      label: '14 days to 7 days before',
      unit: 'relative_range',
      value: [{
        unit: 'day',
        value: -14
      }, {
        unit: 'day',
        value: -7
      }]
    }];
    return <DateQuickSelectionPickerWrapper>
        <DateQuickSelectionPicker {...args} quickSelectionRanges={customQuickSelectionRange} onQuickSelectionSelectedChange={handleQuickSelectionSelectedChange} value={selection?.range ?? [new Date(), new Date()]} defaultQuickSelectionKey={BasicSelectionLabel.ALL_TIME} />
      </DateQuickSelectionPickerWrapper>;
  }
};
```

### Solo And Cropped

```tsx
export const SoloAndCropped = {
  render: args => {
    return <div className="w-[100px]">
        <DateQuickSelectionPicker {...args}></DateQuickSelectionPicker>
      </div>;
  }
};
```

### Quick Selection Area Class Name

```tsx
export const QuickSelectionAreaClassName = {
  render: args => {
    return <DateQuickSelectionPickerWrapper>
        <DateQuickSelectionPicker {...args} quickSelectionAreaClassName="w-[180px]" />
      </DateQuickSelectionPickerWrapper>;
  }
};
```

### Disable Removable

```tsx
export const DisableRemovable = {
  render: Template,
  args: {
    ...WithHint.args,
    ...WithLabel.args,
    removable: false
  }
};
```


# DateQuickSelectionPickerProps

```typescript
type DateQuickSelectionPickerProps = DateRangePickerProps & {
  /**
   * Defines quick selection options for Picker
   */
  quickSelectionRanges?: QuickSelectionRanges;
  /**
   * Defines callback function when quick selection selected change
   */
  onQuickSelectionSelectedChange?: (currentSelection?: CustomQuickSelectionOption | BasicQuickSelectionOption) => void;
  /**
   * Defines basic `Custom` selection options label
   */
  customSelectionLabel?: string;
  /**
   * Defines basic `All time` selection options label
   */
  allTimeSelectionLabel?: string;
  /**
   * Disable `All time` selection options in quick selection panel
   */
  disableAllTimeSelectionOptions?: boolean;
  /**
   * Defines default quick selection key
   */
  defaultQuickSelectionKey?: string;
  /**
   * Defines class name for quick selection area, which is used to apply custom styles
   * For example, you can use this to apply custom width to the quick selection area
   */
  quickSelectionAreaClassName?: string;
};
```
# DateRangePicker

The DateRangePicker component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Solo = {
  render: Template
};
```

## Usage

```tsx
import { DateRangePicker } from "@appier/aiqua-design-system

<DateRangePicker />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `dateStartInputPlaceholder` | `string` | No | Defines placeholder of picker start dateInput. |
| `dateEndInputPlaceholder` | `string` | No | Defines placeholder of picker end dateInput. |
| `applyLabel` | `string` | No | Defines label of Apply button |
| `cancelLabel` | `string` | No | Defines label of Cancel button |
| `customAnchorEl` | `React.ReactNode` | No | The custom anchor element for date picker. Used as the replacement of select input |
| `onOpenChange` | `(isOpen: boolean) => void` | No | The handler called when the open state of the picker changes. |
| `onDateSelect` | `(newValue?: (Date \| undefined)[]) => void` | No | The handler called when user selects a date. |
| `defaultStartDate` | `Date` | No | the default date when focusing on the startDate input box within the popup |
| `removable` | `boolean` | No | Defines whether the input clear function and clear button should be shown. Default be `true`. |
| `footerInfo` | `string` | No | Defines the info text of the footer. |

## Examples

### With Label

```tsx
export const WithLabel = {
  render: Template,
  args: {
    label: 'label'
  },
  parameters: {
    controls: {
      exclude: ['hint']
    }
  }
};
```

### With Hint

```tsx
export const WithHint = {
  render: Template,
  args: {
    hint: 'hint'
  }
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  render: Template,
  args: {
    ...WithHint.args,
    ...WithLabel.args
  }
};
```

### With Footer Info

```tsx
export const WithFooterInfo = {
  render: Template,
  args: {
    label: 'Date Range',
    hint: 'Select a start and end date',
    footerInfo: 'This is some helpful information in the footer.'
  }
};
```

### Trigger By Icon Button

```tsx
export const TriggerByIconButton = {
  render: args => {
    const [focused, setFocused] = useState(false);
    const handleOpenChange = useCallback((isOpen: boolean) => {
      setFocused(isOpen);
    }, []);
    return <>
        <DateRangePicker {...args} customAnchorEl={<IconButton icon={<DSIcon is="datePickerOutlined20" />} focused={focused} />} onOpenChange={handleOpenChange} />
      </>;
  }
};
```

### Solo And Cropped

```tsx
export const SoloAndCropped = {
  render: args => {
    return <div className="w-[100px]">
        <DateRangePicker {...args}></DateRangePicker>
      </div>;
  }
};
```

### Disable Removable

```tsx
export const DisableRemovable = {
  render: Template,
  args: {
    ...WithHint.args,
    ...WithLabel.args,
    removable: false
  }
};
```


# DateRangePickerProps

```typescript
type DateRangePickerProps = CalendarBasicProps & PickerProps<(Date | undefined)[]> & {
  /**
   * Defines placeholder of picker start dateInput.
   */
  dateStartInputPlaceholder?: string;
  /**
   * Defines placeholder of picker end dateInput.
   */
  dateEndInputPlaceholder?: string;
  /**
   * Defines label of Apply button
   */
  applyLabel?: string;
  /**
   * Defines label of Cancel button
   */
  cancelLabel?: string;
  /**
   * The custom anchor element for date picker. Used as the replacement of select input
   */
  customAnchorEl?: React.ReactNode;
  /**
   * The handler called when the open state of the picker changes.
   */
  onOpenChange?: (isOpen: boolean) => void;
  /**
   * The handler called when user selects a date.
   */
  onDateSelect?: (newValue?: (Date | undefined)[]) => void;
  /**
   * the default date when focusing on the startDate input box within the popup
   */
  defaultStartDate?: Date;
  /**
   * Defines whether the input clear function and clear button should be shown.
   * Default be `true`.
   */
  removable?: boolean;
  /**
   * Defines the info text of the footer.
   */
  footerInfo?: string;
};
```
# DEFAULT_CHART_COLORS

```typescript
const DEFAULT_CHART_COLORS = [color.palette.blue60, color.palette.azure40, color.palette.orange50, color.palette.yellow40, color.palette.green50, color.palette.teal40, color.palette.purple50, color.palette.fuchsia40, color.palette.red50, color.palette.emerald50, color.palette.blue40, color.palette.azure20, color.palette.orange30, color.palette.yellow20, color.palette.green30, color.palette.teal20, color.palette.purple30, color.palette.fuchsia20, color.palette.red30, color.palette.emerald30] as const;
```
# DEFAULT_CHART_THEME

```typescript
const DEFAULT_CHART_THEME = {
  textStyle: {
    /**
     * Apply fontFamily to `inherit`.
     * Make all content of echart to apply the font of the project.
     */
    fontFamily: 'inherit'
  },
  color: DEFAULT_CHART_COLORS
};
```
# DEFAULT_DRAWER_PLACEMENT

```typescript
const DEFAULT_DRAWER_PLACEMENT = DRAWER_PLACEMENT.RIGHT;
```
# DEFAULT_DRAWER_SIZE

```typescript
const DEFAULT_DRAWER_SIZE = DRAWER_SIZE.MEDIUM;
```
# DEFAULT_DURATION

```typescript
const DEFAULT_DURATION = 6000;
```
# DEFAULT_MAX_IMAGE_SIZE

```typescript
const DEFAULT_MAX_IMAGE_SIZE = 20 * 1024 * 1024;
```
# DEFAULT_NULL_DIMENSION_TEXT

```typescript
const DEFAULT_NULL_DIMENSION_TEXT = 'Undefined';
```
# DEFAULT_PLACEMENT

```typescript
const DEFAULT_PLACEMENT = TOAST_PLACEMENT.BOTTOM;
```
# DEFAULT_TIMEZONE

```typescript
const DEFAULT_TIMEZONE = Intl.DateTimeFormat().resolvedOptions().timeZone;
```
# Dialog

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?node-id=1%3A59&mode=dev)

Dialogs are overlay components that display relevant data, actions, or processes above the main user interface. These elements demand immediate user engagement and can, depending on their type, restrict further interactions with the background interface until they are responded to or dismissed.

## Main Example

```tsx
export const Normal = {
  render: NormalComponent,
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { Dialog } from "@appier/aiqua-design-system

<Dialog />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `size` | `'400' \| '600' \| '800' \| '1000' \| '1200' \| 'fullWidth'` | Yes | Defined the size of Dialog, the size configuration could be varied in application. |
| `backgroundColor` | `'primary' \| 'secondary' \| 'tertiary' \| 'quaternary'` | No | Defined the background-color of Dialog body part. The dialog will take the default background-color if the value is undefined. |
| `height` | `number \| 'fullHeight'` | No | Defined the dialog height, if content exceed dialog height, it will be scrollable. The dialog height will be wrap content when height is not be defined |
| `zIndex` | `number` | No | Defines a specific z-index that will be applied to Dialog. The dialog will take the default z-index of `999` if the value is not defined. |
| `showFooterBorder` | `boolean` | No | Controls whether the footer border should be shown. |
| `header` | `React.ReactNode` | Yes | The area to display contents of dialog title. |
| `content` | `React.ReactNode` | Yes | The area to display contents of dialog body. |
| `footer` | `React.ReactNode[]` | Yes | The area to display operation buttons on footer. |
| `open` | `boolean` | Yes | Whether the modal dialog is open or not. |

## Examples

### Area

```tsx
export const Area = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        Click here
      </Button>
      <Dialog size="600" height={200} header="You could change this header" open={open} content="Hi this is body area for you to put your content" footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close (action button 3)
          </Button>, <Button key="2">action button 2</Button>, <Button key="3">action button 1</Button>]} />
    </>;
};
```

### Area With Scrollable

```tsx
export const AreaWithScrollable = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        Click here
      </Button>
      <Dialog size="600" height={400} header="You could change this header" open={open} content={<BigContent />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close (action button 3)
          </Button>, <Button key="2">action button 2</Button>, <Button key="3">action button 1</Button>]} />
    </>;
};
```

### Size

```tsx
export const Size = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        Size with number: 600
      </Button>
      <Dialog size="600" height={400} header="Title" open={open} content={<BigContent />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close
          </Button>]} />
    </>;
};
```

### Size With Full Width

```tsx
export const SizeWithFullWidth = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        Size with: fullWidth
      </Button>
      <Dialog size="fullWidth" height={400} header="Title" open={open} content={<BigContent />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close
          </Button>]} />
    </>;
};
```

### Background Color With Primary

```tsx
export const BackgroundColorWithPrimary = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        Primary background
      </Button>
      <Dialog size="400" height={400} backgroundColor="primary" header="Title" open={open} content={<Content />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close
          </Button>]} />
    </>;
};
```

### Background Color With Secondary

```tsx
export const BackgroundColorWithSecondary = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        Secondary background
      </Button>
      <Dialog size="400" height={400} backgroundColor="secondary" header="Title" open={open} content={<Content />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close
          </Button>]} />
    </>;
};
```

### Background Color With Tertiary

```tsx
export const BackgroundColorWithTertiary = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        Tertiary background
      </Button>
      <Dialog size="400" height={400} backgroundColor="tertiary" header="Title" open={open} content={<Content />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close
          </Button>]} />
    </>;
};
```

### Background Color With Quaternary

```tsx
export const BackgroundColorWithQuaternary = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        Quaternary background
      </Button>
      <Dialog size="400" height={400} backgroundColor="quaternary" header="Title" open={open} content={<Content />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close
          </Button>]} />
    </>;
};
```

### Height With Fixed Height

```tsx
export const HeightWithFixedHeight = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        fixed height: 400
      </Button>
      <Dialog size="600" height={400} header="Title" open={open} content={<Content />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close
          </Button>]} />
    </>;
};
```

### Height With Full Height

```tsx
export const HeightWithFullHeight = () => {
  const [open, setOpen] = React.useState(false);
  return <>
      <Button variant="secondary" onClick={() => {
      setOpen(true);
    }}>
        full height
      </Button>
      <Dialog size="600" height="fullHeight" header="Title" open={open} content={<BigContent />} footer={[<Button key="1" variant="secondary" onClick={() => {
      setOpen(false);
    }}>
            Close
          </Button>]} />
    </>;
};
```


# DialogProps

```typescript
type DialogProps = Omit<React.HTMLAttributes<HTMLDivElement>, 'content'> & StyleProps & ConfigProps;
```
# Dimension

```typescript
type Dimension = DateTimeDimension | ChartFieldConfig;
```
# DonutChart

The DonutChart component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const _DonutChart = {
  render: Template
};
```

## Usage

```tsx
import { DonutChart } from "@appier/aiqua-design-system

<DonutChart />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `chartData` | `ChartDataInterface` | Yes | Defines the data that will be used for drawing the chart. |
| `chartColorTheme` | `string[]` | No | Defines the color theme of each category from the data. The color will be applied according to the order of the string array. This affects both the chart and the legend. |
| `chartTheme` | `THEME_TYPES` | No | Configuring light / dark mode of the chart. |
| `customDataFormatter` | `(rows: {
  name: RowData;
  value: RowData;
}[]) => void` | No | Defines a custom formatter for the pie chart data; default displays the sum data value if not defined |
| `withTooltip` | `boolean` | No | Determines whether the chart should display a tooltip. Defaults to `false` if not specified. |

## Examples

### _ Donut Chart With Zero Sum

```tsx
export const _DonutChartWithZeroSum = {
  render: Template,
  args: {
    ..._DonutChart.args,
    chartData: DONUT_CHART_TEST_DATA_WITH_ZERO_SUM
  }
};
```


# DonutChartProps

```typescript
interface DonutChartProps extends BasicChartProps {
  /**
   * Defines the data that will be used for drawing the chart.
   */
  chartData: ChartDataInterface;
  /**
   * Defines the color theme of each category from the data. The color will be applied
   * according to the order of the string array. This affects both the chart and the legend.
   */
  chartColorTheme?: string[];
  /**
   * Configuring light / dark mode of the chart.
   */
  chartTheme?: THEME_TYPES;
  /**
   * Defines a custom formatter for the pie chart data;
   * default displays the sum data value if not defined
   */
  customDataFormatter?: (rows: {
    name: RowData;
    value: RowData;
  }[]) => void;

  /**
   * Determines whether the chart should display a tooltip.
   * Defaults to `false` if not specified.
   */
  withTooltip?: boolean;
}
```
# DotsProps

```typescript
type DotsProps = React.HTMLAttributes<HTMLDivElement> & StyleProps;
```
# DRAWER_PLACEMENT

```typescript
const DRAWER_PLACEMENT = {
  LEFT: 'left',
  RIGHT: 'right'
} as const;
```
# DRAWER_SIZE

```typescript
const DRAWER_SIZE = {
  SMALL: 'small',
  MEDIUM: 'medium',
  LARGE: 'large'
} as const;
```
# DRAWER_WIDTH_MAP

```typescript
const DRAWER_WIDTH_MAP = {
  [DRAWER_SIZE.SMALL]: 348,
  [DRAWER_SIZE.MEDIUM]: 720,
  [DRAWER_SIZE.LARGE]: 1000
} as const;
```
# Drawer

Version `v2.0.0` | [Figma specification]()

The Drawer component is a panel that slides out from the edge of the screen. It can be useful when you need users to complete a task or view some details without leaving the current page.

## Main Example

```tsx
export const Normal = {
  render: args => {
    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
    const open = Boolean(anchorEl || args.open);
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
      setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
      setAnchorEl(null);
    };
    return <>
        <Button variant="secondary" onClick={handleClick}>
          Click here
        </Button>
        <Drawer {...args} open={open} onClose={handleClose} anchorEl={anchorEl}>
          <Content />
        </Drawer>
      </>;
  }
};
```

## Usage

```tsx
import { Drawer } from "@appier/aiqua-design-system

<Drawer />
```


# DrawerId

```typescript
type DrawerId = string;
```
# DrawerProps

```typescript
type DrawerProps = {
  anchorEl: HTMLElement | null;
  /**
   * If true, the component is shown.
   */
  open: boolean;
  /**
   * The title of the toast to display.
   */
  title: string | React.ReactNode;
  /**
   * The content of the Drawer.
   */
  children?: React.ReactNode;
  /**
   * Defines the size of the Drawer. The Drawer will take the default size if the value is `undefined`.
   */
  size?: (typeof DRAWER_SIZE)[keyof typeof DRAWER_SIZE];
  /**
   * Position of Drawer.
   * @default "right"
   */
  placement?: (typeof DRAWER_PLACEMENT)[keyof typeof DRAWER_PLACEMENT];
  /**
   * Defines a specific z-index that will be applied to Drawer. The dialog will take the default z-index of `999` if the value is not defined.
   */
  zIndex?: number;
  /**
   * if true, the overlay is shown,
   * and the component is not closable by clicking outside it.
   * @default true
   */
  useOverlay?: boolean;
  /**
   * Callback fired when the component requests to be closed.
   * Typically onClose is used to set state in the parent component,
   * which is used to control the Drawer open prop.
   */
  onClose?: () => void;
} & React.HTMLAttributes<HTMLDivElement>;
```
# DrillDownMenu

The DrillDownMenu component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { DrillDownMenu } from "@appier/aiqua-design-system

<DrillDownMenu />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `title` | `ReactNode` | No | - |

## Examples

### With Menu Item Category

```tsx
export const WithMenuItemCategory = {
  render: Template,
  args: {
    ...Normal.args,
    children: [<MenuItemCategory title={'Category 1'}>
        <MenuItem>Item 1</MenuItem>
        <MenuItem>Item 2</MenuItem>
        <MenuDivider />
      </MenuItemCategory>, <MenuItem submenu={{
      items: [<MenuItemCategory title={'Category Test'}>
              <MenuItem>Test Item 3-1</MenuItem>
              <MenuItem>Test Item 3-2</MenuItem>
              <MenuDivider />
            </MenuItemCategory>, <MenuItem>Item 3-1</MenuItem>]
    }}>
        Item 3
      </MenuItem>]
  }
};
```

### Search Menu

```tsx
export const SearchMenu = {
  render: Template,
  args: {
    ...Normal.args,
    search: true,
    searchInputPlaceholder: 'placeholder',
    noSearchResultLabel: 'noSearchResultLabel',
    children: [<MenuItem keywords={['Item 1']} submenu={{
      items: [<MenuItem key={'1-1'}>Item 1-1</MenuItem>, <MenuItem key={'1-2'}>Item 1-2</MenuItem>]
    }} key={1}>
        Item 1
      </MenuItem>, <MenuItem search keywords={['Item 2']} submenu={{
      items: Array.from({
        length: 20
      }, (_, i) => i + 1).map(item => <MenuItem keywords={[`Item 2-${item}`]} key={`2-${item}`}>
              {`Item 2-${item}`}
            </MenuItem>),
      noSearchResultLabel: 'noSearchResultsLabel item 2'
    }} key={2}>
        Item 2
      </MenuItem>, <MenuItem keywords={['Item 3']} submenu={{
      items: [<MenuItem search submenu={{
        items: [<MenuItem keywords={['Item 3-1-1']} key={'3-1-1'}>
                    Item 3-1-1
                  </MenuItem>, <MenuItem keywords={['Item 3-1-2']} key={'3-1-2'}>
                    Item 3-1-2
                  </MenuItem>],
        hint: `(1) will be the latest event, (2) will be the 2nd latest event...etc`
      }} key={'3-1'}>
              Item 3-1
            </MenuItem>, <MenuItem key={'3-2'}>Item 3-2</MenuItem>]
    }} key={3}>
        Item 3
      </MenuItem>]
  }
};
```


# DrillDownMenuProps

```typescript
type DrillDownMenuProps = MenuProps & {
  title?: ReactNode;
};
```
# DropzoneProps

```typescript
type DropzoneProps = BaseDropzoneProps & {
  /**
   * The files to display in the dropbox, which can be uploaded, uploading, or have warning or error states.
   */
  files?: FileInfo[];
  /**
   * The variant of the dropbox, which can be 'image' or 'card'.
   */
  variant?: 'image' | 'card';
  /**
   * The warning message to display in the dropbox.
   */
  warn?: string;
  /**
   * The error message to display in the dropbox.
   */
  error?: string;
  /**
   * Whether the dropbox is disabled.
   */
  disabled?: boolean;
  /**
   * Currently, in the single mode, whenever there is any file,
   * the dropzone will automatically hide itself. In some cases, you
   * may need the same behavior, for example, when you need to treat
   * an entire folder as a single file.
   * */
  autoHideDropzone?: boolean;
  /**
   * The callback function to delete a file.
   */
  onDelete?: (index: number) => void;
  /**
   * The callback function to preview a file.
   */
  onPreview?: (index: number) => void;
};
```
# EditColumnConfig

EditColumnConfig is a dialog component that allows users to customize table column visibility and configuration.

Usage:
1. Trigger via an IconButton with edit column icon
2. Select/deselect columns to show/hide in the table
3. Configure sticky columns for horizontal scrolling
4. Apply changes to update the table view

Key features:
- Column visibility toggle
- Sticky columns configuration
- Persistent column settings

## Main Example

```tsx
export const WithVirtualizedTable = {
  render: Template
};
```

## Usage

```tsx
import { EditColumnConfig } from "@appier/aiqua-design-system

<EditColumnConfig />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `open` | `boolean` | Yes | Controls whether the dialog is open |
| `onClose` | `() => void` | Yes | Callback function when the dialog is closed |
| `columnConfig` | `Columns<T>` | Yes | Complete column configuration |
| `stickyColumnCount` | `number` | No | Number of columns to be fixed on the left side of the table |
| `filteredColumnConfig` | `Columns<T>` | Yes | Currently filtered column configuration |
| `onApply` | `(newFilterConfig: Columns<T>) => void` | Yes | Callback function when user clicks apply, receives the new column configuration |
| `noColumnsSelectedTooltip` | `string` | No | Tooltip text shown when no columns are selected |
| `header` | `string` | No | Dialog title |

## Examples

### With Custom Sticky Columns

```tsx
export const WithCustomStickyColumns = {
  render: Template,
  args: {
    stickyColumnCount: 2
  }
};
```

### With Initial Filters

```tsx
export const WithInitialFilters = {
  render: Template,
  args: {
    filteredColumnConfig: columns.filter(col => ['id', 'firstName', 'lastName'].includes(col.field))
  }
};
```


# FileInfoCard

The FileInfoCard component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Default = Template.bind({});
```

## Usage

```tsx
import { FileInfoCard } from "@appier/aiqua-design-system

<FileInfoCard />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `disabled` | `boolean` | No | - |
| `onPreview` | `() => void` | No | - |
| `onDelete` | `() => void` | No | - |
| `onClick` | `(e: React.MouseEvent<HTMLDivElement>) => void` | No | - |
| `subtitle` | `string` | No | - |

## Examples

### Handle File Upload

```tsx
export const HandleFileUpload = () => {
  const [files, setFiles] = useState<FileInfo[]>([]);
  const handleDrop: DropzoneProps['onDrop'] = acceptedFiles => {
    const newFiles = acceptedFiles.map(file => ({
      name: file.name,
      type: file.type,
      size: file.size,
      isLoading: true
    }));
    setFiles(prevFiles => [...prevFiles, ...newFiles]);
    acceptedFiles.forEach(async file => {
      const url = await uploadFile(file);
      setFiles(prevFiles => prevFiles.map(f => f.name === file.name ? {
        ...f,
        isLoading: false,
        url
      } : f));
    });
  };
  const handleDelete: DropzoneProps['onDelete'] = index => {
    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));
  };
  return <Dropzone files={files} onDrop={handleDrop} onDelete={handleDelete} accept={{
    'image/*': ['.gif', '.jpeg', '.jpg', '.png', '.svg', '.webp'],
    'video/*': ['.mp4']
  }} />;
};
```

### All File Types

```tsx
export const AllFileTypes = () => {
  const [files, setFiles] = useState<FileInfo[]>(mockFiles);
  const handleDelete: DropzoneProps['onDelete'] = index => {
    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));
  };
  return <Dropzone files={files} onDelete={handleDelete} accept={{
    'image/*': ['.gif', '.jpeg', '.jpg', '.png', '.svg', '.webp'],
    'video/*': ['.mp4'],
    'application/pdf': ['.pdf'],
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']
  }} />;
};
```

### Disabled State

```tsx
export const DisabledState = () => {
  const [files, setFiles] = useState<FileInfo[]>(mockFiles);
  const handleDelete: DropzoneProps['onDelete'] = index => {
    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));
  };
  return <Dropzone files={files} onDelete={handleDelete} disabled accept={{
    'image/*': ['.gif', '.jpeg', '.jpg', '.png', '.svg', '.webp'],
    'video/*': ['.mp4'],
    'application/pdf': ['.pdf'],
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']
  }} />;
};
```

### Warning State

```tsx
export const WarningState = () => {
  return <Dropzone files={[]} warn="This is a warning message." variant="card" iconTooltipProps={{
    content: 'This is a warning message.'
  }} onDelete={() => {}} />;
};
```

### Error State

```tsx
export const ErrorState = () => {
  return <Dropzone files={[]} error="This is an error message." variant="card" onDelete={() => {}} iconTooltipProps={{
    content: 'This is an error message.'
  }} />;
};
```

### File With Warning And Error State

```tsx
export const FileWithWarningAndErrorState = () => {
  const filesWithWarningsAndErrors: FileInfo[] = [{
    name: 'large-video.mp4',
    type: 'video/mp4',
    size: 9_999_999_999_999,
    warning: 'Upload failed. File exceeds size limit.'
  }, {
    name: 'large-video.mp4',
    type: 'video/mp4',
    size: 9_999_999_999_999,
    error: 'Upload failed. File exceeds size limit.'
  }];
  const handleDelete: DropzoneProps['onDelete'] = index => {
    // Handle delete logic here
  };
  return <Dropzone files={filesWithWarningsAndErrors} onDelete={handleDelete} variant="card" />;
};
```

### Subtitle Variants

```tsx
export const SubtitleVariants = () => {
  const filesWithSubtitles: FileInfo[] = [{
    name: 'file-with-size.jpg',
    type: 'image/jpeg',
    size: 1024 * 1024,
    // 1MB
    url: 'https://dummyimage.com/600x400/6e5cc8/fff.jpeg'
  }, {
    name: 'file-with-custom-subtitle.jpg',
    type: 'image/jpeg',
    url: 'https://dummyimage.com/600x400/6e5cc8/fff.jpeg',
    subtitle: 'Last updated: 2024/01/20'
  }, {
    name: 'file-with-long-subtitle.jpg',
    type: 'image/jpeg',
    url: 'https://dummyimage.com/600x400/6e5cc8/fff.jpeg'
  }];
  return <Dropzone files={filesWithSubtitles} onDelete={() => {}} onPreview={() => {}} variant="card" />;
};
```

### Long File Name

```tsx
export const LongFileName = () => {
  const filesWithLongNames: FileInfo[] = [{
    name: 'This-is-a-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-very-long-file-name.jpg',
    type: 'image/jpeg',
    size: 1024 * 1024,
    url: 'https://dummyimage.com/600x400/6e5cc8/fff.jpeg'
  }, {
    name: 'Regular-file-name.jpg',
    type: 'image/jpeg',
    size: 512 * 1024,
    url: 'https://dummyimage.com/600x400/6e5cc8/fff.jpeg'
  }];
  return <div style={{
    width: '300px'
  }}>
      <Dropzone files={filesWithLongNames} onDelete={() => {}} variant="card" />
    </div>;
};
```


# FileInfoCardProps

```typescript
type FileInfoCardProps = FileInfo & {
  disabled?: boolean;
  onPreview?: () => void;
  onDelete?: () => void;
  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
  subtitle?: string;
};
```
# FileProps

```typescript
interface FileProps {
  file: File;
  name: string;
  size?: number;
  type: string;
  url: string;
}
```
# FREQ_WEEK_PICKER_OPTIONS

```typescript
const FREQ_WEEK_PICKER_OPTIONS: {
  label: string;
  value: WEEK_DAYS;
}[] = [{
  label: 'Sun',
  value: WEEK_DAYS.SUNDAY
}, {
  label: 'Mon',
  value: WEEK_DAYS.MONDAY
}, {
  label: 'Tue',
  value: WEEK_DAYS.TUESDAY
}, {
  label: 'Wed',
  value: WEEK_DAYS.WEDNESDAY
}, {
  label: 'Thu',
  value: WEEK_DAYS.THURSDAY
}, {
  label: 'Fri',
  value: WEEK_DAYS.FRIDAY
}, {
  label: 'Sat',
  value: WEEK_DAYS.SATURDAY
}];
```
# FrequencyMonthPicker

Version `v2.0.3` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=8410-132133&mode=dev)

A frequency month picker allows users to select days of the month to indicate the frequency of events occurring within a month.

## Main Example

```tsx
export const ControlledAndUncontrolled = () => {
  const [selectedDays, setSelectedDays] = useState([1, 2, 3]);
  const handleSelectedDaysChange = useCallback((selectedDays: number[]) => {
    setSelectedDays(selectedDays);
  }, []);
  return <Container>
      <ItemWrapper>
        <div>Controlled</div>
        <FrequencyMonthPicker selectedDays={selectedDays} onSelectedDaysChange={handleSelectedDaysChange} />
        <div>Uncontrolled</div>
        <FrequencyMonthPicker defaultSelectedDays={[1, 2, 3]} />
      </ItemWrapper>
    </Container>;
};
```

## Usage

```tsx
import { FrequencyMonthPicker } from "@appier/aiqua-design-system

<FrequencyMonthPicker />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `selectedDays` | `number[]` | No | The selected days of the `FrequencyMonthPicker` component, required for a controlled component. |
| `defaultSelectedDays` | `number[]` | No | The default selected days. Used when the component is uncontrolled. |
| `onSelectedDaysChange` | `(selectedDays: number[]) => void` | No | The handler called when the selected days of the component changes. |


# FrequencyMonthPickerProps

```typescript
interface FrequencyMonthPickerProps {
  /**
   * The selected days of the `FrequencyMonthPicker` component, required for a controlled component.
   */
  selectedDays?: number[];
  /**
   * The default selected days. Used when the component is uncontrolled.
   */
  defaultSelectedDays?: number[];
  /**
   * The handler called when the selected days of the component changes.
   */
  onSelectedDaysChange?: (selectedDays: number[]) => void;
}
```
# FrequencyWeekPicker

Version `v2.0.3` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=8410-132133&mode=dev)

A frequency week picker allows users to select weekdays to indicate the frequency of events occurring within a week.

## Main Example

```tsx
export const ControlledAndUncontrolled = () => {
  const [selectedDays, setSelectedDays] = useState(DEFAULT_SELECTED_DAYS);
  const handleSelectedDaysChange = useCallback((selectedDays: WEEK_DAYS[]) => {
    setSelectedDays(selectedDays);
  }, []);
  return <Container>
      <ItemWrapper>
        <div>Controlled</div>
        <FrequencyWeekPicker labelMapping={DEFAULT_LABEL_MAPPING} selectedDays={selectedDays} onSelectedDaysChange={handleSelectedDaysChange} />
      </ItemWrapper>
      <ItemWrapper>
        <div>Uncontrolled</div>
        <FrequencyWeekPicker labelMapping={DEFAULT_LABEL_MAPPING} defaultSelectedDays={DEFAULT_SELECTED_DAYS} />
      </ItemWrapper>
    </Container>;
};
```

## Usage

```tsx
import { FrequencyWeekPicker } from "@appier/aiqua-design-system

<FrequencyWeekPicker />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `labelMapping` | `Record<WEEK_DAYS, string>` | Yes | Defines labels for each week day |
| `selectedDays` | `WEEK_DAYS[]` | No | The selectedDays of the `FrequencyWeekPicker` component, required for a controlled component. |
| `defaultSelectedDays` | `WEEK_DAYS[]` | No | The default selected days. Used when the component is uncontrolled. |
| `onSelectedDaysChange` | `(selectedDays: WEEK_DAYS[]) => void` | No | The handler called when the selected days of the component changes. |


# FrequencyWeekPickerProps

```typescript
interface FrequencyWeekPickerProps {
  /**
   * Defines labels for each week day
   */
  labelMapping: Record<WEEK_DAYS, string>;
  /**
   * The selectedDays of the `FrequencyWeekPicker` component, required for a controlled component.
   */
  selectedDays?: WEEK_DAYS[];
  /**
   * The default selected days. Used when the component is uncontrolled.
   */
  defaultSelectedDays?: WEEK_DAYS[];
  /**
   * The handler called when the selected days of the component changes.
   */
  onSelectedDaysChange?: (selectedDays: WEEK_DAYS[]) => void;
}
```
# HEADER_COLOR

```typescript
const HEADER_COLOR = {
  GREY: 'grey',
  PRIMARY: 'primary'
} as const;
```
# Header

The Header component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  args: {
    heading: <Breadcrumb>
        <BreadcrumbItem href="https://tw.yahoo.com/">Yahoo</BreadcrumbItem>
        <BreadcrumbItem href="https://www.google.com/">Google</BreadcrumbItem>
        <BreadcrumbItem href="https://www.appier.com/zh-tw/">
          Appier
        </BreadcrumbItem>
        <BreadcrumbItem editable editableDefaultValue="AIQUA">
          AIQUA
        </BreadcrumbItem>
      </Breadcrumb>,
    actions: [<Button variant="primary" startIcon={<AddIcon />}>
        Add widget
      </Button>]
  }
};
```

## Usage

```tsx
import { Header } from "@appier/aiqua-design-system

<Header />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `actions` | `React.ReactNode[]` | No | Operating area, actionable elements to place in the top-right |
| `heading` | `React.ReactNode` | No | Heading element to display, such as breadcrumbs, page title |
| `height` | `string \| number` | No | Define the height of Header component |


# HeaderColor

```typescript
type HeaderColor = (typeof HEADER_COLOR)[keyof typeof HEADER_COLOR];
```
# HeaderProps

```typescript
type HeaderProps = ConfigProps & HTMLAttributes<HTMLDivElement>;
```
# HexColor

```typescript
type HexColor = string;
```
# HexColorInput

```typescript
type HexColorInput = string;
```
# HINT_TYPE

```typescript
const HINT_TYPE = {
  SUCCESS: 'success',
  INFO: 'info',
  WARNING: 'warning',
  ERROR: 'error',
  INFO_SECONDARY: 'info secondary'
} as const;
```
# Hint

Version `v2.1.0` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=10145-130128&t=REhQXgoEx8s9ktQ0-0)

A hint displays a concise and significant message that effectively grabs the user's attention without causing interruptions to their ongoing tasks.

## Usage
#### Import

```tsx
import { Hint } from "@appier/aiqua-design-system/components";
// or
import { Hint } from "@appier/aiqua-design-system";
```
## Props

Also support all valid HTMLElement props

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { Hint } from "@appier/aiqua-design-system

<Hint />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `type` | `(typeof HINT_TYPE)[keyof typeof HINT_TYPE]` | Yes | The hint provide four levels with corresponding a distinctive icon and color. |
| `primaryText` | `React.ReactNode` | No | The primary message of the hint to display. |
| `secondaryText` | `React.ReactNode` | No | The secondary message of the hint to display. |
| `closable` | `boolean` | No | If true, the close button is shown. @default true |
| `customIcon` | `React.ReactNode` | No | The custom icon to replace the default one. |
| `onClose` | `(e: React.MouseEvent) => void` | No | Callback fired when the component requests to be closed. |

## Examples

### Primary And Secondary Text

```tsx
export const PrimaryAndSecondaryText = {
  render: args => {
    return <>
        <Hint type={HINT_TYPE.INFO} primaryText="Info primary text" />
        <Hint type={HINT_TYPE.WARNING} secondaryText="warning secondary text" />
      </>;
  }
};
```

### Type

```tsx
export const Type = {
  render: args => {
    return <>
        <Hint type={HINT_TYPE.SUCCESS} primaryText="Success information" />
        <Hint type={HINT_TYPE.WARNING} primaryText="Warning information" />
        <Hint type={HINT_TYPE.ERROR} primaryText="Error information" />
        <Hint type={HINT_TYPE.INFO} primaryText="Info information" />
        <Hint type={HINT_TYPE.INFO_SECONDARY} primaryText="Info secondary information" />
      </>;
  }
};
```

### Closable

```tsx
export const Closable = {
  render: args => {
    return <>
        <Hint type={HINT_TYPE.SUCCESS} primaryText="Success information" closable />
        <Hint type={HINT_TYPE.INFO} primaryText="Info primary text" secondaryText="info secondary text" closable />
      </>;
  }
};
```

### Custom Icon

```tsx
export const CustomIcon = {
  render: args => {
    return <Hint type={HINT_TYPE.SUCCESS} primaryText="Success type with info icon" customIcon={<DSIcon is="infoSolid20" />} />;
  }
};
```


# HintProps

```typescript
type HintProps = React.HTMLAttributes<HTMLDivElement> & ConfigProps;
```
# IconButton

Version `v2.0.2` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=1-107648&mode=design&t=GQfItnp8WhGUB2u3-0)

IconButton facilitates actions through a singular icon, offering a minimalist approach compared to the standard Button.

## Usage
#### Import

```tsx
import { IconButton } from "@appier/aiqua-design-system/components";
//or
import { IconButton } from "@appier/aiqua-design-system";
```

## Props

Also support all valid `HTMLButtonElement` props

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { IconButton } from "@appier/aiqua-design-system

<IconButton />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `icon` | `React.ReactNode` | Yes | The icon to display. |
| `focused` | `boolean` | No | Defines focused of component. Use when the component is controlled on focused state. |
| `tooltipText` | `string` | No | The text to display on tooltip and accessibility label. Also serves as the flag for displaying tooltip. |
| `iconSize` | `IconProps['size']` | No | - |

## Examples

### Size

```tsx
export const Size = () => {
  return <Layout>
      <IconButton size="small" iconSize={20} icon={<DSIcon is="trashOutlined20" />} />
      <IconButton size="normal" iconSize={20} icon={<DSIcon is="trashOutlined20" />} />
    </Layout>;
};
```

### Icon Size

```tsx
export const IconSize = () => {
  return <Layout>
      <IconButton size="small" iconSize={16} icon={<DSIcon is="trashOutlined16" />} />
      <IconButton size="normal" iconSize={16} icon={<DSIcon is="trashOutlined16" />} />
      <IconButton size="small" iconSize={20} icon={<DSIcon is="trashOutlined20" />} />
      <IconButton size="normal" iconSize={20} icon={<DSIcon is="trashOutlined20" />} />
    </Layout>;
};
```

### Focused

```tsx
export const Focused = () => {
  const [focused] = React.useState(true);
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <IconButton size="normal" iconSize={20} icon={<DSIcon is="trashOutlined20" />} focused={focused} />
    </div>;
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```

### Tooltip

```tsx
export const Tooltip = {
  args: {
    tooltipText: 'tooltip'
  }
};
```


# IconButtonProps

```typescript
interface IconButtonProps extends React.ComponentPropsWithoutRef<'button'>, ConfigProps, StyleProps {}
```
# IconStatus

Version `v2.0.2` | [Figma specification](https://www.figma.com/design/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-%7C-Spec?node-id=5677-55088&m=dev)

Status Component is used to display the status of different operations or processes in the application so that users can clearly understand the current status of each operation or process.

## Main Example

```tsx
export const Basic = {
  render: Template,
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { IconStatus } from "@appier/aiqua-design-system

<IconStatus />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `color` | `(typeof COLOR)[keyof typeof COLOR]` | No | Defines the color of the Status. The Status will take the default color if the value is `undefined`. |
| `text` | `React.ReactNode` | No | Define the Status text. |

## Examples

### Color

```tsx
export const Color = () => {
  return <div className="flex flex-col items-center gap-spacing-8">
      <Status color={COLOR.ERROR} text="Error" />
      <Status color={COLOR.WARNING} text="Warning" />
      <Status color={COLOR.OK} text="Ok" />
      <Status color={COLOR.STAND_BY} text="Stand by" />
      <Status color={COLOR.EXTRA} text="Extra" />
      <Status color={COLOR.INACTIVE} text="Inactive" />
      <Status color={COLOR.IN_PROGRESS} text="In progress" />
    </div>;
};
```


# IconStatusProps

```typescript
interface IconStatusProps {
  /**
   * Defines the color of the Status. The Status will take the default color if the value is `undefined`.
   */
  color?: (typeof COLOR)[keyof typeof COLOR];
  /**
   * Define the Status text.
   */
  text?: React.ReactNode;
}
```
# IconTooltip

Version `v2.0.1` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=19447-303453&t=eDO7bVdYrybm1cTl-0)
Tooltip provides contextual information or additional details about a specific element when users hover over it, enhancing the user experience by offering concise and helpful explanations or descriptions.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs'],
  render: Template
};
```

## Usage

```tsx
import { IconTooltip } from "@appier/aiqua-design-system

<IconTooltip />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `innerIconClassName` | `string` | No | - |

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [isOpen, setIsOpen] = React.useState(false);
  return <div style={{
    display: 'flex',
    gap: '40px'
  }}>
      <Tooltip defaultOpen={true} content="Description goes here">
        <Button>Uncontrolled</Button>
      </Tooltip>
      <Tooltip onOpenChange={setIsOpen} isOpen={isOpen} content="Description goes here">
        <Button>Controlled</Button>
      </Tooltip>
    </div>;
};
```

### Placement And Fallback Placements

```tsx
export const PlacementAndFallbackPlacements = () => {
  return <div>
      <div style={{
      display: 'flex',
      justifyContent: 'center'
    }}>
        <Tooltip placement="top-start" content="tooltip">
          <Button variant="minimal">top start</Button>
        </Tooltip>
        <Tooltip placement="top" content="tooltip">
          <Button variant="minimal">top</Button>
        </Tooltip>
        <Tooltip placement="top-end" content="tooltip">
          <Button variant="minimal">top end</Button>
        </Tooltip>
      </div>
      <div style={{
      display: 'flex',
      width: '100%'
    }}>
        <div style={{
        display: 'flex',
        flexFlow: 'column',
        flex: 1,
        alignItems: 'center'
      }}>
          <Tooltip placement="left-start" content="tooltip">
            <Button variant="minimal">left start</Button>
          </Tooltip>
          <Tooltip placement="left" content="tooltip">
            <Button variant="minimal">left</Button>
          </Tooltip>
          <Tooltip placement="left-end" content="tooltip">
            <Button variant="minimal">left end</Button>
          </Tooltip>
        </div>
        <div style={{
        flex: 1,
        display: 'flex',
        flexFlow: 'column',
        alignItems: 'center'
      }}>
          <Tooltip placement="right-start" content="tooltip">
            <Button variant="minimal">right start</Button>
          </Tooltip>
          <Tooltip placement="right" content="tooltip">
            <Button variant="minimal">right</Button>
          </Tooltip>
          <Tooltip placement="right-end" content="tooltip">
            <Button variant="minimal">right end</Button>
          </Tooltip>
        </div>
      </div>

      <div style={{
      display: 'flex',
      justifyContent: 'center'
    }}>
        <Tooltip placement="bottom-start" content="tooltip">
          <Button variant="minimal">bottom start</Button>
        </Tooltip>
        <Tooltip placement="bottom" content="tooltip">
          <Button variant="minimal">bottom</Button>
        </Tooltip>
        <Tooltip placement="bottom-end" content="tooltip">
          <Button variant="minimal">bottom end</Button>
        </Tooltip>
      </div>
    </div>;
};
```

### Title And Info Icon

```tsx
export const TitleAndInfoIcon = Template.bind({});
```

### Enter Delay

```tsx
export const EnterDelay = {
  render: Template,
  args: {
    enterDelay: 2000
  }
};
```


# IconTooltipProps

```typescript
type IconTooltipProps = Pick<IconProps, 'size'> & Omit<TooltipProps, 'children' | 'enterDelay'> & {
  innerIconClassName?: string;
};
```
# IMAGE_ACCEPT_TYPE

```typescript
const IMAGE_ACCEPT_TYPE = ['image/jpeg', 'image/png', 'image/jpg'];
```
# IMAGE_UPLOAD_STATUS

```typescript
const IMAGE_UPLOAD_STATUS = {
  DONE: 'done',
  ERROR: 'error',
  UPLOADING: 'uploading'
};
```
# ImageProps

```typescript
interface ImageProps {
  noBorder?: boolean;
  src?: string;
  alt?: string;
}
```
# InfiniteLoadingDots

Version `v2.1.0` | [Figma specification](https://www.figma.com/file/uiTKtAEyVgwZfm84Ov2mCY/%5BCampaign%5D-AIQUA-2.0-Campaign-list-enhancement?node-id=873%3A672786&mode=dev)

## Usage
### Import

```jsx
import { InfiniteLoadingDots } from '@appier/aiqua-design-system/components';
// or
import { InfiniteLoadingDots } from '@appier/aiqua-design-system';
```

## Main Example

```tsx
export const Normal = {
  render: Template,
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { InfiniteLoadingDots } from "@appier/aiqua-design-system

<InfiniteLoadingDots />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `size` | `number` | No | Defined the size of InfiniteLoadingDots, the size is in px, default 2px; |
| `colorTokenKey` | `string` | No | Defined the color of InfiniteLoadingDots. If undefined we will set default value to "color.semantic.blue". |

## Examples

### Larger Icons

```tsx
export const LargerIcons = {
  render: Template,
  args: {
    size: 16
  }
};
```

### Black Icons

```tsx
export const BlackIcons = {
  render: Template,
  args: {
    colorTokenKey: 'color.content.low'
  }
};
```


# InfiniteLoadingSpinner

The InfiniteLoadingSpinner component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { InfiniteLoadingSpinner } from "@appier/aiqua-design-system

<InfiniteLoadingSpinner />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `size` | `(typeof SIZES)[keyof typeof SIZES]` | No | Defined the size of InfiniteLoadingSpinner, the size configuration could be varied in application. |
| `colorTokenKey` | `string` | No | Defined the color of InfiniteLoadingSpinner. If will be default value, when it be undefined. |


# INITIAL_FOCUSED_RANGE

```typescript
const INITIAL_FOCUSED_RANGE: RangeFocus = [0, 0];
```
# InputBarProps

```typescript
interface InputBarProps {
  className?: string;
  errorImageTooltip?: string;
  inputAutoFocus?: React.ComponentPropsWithoutRef<'textarea'>['autoFocus']; // Autofocus on the textarea when mounted
  inputPlaceholderLabel?: string;
  isUserInputDisabled?: boolean;
  maxFileCount?: number;
  maxFileSize?: number;
  removeImageTooltip?: string;
  send: (message: Pick<ChatroomMessage, 'messageContents'>, sourceType?: ChatroomMessage['messageType'], destType?: ChatroomMessage['messageType']) => void;
  setValue?: (value: string) => void;
  theme?: THEME_TYPES;

  /**
   * callback to return updated (deleted) image list
   */
  onDeleteFile?: (images: FileProps[]) => void;

  /** Invoked when user click the upload icon */
  onClickUpload?: () => void;

  /** Invoked when user click the image thumbnail preview */
  onClickThumbnail?: () => void;

  /** Invoked when user changes the files to upload */
  upload?: (files: FileProps[], error?: UploadFileError) => void;

  /** Currently uploaded files */
  uploadedFiles?: FileProps[];

  /** The file type for upload. If not specified, the chatroom does not support file upload. */
  uploadType?: UploadType;
  value?: string;
  /** An action button that appears on the left side of the chat input. */
  inputActionButton?: React.ReactNode;
}
```
# InputColor

```typescript
type InputColor = string;
```
# LikeDislikeButton

Version `v2.0.0` | [Figma specification](https://www.figma.com/design/v8AjTv6zlRwLWeGQtkTfEQ/AI-Copilot-%7C-Library%2C-Spec?node-id=1554-3391&t=SyhcO7kUVMHSf65K-4)

Button group for giving feedback. Contain a toggle selection for like and dislike buttons.

## Main Example

```tsx
export const Basic = {
  render: Template,
  tags: ['!autodocs'],
  args: {
    likeTooltipContent: 'Satisfied',
    dislikeTooltipContent: 'Not satisfied'
  }
};
```

## Usage

```tsx
import { LikeDislikeButton } from "@appier/aiqua-design-system

<LikeDislikeButton />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `isSelected` | `boolean` | Yes | Define the selected status of the ToggleButton, which is used to decide whether the ToggleButton is selected or not. |
| `tooltipContent` | `string` | No | The text to display on tooltip and accessibility label. Also serves as the flag for displaying tooltip. |

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [value, setValue] = useState<'like' | 'dislike' | null>('like');
  return <LikeDislikeButton value={value} likeTooltipContent="Satisfied" dislikeTooltipContent="Not satisfied" onLikeClick={() => {
    setValue('like');
  }} onDislikeClick={() => {
    setValue('dislike');
  }} />;
};
```

### Tooltip

```tsx
export const Tooltip = Template.bind({});
```


# LikeDislikeButtonProps

```typescript
type LikeDislikeButtonProps = {
  /**
   * The currently like/dislike value of the LikeDislikeButton.
   */
  value?: 'like' | 'dislike' | null;
  /**
   * The initial value of the LikeDislikeButton when used in an uncontrolled component.
   */
  defaultValue?: 'like' | 'dislike' | null;
  /**
   * The text to display on tooltip and accessibility label of like icon. Also serves as the flag for displaying tooltip.
   */
  likeTooltipContent?: string;
  /**
   * The text to display on tooltip and accessibility label of like icon. Also serves as the flag for displaying tooltip.
   */
  dislikeTooltipContent?: string;
  /**
   * Set the handler to handle click event of like icon.
   */
  onLikeClick?: React.MouseEventHandler<HTMLButtonElement>;
  /**
   * Set the handler to handle click event of dislike icon.
   */
  onDislikeClick?: React.MouseEventHandler<HTMLButtonElement>;
} & HTMLAttributes<HTMLDivElement>;
```
# LineChart

The LineChart component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const _LineChart = {
  render: Template,
  args: {
    chartData: RESP_TEST,
    chartDimensions: CHART_DIMENSIONS,
    chartMetrics: CHART_METRIC,
    chartTimestamp: CHART_TIMESTAMP,
    timezone: 'Asia/Taipei',
    chartAxisDateFormat: 'MMM D, YYYY',
    chartTheme: 'light',
    // chartColorTheme: ['#444888','#555aaa','#777eee','#f08080','#8e4585'],
    chartTooltipDateFormat: 'MMM D, YYYY',
    chartOptions: {
      metric: [{
        decimalPlaces: 0,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    }
  }
};
```

## Usage

```tsx
import { LineChart } from "@appier/aiqua-design-system

<LineChart />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `chartMetrics` | `LineChartMetrics` | Yes | - |
| `chartSummaryMetrics` | `LineChartBenchmarkMetrics` | No | Defining the summary column of the linechart |
| `chartTimestamp` | `ChartFieldConfig` | No | Defining the timestamp of the chart, will be the identifier of date range |
| `chartSummaryColorTheme` | `BasicChartProps['chartColorTheme']` | No | this defines the color of "summary field" like ctr in recommendation performance the color will be set for the series accords to the order. |
| `chartTooltipOptions` | `LineChartTooltipOptions` | No | Defines the tooltip options for the chart. Include the tooltipSubtitle, each time dimension dataRangeTitle |
| `chartOptions` | `LineChartUiMetricsInterface` | No | Other property that will be used for configuring the chart. Including the axis timeDimensions,notation, decimal places, coloring order as well as the split number. appliedMetric: matching the chartMetric field to see which metric to apply the format to.  note: if you have multiple metrics, the metrics inside chartOptions will need one from for the left yaxis and one for the right. if you provide chartOptions for the same side, then the other will fall back to default setting. |
| `isThumbnail` | `boolean` | No | Defining whether the chart is a thumbnail If true, will override existing settings and hide the following from chart: - X axis - Y axis - Split lines - Legend - Tooltips |
| `displayGradientArea` | `boolean` | No | Defining whether to show a gradient background under the chart lines |

## Examples

### _ Line Chart Multiple Metrics

```tsx
export const _LineChartMultipleMetrics = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: MULTIPLE_METRICS_DATA,
    chartDimensions: [],
    chartMetrics: MULTIPLE_CHART_METRIC,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'sent',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }, {
        appliedMetric: 'clicks',
        decimalPlaces: 0,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    }
  }
};
```

### _ Line Chart Multiple Type Metrics

```tsx
export const _LineChartMultipleTypeMetrics = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: MULTIPLE_METRICS_DATA_DIFFERENT_TYPE,
    chartDimensions: [],
    chartMetrics: MULTIPLE_CHART_METRIC_DIFFERENT_TYPE,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'rate',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }, {
        appliedMetric: 'profit',
        decimalPlaces: 0,
        displayNotation: ChartUiOptionsDisplayNotationEnum.FULL_NUMBER,
        yAxisSplitNumber: 3
      }]
    }
  }
};
```

### _ Line Chart Multiple Type Metrics With Gradient Area

```tsx
export const _LineChartMultipleTypeMetricsWithGradientArea = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: MULTIPLE_METRICS_DATA_DIFFERENT_TYPE,
    chartDimensions: [],
    chartMetrics: MULTIPLE_CHART_METRIC_DIFFERENT_TYPE,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'rate',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }, {
        appliedMetric: 'profit',
        decimalPlaces: 0,
        displayNotation: ChartUiOptionsDisplayNotationEnum.FULL_NUMBER,
        yAxisSplitNumber: 3
      }]
    },
    displayGradientArea: true
  }
};
```

### _ Line Chart Triple Type Metrics

```tsx
export const _LineChartTripleTypeMetrics = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: TRIPLE_METRICS_DATA_DIFFERENT_TYPE,
    chartDimensions: [],
    chartMetrics: TRIPLE_CHART_METRIC_DIFFERENT_TYPE,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'rate',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.FULL_NUMBER,
        yAxisSplitNumber: 3
      }, {
        appliedMetric: 'profit',
        decimalPlaces: 0,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    }
  }
};
```

### _ Line Chart Comparison Mode

```tsx
export const _LineChartComparisonMode = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: COMPARISON_DATA,
    chartDimensions: [],
    chartMetrics: CHART_METRIC_COMPARISON,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'conversion_value_overall',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    },
    chartTooltipOptions: {
      tooltipSubtitle: 'Hello1',
      tooltipComparisonSubtitle: 'Hello2',
      showTooltipSubtitleBreakline: false
    }
  }
};
```

### _ Line Chart Comparison Mode With Gradient Area

```tsx
export const _LineChartComparisonModeWithGradientArea = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: COMPARISON_DATA,
    chartDimensions: [],
    chartMetrics: CHART_METRIC_COMPARISON,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'conversion_value_overall',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    },
    chartTooltipOptions: {
      tooltipSubtitle: 'Hello1',
      tooltipComparisonSubtitle: 'Hello2',
      showTooltipSubtitleBreakline: false
    },
    displayGradientArea: true
  }
};
```

### _ Line Chart Multi Metric Multi Dimension

```tsx
export const _LineChartMultiMetricMultiDimension = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: MULTI_METRICS_MULTI_DIMENSION_DATA,
    chartDimensions: MULTI_METRICS_MULTI_DIMENSIONS_DIMENSION,
    chartMetrics: MULTI_METRIC_MULTI_DIMENSIONS_METRIC,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'rate',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.FULL_NUMBER,
        yAxisSplitNumber: 3
      }, {
        appliedMetric: 'profit',
        decimalPlaces: 0,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    },
    chartTooltipOptions: {
      tooltipSubtitle: 'Hello1',
      tooltipComparisonSubtitle: 'Hello2',
      showTooltipSubtitleBreakline: false
    }
  }
};
```

### _ Line Chart Multi Metric Multi Dimension Comparison

```tsx
export const _LineChartMultiMetricMultiDimensionComparison = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: COMPARISON_DATA_MULTI_DIMENSION,
    chartTimestamp: CHART_TIMESTAMP_COMPARISON_MULTI_DIMENSION,
    chartDimensions: COMPARISON_MULTI_DIMENSION_DIEMSION,
    chartMetrics: CHART_METRIC_COMPARISON_MULTI_DIMENSION,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'conversion_value_overall',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    },
    chartTooltipOptions: {
      tooltipSubtitle: 'Hello1',
      tooltipComparisonSubtitle: 'Hello2',
      showTooltipSubtitleBreakline: false
    }
  }
};
```

### _ Line Chart Multi Metric Multi Dimension Comparison With Gradient Area

```tsx
export const _LineChartMultiMetricMultiDimensionComparisonWithGradientArea = {
  render: Template,
  args: {
    ..._LineChart.args,
    chartData: COMPARISON_DATA_MULTI_DIMENSION,
    chartTimestamp: CHART_TIMESTAMP_COMPARISON_MULTI_DIMENSION,
    chartDimensions: COMPARISON_MULTI_DIMENSION_DIEMSION,
    chartMetrics: CHART_METRIC_COMPARISON_MULTI_DIMENSION,
    chartOptions: {
      ..._LineChart.args.chartOptions,
      metric: [{
        appliedMetric: 'conversion_value_overall',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    },
    chartTooltipOptions: {
      tooltipSubtitle: 'Hello1',
      tooltipComparisonSubtitle: 'Hello2',
      showTooltipSubtitleBreakline: false
    },
    displayGradientArea: true
  }
};
```

### _ Line Chart Benchamrk

```tsx
export const _LineChartBenchamrk = {
  render: Template,
  args: {
    chartData: BENCHMARK_CHART_DATA,
    chartTimestamp: BENCHMARK_CHART_TIMESTAMP,
    chartDimensions: BENCHMARK_CHART_DIMENSIONS,
    chartMetrics: BENCHMARK_CHART_METRIC,
    chartSummaryMetrics: BENCHMARK_CHART_METRIC_FOR_BENCHMARK,
    chartOptions: {
      hasSummary: true,
      metric: [{
        appliedMetric: 'conversion_value_overall',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    },
    chartTooltipOptions: {
      tooltipSubtitle: 'CTR',
      showTooltipSubtitleBreakline: true
    }
  }
};
```

### _ Line Chart Benchamrk Single Row

```tsx
export const _LineChartBenchamrkSingleRow = {
  render: Template,
  args: {
    chartData: BENCHMARK_CHART_SINGLE_LINE_DATA,
    chartTimestamp: BENCHMARK_CHART_TIMESTAMP,
    chartDimensions: BENCHMARK_CHART_DIMENSIONS,
    chartMetrics: BENCHMARK_CHART_METRIC,
    chartSummaryMetrics: BENCHMARK_CHART_METRIC_FOR_BENCHMARK,
    chartOptions: {
      hasSummary: true,
      metric: [{
        appliedMetric: 'conversion_value_overall',
        decimalPlaces: 3,
        displayNotation: ChartUiOptionsDisplayNotationEnum.AUTO_SHORTENED_NUMBER,
        yAxisSplitNumber: 3
      }]
    },
    chartTooltipOptions: {
      tooltipSubtitle: 'CTR',
      showTooltipSubtitleBreakline: true
    }
  }
};
```

### _ Line Chart Thumbnail

```tsx
export const _LineChartThumbnail = {
  render: Template,
  args: {
    ..._LineChart.args,
    isThumbnail: true
  }
};
```

### _ Line Chart Thumbnail With Gradient Area

```tsx
export const _LineChartThumbnailWithGradientArea = {
  render: Template,
  args: {
    ..._LineChart.args,
    isThumbnail: true,
    displayGradientArea: true
  }
};
```


# LineChartBenchmarkMetric

```typescript
interface LineChartBenchmarkMetric extends Metric {
  isComparisonMetric?: boolean;
}
```
# LineChartBenchmarkMetrics

```typescript
type LineChartBenchmarkMetrics = LineChartBenchmarkMetric[];
```
# LineChartDataInterface

```typescript
interface LineChartDataInterface extends ChartDataInterface {
  tables: LineChartTablesDataInterface[];
}
```
# LineChartMetrics

```typescript
type LineChartMetrics = LineChartMetric[];
```
# LineChartProps

```typescript
interface LineChartProps extends BasicChartProps {
  chartMetrics: LineChartMetrics;
  /**
   * Defining the summary column of the linechart
   */
  chartSummaryMetrics?: LineChartBenchmarkMetrics;
  /**
   * Defining the timestamp of the chart, will be the identifier of date range
   */
  chartTimestamp?: ChartFieldConfig;
  /**
   * this defines the color of "summary field" like ctr in recommendation performance
   * the color will be set for the series accords to the order.
   */
  chartSummaryColorTheme?: BasicChartProps['chartColorTheme'];
  /**
   * Defines the tooltip options for the chart. Include the tooltipSubtitle, each time dimension dataRangeTitle
   */
  chartTooltipOptions?: LineChartTooltipOptions;
  /**
   * Other property that will be used for configuring the chart.
   * Including the axis timeDimensions,notation, decimal places, coloring order as well as the split number.
   * appliedMetric: matching the chartMetric field to see which metric to apply the format to.
   *
   * note: if you have multiple metrics, the metrics inside chartOptions will need one from for the left yaxis and one for the right.
   * if you provide chartOptions for the same side, then the other will fall back to default setting.
   */
  chartOptions?: LineChartUiMetricsInterface;
  /**
   * Defining whether the chart is a thumbnail
   * If true, will override existing settings and hide the following from chart:
   *   - X axis
   *   - Y axis
   *   - Split lines
   *   - Legend
   *   - Tooltips
   */
  isThumbnail?: boolean;
  /**
   * Defining whether to show a gradient background under the chart lines
   */
  displayGradientArea?: boolean;
}
```
# LineChartSource

```typescript
type LineChartSource = number | null;
```
# LineChartTooltipOptions

```typescript
interface LineChartTooltipOptions extends BasicChartTooltipOptions {
  timeDimensions?: LineChartTooltipMetric[];
  /**
   * Overrides the default number display notation specifically for the tooltip.
   * Controls how numeric values are presented (e.g., full number or shortened format like '1.2K').
   * If not provided, the tooltip will use the display notation defined in the main `chartOptions.metric` settings.
   *
   *
   * [Todo] Currently, only support on line chart, should be applied to the all chart's in the tooltip in future.
   */
  tooltipDisplayNotation?: ChartUiOptionsDisplayNotationEnum;
}
```
# LineChartUiMetricsInterface

```typescript
interface LineChartUiMetricsInterface extends BasicChartUiMetricsInterface {
  hasSummary?: boolean;
  metric?: LineChartUiOption[];
  axis?: LineChartTimestampMetric[];
}
```
# LineChartUiOption

```typescript
interface LineChartUiOption extends BasicChartUiOption {
  yAxisSplitNumber?: number;
  appliedMetric?: string;
}
```
# LINK_STYLE

```typescript
const LINK_STYLE = {
  SMALL: 'small',
  MEDIUM: 'medium',
  LARGE: 'large'
} as const;
```
# Link

The Link component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { Link } from "@appier/aiqua-design-system

<Link />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `text` | `string \| React.ReactNode` | Yes | Defines text of link. |
| `linkTo` | `string` | Yes | Defines the path of the link. |
| `linkStyle` | `(typeof LINK_STYLE)[keyof typeof LINK_STYLE]` | No | Defines the style of the text (Default: 'small') |
| `disabled` | `boolean` | No | Defines whether the text is disabled |


# LinkProps

```typescript
type LinkProps = ConfigProps & React.AnchorHTMLAttributes<HTMLAnchorElement>;
```
# Loader

The Loader component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { Loader } from "@appier/aiqua-design-system

<Loader />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `title` | `string \| React.ReactNode` | No | Defines title of loader. |
| `subTitle` | `string \| React.ReactNode` | No | Defines subTitle below title of loader. |


# LoaderProps

```typescript
type LoaderProps = React.HTMLAttributes<HTMLDivElement> & ConfigProps;
```
# LoadingTooltip

The LoadingTooltip component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { LoadingTooltip } from "@appier/aiqua-design-system

<LoadingTooltip />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `title` | `string \| React.ReactNode` | Yes | Defined the title of InfiniteLoadingSpinner. |
| `description` | `string \| React.ReactNode` | No | - |

## Examples

### With Description

```tsx
export const WithDescription = {
  render: Template,
  args: {
    description: 'Description is here.'
  }
};
```


# LONG_MONTH_LAYOUT_HEIGHT

```typescript
const LONG_MONTH_LAYOUT_HEIGHT = 288;
```
# MAX_DATE_STR_LENGTH

```typescript
const MAX_DATE_STR_LENGTH = 10;
```
# Menu

The Menu component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { Menu } from "@appier/aiqua-design-system

<Menu />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `maxHeight` | `number` | No | Define the max height of the menu |
| `maxWidth` | `number` | No | Define the max width of the menu |
| `minWidth` | `number` | No | Define the min width of the menu |
| `search` | `boolean` | No | Define whether the menu is searchable |
| `searchInputPlaceholder` | `string` | No | Define the placeholder for the search input |
| `noSearchResultLabel` | `string` | No | Define the label for no search result |
| `truncateLines` | `number` | No | Define the number of lines to truncate |
| `hint` | `ReactNode` | No | Define the hint for the menu |
| `autoFocus` | `boolean` | No | Auto focus on the first item |
| `isDrillDownMenu` | `boolean` | No | Drill down menu type |
| `title` | `string` | No | Define the title for the menu |
| `searchProps` | `MenuSearchBarProps` | No | Define the props for the search input |
| `onKeyboardEnter` | `(activeIndex: number) => void` | No | Get the active index when the keyboard `Enter` key is pressed |
| `selectAllLabel` | `string` | No | Define the label for the `Select All` action button |
| `clearAllLabel` | `string` | No | Define the label for the `Clear` action button |
| `onSelectAll` | `() => void` | No | Callback function when the `Select All` action button is clicked |
| `onClearAll` | `() => void` | No | Callback function when the `Clear` action button is clicked |
| `disableInternalSearchFilter` | `boolean` | No | Disable internal search |
| `zIndex` | `number` | No | Define the zIndex for the menu |
| `useDismissProps` | `UseDismissProps` | No | Define the props for the useDismiss hook |


# MenuConfig

```typescript
type MenuConfig = Omit<MenuOption, 'title' | 'value'>;
```
# MenuContent

The MenuContent component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { MenuContent } from "@appier/aiqua-design-system

<MenuContent />
```


# MenuContentProps

```typescript
type MenuContentProps = {
  open: boolean;
  children: ReactNode;
  search: boolean;
  searchInputPlaceholder?: string;
  noSearchResultLabel?: string | ReactNode;
  hint: ReactNode;
  maxHeight: number;
  isDrillDownMenu?: boolean;
  title?: string;
  getFilteredMenuItems?: (items: ReactNode[]) => void;
  selectAllLabel?: string;
  clearAllLabel?: string;
  onSelectAll?: () => void;
  onClearAll?: () => void;
  disableInternalSearchFilter?: boolean;
} & MenuSearchBarProps;
```
# MenuDivider

The MenuDivider component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { MenuDivider } from "@appier/aiqua-design-system

<MenuDivider />
```


# MenuIconItem

The MenuIconItem component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { MenuIconItem } from "@appier/aiqua-design-system

<MenuIconItem />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `icon` | `React.ReactNode` | No | - |
| `endIcon` | `React.ReactNode` | No | - |


# MenuIconItemProps

```typescript
type MenuIconItemProps<E extends React.ElementType = 'li'> = MenuItemProps<E> & {
  icon?: React.ReactNode;
  endIcon?: React.ReactNode;
};
```
# MenuImageItem

The MenuImageItem component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { MenuImageItem } from "@appier/aiqua-design-system

<MenuImageItem />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `noBorder` | `boolean` | No | - |
| `src` | `string` | No | - |
| `alt` | `string` | No | - |


# MenuImageItemProps

```typescript
type MenuImageItemProps = MenuItemProps & ImageProps;
```
# MenuItemCategory

The MenuItemCategory component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { MenuItemCategory } from "@appier/aiqua-design-system

<MenuItemCategory />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `children` | `React.ReactNode` | No | - |
| `title` | `string` | Yes | - |
| `maxHeight` | `number` | No | - |
| `maxWidth` | `number` | No | - |
| `minWidth` | `number` | No | - |


# MenuItemCategoryProps

```typescript
interface MenuItemCategoryProps {
  children?: React.ReactNode;
  title: string;
  maxHeight?: number;
  maxWidth?: number;
  minWidth?: number;
}
```
# MenuItemProps

```typescript
type MenuItemProps<E extends ElementType = 'li'> = MenuItemElementProps<E> & {
  as?: E;
  children: ReactNode;
  disabled?: boolean;
  selected?: boolean;
  search?: boolean;
  keywords?: string[];
  submenu?: Submenu;
  isDrillDown?: boolean;
  startElement?: ReactNode;
  endElement?: ReactNode;
  readOnly?: boolean;
  subtext?: string;
  tooltipProps?: IconTooltipProps;
  checkbox?: boolean;
  checkboxProps?: CheckboxProps;
  contentClassname?: string;
};
```
# MenuLabelItem

The MenuLabelItem component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { MenuLabelItem } from "@appier/aiqua-design-system

<MenuLabelItem />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `label` | `string` | No | - |


# MenuLabelItemProps

```typescript
type MenuLabelItemProps = MenuItemProps & {
  label?: string;
};
```
# MenuOption

```typescript
type MenuOption = {
  value: string;
  title?: string;
  children?: MenuOption[];
  renderComponent?: (props: {
    menuProps: MenuOption & {
      children: ReactNode;
    };
    options: MenuOption;
  }) => JSX.Element;
} & Omit<MenuItemProps, 'children' | 'value' | 'title'>;
```
# MenuOptionProps

```typescript
type MenuOptionProps = Option & MenuConfig;
```
# MenuProps

```typescript
interface MenuProps extends Omit<MenuFloatingConfigs, 'menuContentRef'>, HTMLAttributes<HTMLDivElement>, Pick<React.ComponentProps<typeof FloatingPortal>, 'root'> {
  /**
   * Define the max height of the menu
   */
  maxHeight?: number;
  /**
   * Define the max width of the menu
   */
  maxWidth?: number;
  /**
   * Define the min width of the menu
   */
  minWidth?: number;
  /**
   * Define whether the menu is searchable
   */
  search?: boolean;
  /**
   * Define the placeholder for the search input
   */
  searchInputPlaceholder?: string;
  /**
   * Define the label for no search result
   */
  noSearchResultLabel?: string;
  /**
   * Define the number of lines to truncate
   */
  truncateLines?: number;
  /**
   * Define the hint for the menu
   */
  hint?: ReactNode;
  /**
   * Auto focus on the first item
   */
  autoFocus?: boolean;
  /**
   * Drill down menu type
   */
  isDrillDownMenu?: boolean;
  /**
   * Define the title for the menu
   */
  title?: string;
  /**
   * Define the props for the search input
   */
  searchProps?: MenuSearchBarProps;

  /**
   * Get the active index when the keyboard `Enter` key is pressed
   */
  onKeyboardEnter?: (activeIndex: number) => void;
  /**
   * Define the label for the `Select All` action button
   */
  selectAllLabel?: string;
  /**
   * Define the label for the `Clear` action button
   */
  clearAllLabel?: string;
  /**
   * Callback function when the `Select All` action button is clicked
   */
  onSelectAll?: () => void;
  /**
   * Callback function when the `Clear` action button is clicked
   */
  onClearAll?: () => void;
  /**
   * Disable internal search
   */
  disableInternalSearchFilter?: boolean;
  /**
   * Define the zIndex for the menu
   */
  zIndex?: number;
  /**
   * Define the props for the useDismiss hook
   */
  useDismissProps?: UseDismissProps;
}
```
# MenuSearchProps

```typescript
interface MenuSearchProps {
  /**
   * Defines the list of menuItems that will be searched
   */
  menuItems: ReactNode[];
  /**
   * Defines the value that will be matched when search
   */
  searchTerm: string;
  /**
   * Defines if the internal search should be disabled
   */
  disableInternalSearchFilter?: boolean;
  fuseConfig?: Fuse.IFuseOptions<ReactNode>;
}
```
# MenuSelectItem

The MenuSelectItem component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { MenuSelectItem } from "@appier/aiqua-design-system

<MenuSelectItem />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `value` | `Value` | No | The value of the `MenuSelectItem` component, required for a controlled component. |
| `defaultValue` | `Value` | No | The default component value. Used when the component is uncontrolled. |
| `onChange` | `(value: Value) => void` | No | The handler called when the value of the component changes. |
| `options` | `Option[]` | Yes | The options for the component. |


# MenuSelectItemProps

```typescript
type MenuSelectItemProps = Partial<MenuItemProps> & React.LiHTMLAttributes<HTMLLIElement> & ConfigProps;
```
> Could not find definition for **MESSAGE_CATEGORY**.
> Could not find definition for **MESSAGE_POSITION**.
> Could not find definition for **MESSAGE_TYPE**.
# MessageBubbleProps

```typescript
interface MessageBubbleProps {
  children: React.ReactNode;
  align: MESSAGE_POSITION;
  timestamp?: number;
  showTimestamp?: boolean;
  showAvatar?: boolean;
  actionHandler?: React.ReactNode;
  agent?: ChatAgent;
  theme: THEME_TYPES;
  isErrorMsg?: boolean;
  isLoading?: boolean;
  className?: string;
  outerActionHandler?: ReactNode;
}
```
# Metric

```typescript
interface Metric extends ChartFieldConfig {
  aggregateOperator?: 'sum' | 'avg' | 'count';
}
```
# MONTH_DISPLAY_FORMAT

```typescript
const MONTH_DISPLAY_FORMAT = 'MMM yyyy';
```
# MONTH_LABEL_HEIGHT

```typescript
const MONTH_LABEL_HEIGHT = 48;
```
# MONTH_LAYOUT_HEIGHT

```typescript
const MONTH_LAYOUT_HEIGHT = 248;
```
# MultiSelectFilter

The MultiSelectFilter component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template,
  args: {
    label: 'Label',
    options: FAKE_OPTIONS
  }
};
```

## Usage

```tsx
import { MultiSelectFilter } from "@appier/aiqua-design-system

<MultiSelectFilter />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `options` | `T extends 'menu' ? MenuOptionProps[] : OptionProps[]` | Yes | Defines the checkbox options |
| `value` | `string[]` | No | The value of the MultiSelectFilter, required for a controlled component. |
| `defaultValue` | `string[]` | No | The default element value. Use when the component is not controlled. |
| `defaultDisplayedValue` | `string` | No | Defines the default text when no options are chosen or when all options are selected |
| `isSearchable` | `boolean` | No | Defines if the filter options are searchable |
| `fuseConfig` | `Fuse.IFuseOptions<MenuOption \| OptionProps>` | No | Defines the Fuse configuration for the search |
| `searchPlaceholder` | `string` | No | Defines the placeholder for the search input |
| `searchInputProps` | `React.InputHTMLAttributes<HTMLInputElement>` | No | Defines the input props for the Search component |
| `selectAllLabel` | `string` | No | Defines the label for the `Select All` action button |
| `clearAllLabel` | `string` | No | Defines the label for the `Clear` action button |
| `applyLabel` | `string` | No | Defines the label for the `Apply` action button |
| `cancelLabel` | `string` | No | Defines the label of the `Cancel` action button |
| `noOptionsView` | `React.ReactNode` | No | Defines the elements that will be rendered when no options are displayed |
| `scrollableAreaMinHeight` | `number` | No | Defines the min height for the scrollable checkbox area |
| `showActionFooter` | `boolean` | No | Defines if the action footer should be displayed |
| `listType` | `T` | No | Defines the type of the checkboxes |
| `showCheckbox` | `boolean` | No | Defines if the list items should have a checkbox |
| `onApply` | `(selectedOptions: FilterOptionProps[]) => void` | No | Defines the callback function when the `Apply` action button is clicked |
| `onCancel` | `() => void` | No | Defines the callback function when the `Cancel` action button is clicked |
| `onSearch` | `(searchTerm: string) => void` | No | Defines the callback function when the search input value changes |
| `onBlur` | `() => void` | No | Defines the callback function when the popover is blurred |

## Examples

### With Tree

```tsx
export const WithTree = {
  name: 'Tree (Controlled and Uncontrolled)',
  render: () => <TreeControlledAndUncontrolled />
} as unknown as StoryFn;
```

### With Menu

```tsx
export const WithMenu = {
  name: 'Menu (Controlled and Uncontrolled)',
  render: () => <MenuControlledAndUncontrolled />
} as unknown as StoryFn;
```

### With Optional Actions

```tsx
export const WithOptionalActions = {
  render: Template,
  args: {
    label: 'Label',
    defaultDisplayedValue: 'All',
    isSearchable: true,
    selectAllLabel: 'Select all',
    clearAllLabel: 'Clear',
    scrollableAreaMinHeight: '130',
    searchPlaceholder: 'Search Text...',
    noOptionsView: <div style={{
      height: '130px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      color: 'rgba(0, 10, 58, 0.40)'
    }}>
        No matching results found
      </div>,
    options: [{
      label: 'Label 1',
      value: '1'
    }, {
      label: 'Disabled label',
      value: '7',
      disabled: true
    }, {
      label: 'Long label with custom label clamp value Long label with custom label clamp value Long label with custom label clamp value Long label with custom label clamp value',
      value: '7',
      labelClamp: 3
    }, {
      label: 'Label with tooltip',
      value: '8',
      tooltipProps: {
        content: 'This is the tooltip content'
      }
    }, {
      label: 'Label with number badge',
      value: '9',
      badgeProps: {
        variant: 'number',
        content: 3
      }
    }, {
      label: 'Label with text badge',
      value: '10',
      badgeProps: {
        variant: 'text',
        content: 'Test'
      }
    }]
  }
};
```

### With Menu Optional Actions

```tsx
export const WithMenuOptionalActions = {
  render: MenuTemplate,
  args: {
    listType: 'menu',
    label: 'Label',
    defaultDisplayedValue: 'All',
    isSearchable: true,
    selectAllLabel: 'Select all',
    clearAllLabel: 'Clear',
    scrollableAreaMinHeight: '130',
    searchPlaceholder: 'Search Text...',
    showCheckbox: true,
    noOptionsView: <div style={{
      height: '130px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      color: 'rgba(0, 10, 58, 0.40)'
    }}>
        No matching results found
      </div>,
    options: [{
      label: 'Label 1',
      value: '1'
    }, {
      label: 'diver',
      value: 'diver-1',
      renderComponent: () => <MenuDivider />
    }, {
      label: 'Disabled label',
      value: '7',
      disabled: true
    }, {
      label: 'Label with tooltip',
      value: '8',
      tooltipProps: {
        content: 'This is the tooltip content'
      }
    }, {
      label: 'Label with icon',
      value: '9',
      renderComponent: (props: Parameters<NonNullable<MenuOptionProps['renderComponent']>>[0]) => {
        const {
          menuProps
        } = props;
        return <MenuIconItem icon={<DSIcon is="flagSolid16" />} {...menuProps} />;
      }
    }, {
      label: 'Label with text',
      value: '10',
      renderComponent: (props: Parameters<NonNullable<MenuOptionProps['renderComponent']>>[0]) => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem {...menuProps} label={`L${options.value}`} />;
      }
    }]
  }
};
```


# MultiSelectFilterProps

```typescript
type MultiSelectFilterProps<T extends ListType> = PickedBaseFilterProps & {
  /**
   * Defines the checkbox options
   */
  options: T extends 'menu' ? MenuOptionProps[] : OptionProps[];
  /**
   * The value of the MultiSelectFilter, required for a controlled component.
   */
  value?: string[];
  /**
   * The default element value. Use when the component is not controlled.
   */
  defaultValue?: string[];
  /**
   * Defines the default text when no options are chosen or when all options are selected
   */
  defaultDisplayedValue?: string;
  /**
   * Defines if the filter options are searchable
   */
  isSearchable?: boolean;
  /**
   * Defines the Fuse configuration for the search
   */
  fuseConfig?: Fuse.IFuseOptions<MenuOption | OptionProps>;
  /**
   * Defines the placeholder for the search input
   */
  searchPlaceholder?: string;
  /**
   * Defines the input props for the Search component
   */
  searchInputProps?: React.InputHTMLAttributes<HTMLInputElement>;
  /**
   * Defines the label for the `Select All` action button
   */
  selectAllLabel?: string;
  /**
   * Defines the label for the `Clear` action button
   */
  clearAllLabel?: string;
  /**
   * Defines the label for the `Apply` action button
   */
  applyLabel?: string;
  /**
   * Defines the label of the `Cancel` action button
   */
  cancelLabel?: string;
  /**
   * Defines the elements that will be rendered when no options are displayed
   */
  noOptionsView?: React.ReactNode;
  /**
   * Defines the min height for the scrollable checkbox area
   */
  scrollableAreaMinHeight?: number;
  /**
   * Defines if the action footer should be displayed
   */
  showActionFooter?: boolean;
  /**
   * Defines the type of the checkboxes
   */
  listType?: T;
  /**
   * Defines if the list items should have a checkbox
   */
  showCheckbox?: boolean;
  /**
   * Defines the callback function when the `Apply` action button is clicked
   */
  onApply?: (selectedOptions: FilterOptionProps[]) => void;
  /**
   * Defines the callback function when the `Cancel` action button is clicked
   */
  onCancel?: () => void;
  /**
   * Defines the callback function when the search input value changes
   */
  onSearch?: (searchTerm: string) => void;
  /**
   * Defines the callback function when the popover is blurred
   */
  onBlur?: () => void;
};
```
# NestMenu

The NestMenu component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { NestMenu } from "@appier/aiqua-design-system

<NestMenu />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `menuItemProps` | `Omit<MenuItemProps, 'children'>` | Yes | Define the props for the menu item |
| `options` | `MenuOption[]` | Yes | Define the options for the menu |
| `multiple` | `boolean` | No | Define whether the menu is multiple |
| `onMenuSelected` | `(selectedItem: MenuOption[] \| MenuOption) => void` | Yes | When options on the menu is selected, this function will be called |

## Examples

### With Divider

```tsx
export const WithDivider = {
  render: Template,
  args: {
    ...Normal.args,
    options: [{
      title: 'Item 1',
      value: '1',
      children: [{
        title: 'Item 1-1',
        value: '1-1'
      }, {
        title: 'Item 1-2',
        value: '1-2',
        children: [{
          title: 'Item 1-2-1',
          value: '1-2-1'
        }, {
          title: 'Item 1-2-2',
          value: '1-2-2'
        }]
      }]
    }, {
      title: 'Item 2',
      value: '2'
    }, {
      title: 'Item 3',
      value: '3'
    }, {
      value: 'diver-1',
      renderComponent: () => <MenuDivider />
    }, {
      title: 'Item 4',
      value: '4'
    }, {
      title: 'Item 5',
      value: '5'
    }, {
      title: 'Item 6',
      value: '6'
    }, {
      value: 'diver-2',
      renderComponent: () => <MenuDivider />
    }, {
      title: 'Item 7',
      value: '7'
    }, {
      title: 'Item 8',
      value: '8'
    }, {
      title: 'Item 9',
      value: '9'
    }]
  }
};
```

### With Label

```tsx
export const WithLabel = {
  render: Template,
  args: {
    ...Normal.args,
    options: [{
      title: 'Item 1',
      value: '1',
      children: [{
        title: 'Item 1-1',
        value: '1-1',
        renderComponent: props => {
          const {
            menuProps,
            options
          } = props;
          return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
        }
      }, {
        title: 'Item 1-2',
        value: '1-2',
        children: [{
          title: 'Item 1-2-1',
          value: '1-2-1'
        }, {
          title: 'Item 1-2-2',
          value: '1-2-2'
        }]
      }],
      renderComponent: props => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
      }
    }, {
      title: 'Item 2',
      value: '2',
      renderComponent: props => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
      }
    }, {
      title: 'Item 3',
      value: '3',
      renderComponent: props => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
      }
    }, {
      title: 'Item 4',
      value: '4',
      renderComponent: props => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
      }
    }]
  }
};
```


# NestMenuItem

The NestMenuItem component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { NestMenuItem } from "@appier/aiqua-design-system

<NestMenuItem />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `options` | `MenuOption[]` | Yes | - |
| `searchTerm` | `string` | Yes | - |
| `multiple` | `boolean` | No | - |
| `menuItemProps` | `Omit<MenuItemProps, 'children'>` | Yes | - |
| `selectedOptions` | `MenuOption[]` | Yes | - |
| `search` | `boolean` | No | - |
| `noSearchResultLabel` | `string \| ReactNode` | No | - |
| `setSelectedOptions` | `(options: MenuOption[]) => void` | Yes | - |

## Examples

### With Divider

```tsx
export const WithDivider = {
  render: Template,
  args: {
    ...Normal.args,
    options: [{
      title: 'Item 1',
      value: '1',
      children: [{
        title: 'Item 1-1',
        value: '1-1'
      }, {
        title: 'Item 1-2',
        value: '1-2',
        children: [{
          title: 'Item 1-2-1',
          value: '1-2-1'
        }, {
          title: 'Item 1-2-2',
          value: '1-2-2'
        }]
      }]
    }, {
      title: 'Item 2',
      value: '2'
    }, {
      title: 'Item 3',
      value: '3'
    }, {
      value: 'diver-1',
      renderComponent: () => <MenuDivider />
    }, {
      title: 'Item 4',
      value: '4'
    }, {
      title: 'Item 5',
      value: '5'
    }, {
      title: 'Item 6',
      value: '6'
    }, {
      value: 'diver-2',
      renderComponent: () => <MenuDivider />
    }, {
      title: 'Item 7',
      value: '7'
    }, {
      title: 'Item 8',
      value: '8'
    }, {
      title: 'Item 9',
      value: '9'
    }]
  }
};
```

### With Label

```tsx
export const WithLabel = {
  render: Template,
  args: {
    ...Normal.args,
    options: [{
      title: 'Item 1',
      value: '1',
      children: [{
        title: 'Item 1-1',
        value: '1-1',
        renderComponent: props => {
          const {
            menuProps,
            options
          } = props;
          return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
        }
      }, {
        title: 'Item 1-2',
        value: '1-2',
        children: [{
          title: 'Item 1-2-1',
          value: '1-2-1'
        }, {
          title: 'Item 1-2-2',
          value: '1-2-2'
        }]
      }],
      renderComponent: props => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
      }
    }, {
      title: 'Item 2',
      value: '2',
      renderComponent: props => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
      }
    }, {
      title: 'Item 3',
      value: '3',
      renderComponent: props => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
      }
    }, {
      title: 'Item 4',
      value: '4',
      renderComponent: props => {
        const {
          menuProps,
          options
        } = props;
        return <MenuLabelItem label={`L-${options.value}`} {...menuProps} />;
      }
    }]
  }
};
```


# NestMenuProps

```typescript
interface NestMenuProps extends Omit<MenuProps, 'children'> {
  /**
   * Define the props for the menu item
   */
  menuItemProps: Omit<MenuItemProps, 'children'>;
  /**
   * Define the options for the menu
   */
  options: MenuOption[];
  /**
   * Define whether the menu is multiple
   */
  multiple?: boolean;
  /**
   * When options on the menu is selected, this function will be called
   */
  onMenuSelected: (selectedItem: MenuOption[] | MenuOption) => void;
}
```
# OPTION_FIELD_TYPE

```typescript
const OPTION_FIELD_TYPE = {
  STRING: 'string',
  FLOAT: 'float',
  INTEGER: 'int',
  TIMESTAMP: 'timestamp',
  PERCENTAGE: 'percentage',
  BOOLEAN: 'boolean'
} as const;
```
# Option

```typescript
interface Option {
  /**
   * Defines the label of the option
   */
  label: string;
  /**
   * Defines the value of the option
   */
  value: string;
  /**
   * Defines the sub options of the option
   */
  subOptions?: Option[];
}
```
# OptionProps

```typescript
type OptionProps = Option & CheckboxConfig;
```
# Pagination

The Pagination component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { Pagination } from "@appier/aiqua-design-system

<Pagination />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `itemsPerPageOptions` | `number[]` | No | Options for display item(s) count per page. |
| `itemsPerPage` | `number` | Yes | Selected item(s) count per page. |
| `totalItemCount` | `number` | Yes | Total items count. |
| `currentPage` | `number` | Yes | Current focused page index. |
| `allowKeyboardNavigation` | `boolean` | No | Allow user to navigate through the pagination using input box @default true |
| `onPageNavigate` | `(page: number) => void` | No | Callback fired when the current page input key down. |
| `onItemsPerPageChange` | `(itemsPerPage: number) => void` | No | Callback fired when the per page item count is changed. |
| `renderItemsPerPageOptions` | `(content: React.ReactNode) => React.ReactNode` | No | Render function for items per page column |
| `renderPaginationInfo` | `({
  start,
  end,
  totalItemCount
}: {
  start: number;
  end: number;
  totalItemCount: number;
}) => React.ReactNode` | Yes | Render function for pagination info |
| `themeTypes` | `THEME_TYPES` | No | theme types for skeleton |
| `isPaginationLoading` | `boolean` | No | is page data loading |


# PaginationOptions

```typescript
interface PaginationOptions {
  rowsPerPage: number;
  totalNumberCount: number;
}
```
# PaginationProps

```typescript
type PaginationProps = React.HTMLAttributes<HTMLDivElement> & ConfigProps;
```
# PaginationTable

The PaginationTable component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { PaginationTable } from "@appier/aiqua-design-system

<PaginationTable />
```

## Examples

### With Empty State

```tsx
export const WithEmptyState = {
  render: Template,
  args: {
    rows: [],
    isEmpty: true,
    totalItemCount: 0,
    renderEmptyView: () => <EmptyContentWrapper>
        <BoxIcon size={48} />
        <EmptyMessage>No data yet</EmptyMessage>
      </EmptyContentWrapper>
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Footer

```tsx
export const WithFooter = {
  render: Template,
  args: {
    columns: columnsWitFooter,
    rows: rowsWithFooter,
    totalItemCount: rowsWithFooter.length,
    summaryRows: {
      campaign_channel: 'Grand total',
      impressions: 100_000,
      clicks: 50_000
    },
    summaryRowPosition: 'bottom',
    fillUpWithBlankCol: true
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Footer And Actions

```tsx
export const WithFooterAndActions = {
  render: Template,
  args: {
    columns: columnsWitFooter,
    rows: rowsWithFooter,
    totalItemCount: rowsWithFooter.length,
    summaryRows: {
      campaign_channel: 'Grand total',
      impressions: 100_000,
      clicks: 50_000
    },
    summaryRowPosition: 'bottom',
    fillUpWithBlankCol: true,
    actionHeaderContent: <ActionHeaderContentWrapper className="flex-wrap">
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<DSIcon is="addOutlined20" />}>
          Add Report1
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<DSIcon is="addOutlined20" />}>
          Add Report2
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<DSIcon is="addOutlined20" />}>
          Add Report3
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<DSIcon is="addOutlined20" />}>
          Add Report4
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<DSIcon is="addOutlined20" />}>
          Add Report5
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<DSIcon is="addOutlined20" />}>
          Add Report6
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<DSIcon is="addOutlined20" />}>
          Add Report7
        </Button>
      </ActionHeaderContentWrapper>
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Loading

```tsx
export const WithLoading = {
  render: Template,
  args: {
    columns: columnsWitFooter,
    rows: rowsWithFooter,
    totalItemCount: rowsWithFooter.length,
    summaryRows: {
      campaign_channel: 'Grand total',
      impressions: 100_000,
      clicks: 50_000
    },
    summaryRowPosition: 'bottom',
    fillUpWithBlankCol: true,
    isLoading: true,
    isPaginationLoading: true,
    actionHeaderContent: <Skeleton width="100%" height="100%" shape="RECT" theme={THEME_TYPES.LIGHT} />
  }
};
```

### With Highlighter

```tsx
export const WithHighlighter = {
  render: Template,
  args: {
    columns: columns.map(column => column.field === 'age' ? {
      ...column,
      highlighter: (data: rowType) => data.age && data.age < 40
    } : {
      ...column,
      highlighter: rowData => rowData.highlighted ? 'var(--color-compBg-grayLite)' : false
    }),
    rows: rows.map((row, idx) => idx < 3 ? {
      ...row,
      highlighted: true
    } : row)
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Checkboxs

```tsx
export const WithCheckboxs = {
  render: (args, {
    globals: {
      theme
    }
  }) => {
    const [checkedValue, setCheckedValue] = useState<number[]>([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [currentItemsPerPage, setCurrentItemsPerPage] = useState(FAKE_ITEMS_PER_PAGE_OPTIONS[0]);
    const handlePageNavigate = (newPage: number) => {
      args.onPageNavigate?.(newPage);

      // NOTE: by spec, when page chenge, the select all checkbox should be unchecked
      // while the checked value should remain.
      setCurrentPage(newPage);
    };
    const handleItemsPerPageChange = (newItemsPerPage: number) => {
      args.onItemsPerPageChange?.(newItemsPerPage);
      setCurrentItemsPerPage(newItemsPerPage);
    };
    const paginatedRows = useMemo(() => {
      const {
        totalItemCount,
        rows
      } = args;
      if (totalItemCount === undefined) {
        return [];
      }
      let end = totalItemCount;
      if (currentItemsPerPage < totalItemCount) {
        end = currentItemsPerPage * currentPage;
        if (end > totalItemCount) {
          end = totalItemCount;
        }
      }
      const start = totalItemCount ? (currentPage - 1) * currentItemsPerPage : 0;
      return rows.slice(start, end);
    }, [args, currentItemsPerPage, currentPage]);
    const handleSetCheckboxValue = () => {
      console.log('checked value:', checkedValue);
    };
    const handleResetCheckboxValue = () => {
      setCheckedValue([]);
    };
    return <>
        <StyledButton variant="primary" size="normal" onClick={handleResetCheckboxValue}>
          Reset value
        </StyledButton>
        <StyledButton variant="primary" size="normal" onClick={handleSetCheckboxValue}>
          Show selected value
        </StyledButton>
        <PaginationTable {...args} currentPage={currentPage} onPageNavigate={handlePageNavigate} rowsPerPage={currentItemsPerPage} onItemsPerPageChange={handleItemsPerPageChange} rows={paginatedRows} selectValue={checkedValue} selectionType={SELECTION_TYPE.MULTIPLE as SELECTION_TYPE} selectionIdentifier="id" onSelectAllChange={(checked, currentPageValue) => {
        const updatedData = checkedValue.filter(checkedValue => !currentPageValue.find(value => value.id === checkedValue));
        setCheckedValue(prev => checked ? [...prev, ...currentPageValue.map(v => v.id)] : updatedData);
      }} onSelectChange={data => {
        setCheckedValue(prev => {
          if (prev?.includes(data.rowIdentifier)) {
            return prev.filter(prevData => prevData !== data.rowIdentifier);
          }
          return [...prev, data.rowIdentifier];
        });
      }} theme={theme} />
      </>;
  }
};
```

### With Radio Button

```tsx
export const WithRadioButton = {
  render: (args, {
    globals: {
      theme
    }
  }) => {
    const [checkedValue, setCheckedValue] = useState<number[] | null>([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [currentItemsPerPage, setCurrentItemsPerPage] = useState(FAKE_ITEMS_PER_PAGE_OPTIONS[0]);
    const handlePageNavigate = (newPage: number) => {
      args.onPageNavigate?.(newPage);
      setCurrentPage(newPage);
    };
    const handleItemsPerPageChange = (newItemsPerPage: number) => {
      args.onItemsPerPageChange?.(newItemsPerPage);
      setCurrentItemsPerPage(newItemsPerPage);
    };
    const paginatedRows = useMemo(() => {
      const {
        totalItemCount,
        rows
      } = args;
      if (totalItemCount === undefined) {
        return [];
      }
      let end = totalItemCount;
      if (currentItemsPerPage < totalItemCount) {
        end = currentItemsPerPage * currentPage;
        if (end > totalItemCount) {
          end = totalItemCount;
        }
      }
      const start = totalItemCount ? (currentPage - 1) * currentItemsPerPage : 0;
      return rows.slice(start, end);
    }, [args, currentItemsPerPage, currentPage]);
    const handleSetRadioValue = () => {
      console.log('checked value:', checkedValue);
    };
    const handleResetRadioValue = () => {
      setCheckedValue(null);
    };
    return <>
        <StyledButton variant="primary" size="normal" onClick={handleResetRadioValue}>
          Reset value
        </StyledButton>
        <StyledButton variant="primary" size="normal" onClick={handleSetRadioValue}>
          Show selected value
        </StyledButton>
        <PaginationTable {...args} currentPage={currentPage} onPageNavigate={handlePageNavigate} rowsPerPage={currentItemsPerPage} onItemsPerPageChange={handleItemsPerPageChange} rows={paginatedRows} selectValue={checkedValue} selectionType={SELECTION_TYPE.SINGLE as SELECTION_TYPE} selectionIdentifier="id" onSelectAllChange={data => {
        setCheckedValue(data);
      }} onSelectChange={data => {
        setCheckedValue(data.rowIdentifier);
      }} theme={theme} />
      </>;
  }
};
```


# PercentageStackedAreaChart

The PercentageStackedAreaChart component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const _PercentageStackedAreaChart = {
  render: Template
};
```

## Usage

```tsx
import { PercentageStackedAreaChart } from "@appier/aiqua-design-system

<PercentageStackedAreaChart />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `chartTimestamp` | `ChartFieldConfig` | Yes | Defining the timestamp of the chart, will be the identifier of date range |
| `chartOptions` | `PercentageStackedAreaChartUiMetricsInterface` | No | Other property that will be used for configuring the chart. Including the notation, decimal places, coloring order as well as the split number. |


# PercentageStackedAreaChartProps

```typescript
interface PercentageStackedAreaChartProps extends BasicChartProps {
  /**
   * Defining the timestamp of the chart, will be the identifier of date range
   */
  chartTimestamp: ChartFieldConfig;
  /**
   * Other property that will be used for configuring the chart.
   * Including the notation, decimal places, coloring order as well as the split number.
   */
  chartOptions?: PercentageStackedAreaChartUiMetricsInterface;
}
```
# PercentageStackedAreaChartUiMetricsInterface

```typescript
interface PercentageStackedAreaChartUiMetricsInterface extends BasicChartUiMetricsInterface {
  metric?: PercentageStackedAreaChartUiOption[];
}
```
# Popover

The Popover component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: args => {
    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
    const open = Boolean(anchorEl || args.open);
    const placement = args.placement || 'bottom';
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
      setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
      setAnchorEl(null);
    };
    return <>
        <Wrapper>
          <Button variant="primary" size="normal" onClick={handleClick}>
            click here
          </Button>
        </Wrapper>
        <Popover anchorEl={anchorEl} onClose={handleClose} open={open} placement={placement}>
          <ContentWrapper>Popover content on here</ContentWrapper>
        </Popover>
      </>;
  }
};
```

## Usage

```tsx
import { Popover } from "@appier/aiqua-design-system

<Popover />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `anchorEl` | `HTMLElement \| null` | No | Define anchor element for popover reference |
| `onClose` | `() => void` | No | Callback function fired when popover be closed |
| `open` | `boolean` | Yes | Define the open or not for popover |
| `placement` | `Placement` | Yes | Define the default placement strategy. |
| `focusOrder` | `('reference' \| 'floating' \| 'content')[]` | No | Defines the focus order when cycling through tabbale contents of the floating element |
| `triggerByHover` | `boolean` | No | Defines whether the component should be triggered by hover |
| `isShowTooltipArrow` | `boolean` | No | Define the arrow reference element |
| `tooltipClassName` | `string` | No | Define the arrow reference element |

## Examples

### With Arrow

```tsx
export const WithArrow = {
  render: args => {
    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
    const open = Boolean(anchorEl || args.open);
    const placement = args.placement || 'bottom';
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
      setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
      setAnchorEl(null);
    };
    return <>
        <Wrapper>
          <Button variant="primary" size="normal" onClick={handleClick}>
            click here
          </Button>
        </Wrapper>
        <StyledPopover anchorEl={anchorEl} onClose={handleClose} open={open} placement={placement} isShowTooltipArrow tooltipClassName="arrow-content">
          <ContentWrapper>Popover content on here</ContentWrapper>
        </StyledPopover>
      </>;
  }
};
```

### Trigger By Hover

```tsx
export const TriggerByHover = args => {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl || args.open);
  const placement = args.placement || 'bottom';
  const handleMouseEnter = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  return <>
      <Wrapper>
        <Button variant="primary" size="normal" onMouseEnter={handleMouseEnter}>
          click here
        </Button>
      </Wrapper>
      <Popover anchorEl={anchorEl} onClose={handleClose} open={open} placement={placement} triggerByHover>
        <ContentWrapper>Popover content: Trigger by hover</ContentWrapper>
      </Popover>
    </>;
};
```


# PopoverProps

```typescript
type PopoverProps = {
  /**
   * Define anchor element for popover reference
   */
  anchorEl?: HTMLElement | null;
  /**
   * Callback function fired when popover be closed
   */
  onClose?: () => void;
  /**
   * Define the open or not for popover
   */
  open: boolean;
  /**
   * Define the default placement strategy.
   */
  placement: Placement;
  /**
   * Defines the focus order when cycling through tabbale contents of the floating element
   */
  focusOrder?: ('reference' | 'floating' | 'content')[];
  /**
   * Defines whether the component should be triggered by hover
   */
  triggerByHover?: boolean;
  /**
   * Define the arrow reference element
   */
  isShowTooltipArrow?: boolean;
  /**
   * Define the arrow reference element
   */
  tooltipClassName?: string;
} & React.HTMLAttributes<HTMLDivElement>;
```
# ProductTour

Version `v2.0.0`  | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-%7C-Spec?type=design&node-id=12915-11710)

The product tour is designed to onboard users by providing essential knowledge and guidance.

## Uasge
### Import
```jsx
import { ProductTour } from '@appier/aiqua-design-system/components';
// or
import { ProductTour } from '@appier/aiqua-design-system';
```

## Main Example

```tsx
export const Basic = {
  render: Template
};
```

## Usage

```tsx
import { ProductTour } from "@appier/aiqua-design-system

<ProductTour />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `show` | `boolean` | No | If true, the component is shown. @default true |
| `type` | `'regular' \| 'blue'` | No | The style of the component. @default 'regular' |
| `title` | `string` | Yes | The title of the component. |
| `className` | `string` | No | The className of the component. |
| `zIndex` | `number` | No | Defines a specific z-index of the component. The tooltip will take the default z-index of `999` if the value is not defined. |
| `content` | `React.ReactNode` | No | The area to display the content. |
| `footer` | `React.ReactNode[]` | No | The area to display operation buttons on footer. |
| `footerClassName` | `string` | No | The className of the footer container. |
| `placement` | `Placement` | No | The default placement strategy. @default 'top' |
| `fallbackPlacements` | `Placement[]` | No | The fallback array of placement. @default ["top","right","left","bottom"] |
| `shiftOptions` | `ShiftOptions` | No | The shift options of the floating element to keep it in view. @default undefine |
| `indicatorClassName` | `string` | No | The className of the indicator svg container. |
| `children` | `JSX.Element` | Yes | The reference element to show ProductTour. |
| `referenceClassName` | `string` | No | The className of the reference container. |

## Examples

### Style

```tsx
export const Style = () => {
  return <div className="flex h-[200px] items-center justify-center gap-spacing-20">
      <ProductTour className="w-[240px]" title="Regular (default)">
        <ContentPlaceholder className="h-[100px]" />
      </ProductTour>
      <ProductTour title="Blue" type="blue" className="w-[240px]">
        <ContentPlaceholder className="h-[100px]" />
      </ProductTour>
    </div>;
};
```

### Placement

```tsx
export const Placement = () => {
  return <div className="grid h-[200px] place-items-center">
      <ProductTour className="w-[240px]" title="On top or right-end" fallbackPlacements={['right-end']}>
        <ProductTour className="w-[240px]" title="On left or bottom-start" placement="left" fallbackPlacements={['bottom-start']}>
          <ContentPlaceholder />
        </ProductTour>
      </ProductTour>
    </div>;
};
```

### Shift

```tsx
export const Shift = () => {
  return <div className="grid h-[200px] place-items-center">
      <ProductTour className="w-[700px]" title="In men’s beauty, simplicity is key. Imagine a chatbot that personalizes recommendations in seconds, aligning products with unique preferences. No lengthy surveys—just tailored answers for skincare, grooming, and more. It’s efficient, modern, and hassle-free, bridging the gap between technology and men’s self-care with ease and accuracy." placement="top" fallbackPlacements={['top']} shiftOptions={{}}>
        <ContentPlaceholder />
      </ProductTour>
    </div>;
};
```

### Custom Indicator

```tsx
export const CustomIndicator = () => {
  return <div className="grid h-[200px] place-items-center">
      <ProductTour className="w-[300px]" title="Custom indicator position" indicatorClassName={tw`left-auto right-spacing-32`} fallbackPlacements={['bottom']}>
        <ContentPlaceholder />
      </ProductTour>
    </div>;
};
```

### Closable

```tsx
export const Closable = () => {
  const [open, setOpen] = useState<boolean>(true);
  return <div className="flex h-[200px] items-center justify-center gap-spacing-20">
      <ProductTour className="w-[240px]" title="Closable (default)" onClose={() => {
      setOpen(false);
      console.log('on ProductTour close');
    }} show={open} fallbackPlacements={[]}>
        <ContentPlaceholder className="h-[100px]" />
      </ProductTour>
      <ProductTour className="w-[240px]" closable={false} title="Unclosable" fallbackPlacements={[]}>
        <ContentPlaceholder className="h-[100px]" />
      </ProductTour>
    </div>;
};
```

### With Custom Footer

```tsx
export const WithCustomFooter = () => {
  return <div className="grid h-[300px] place-items-center">
      <ProductTour title="Title" className="w-[400px]" footerClassName={tw`justify-between`} fallbackPlacements={['bottom']} footer={[<Checkbox label="Do not show this again" />, <Button size="normal" variant="primary">
            Action 1
          </Button>]}>
        <ContentPlaceholder className="h-[100px]" />
      </ProductTour>
    </div>;
};
```

### With Custom Content

```tsx
export const WithCustomContent = () => {
  return <div className="grid h-[400px] place-items-center">
      <ProductTour title="Title" className="w-[400px]" fallbackPlacements={['bottom']} content={<div>
            <div className="px-spacing-24 pb-spacing-12">Content</div>
            <Checkbox label="Do not show this again" />
          </div>} footer={[<Button size="normal" variant="secondary">
            Action 2
          </Button>, <Button size="normal" variant="primary">
            Action 1
          </Button>]}>
        <ContentPlaceholder className="h-[100px]" />
      </ProductTour>
    </div>;
};
```


# ProductTourProps

```typescript
type ProductTourProps = {
  /**
   * If true, the component is shown.
   * @default true
   */
  show?: boolean;

  /**
   * The style of the component.
   * @default 'regular'
   */
  type?: 'regular' | 'blue';

  /**
   * The title of the component.
   */
  title: string;

  /**
   * The className of the component.
   */
  className?: string;

  /**
   * Defines a specific z-index of the component. The tooltip will take the default z-index of `999` if the value is not defined.
   */
  zIndex?: number;

  /**
   * The area to display the content.
   */
  content?: React.ReactNode;

  /**
   * The area to display operation buttons on footer.
   */
  footer?: React.ReactNode[];

  /**
   * The className of the footer container.
   */
  footerClassName?: string;

  /**
   * The default placement strategy.
   * @default 'top'
   */
  placement?: Placement;

  /**
   * The fallback array of placement.
   * @default ["top","right","left","bottom"]
   */
  fallbackPlacements?: Placement[];

  /**
   * The shift options of the floating element to keep it in view.
   * @default undefine
   */
  shiftOptions?: ShiftOptions;

  /**
   * The className of the indicator svg container.
   */
  indicatorClassName?: string;

  /**
   * The reference element to show ProductTour.
   */
  children: JSX.Element;

  /**
   * The className of the reference container.
   */
  referenceClassName?: string;
} & ({
  /**
   * If true, the close button is shown.
   * @default true
   */
  closable?: true;

  /**
   * Callback fired when the component requests to be closed.
   */
  onClose?: () => void;
} | {
  closable?: false;
  onClose?: never;
}) & React.HTMLAttributes<HTMLDivElement>;
```
# Props

```typescript
interface Props {
  /**
   * If `true`, the component will be disabled.
   */
  disabled?: boolean;
  /**
   * The short hint displayed in the search before the user enters a value
   */
  placeholder?: string;
  /**
   * The handler called when the value of the input changes.
   */
  onChange?: (value: string) => void;
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value?: string;
  /**
   * The default element value. Use when the component is not controlled.
   */
  defaultValue?: string;
  /**
   * The attributes for the native `input` element.
   */
  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
}
```
# QuantityInput

Version `v2.0.2` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=33401-453169&t=AJpHD5HQ2KyonQSH-0)

QuantityInput is a numeric input field with an **type="number"** attribute. It allows users to control the quantity using intuitive icon buttons for incrementing and decrementing the value.

## Usage
### Import
```jsx
import { QuantityInput } from '@appier/aiqua-design-system/components';
// or
import { QuantityInput } from '@appier/aiqua-design-system';
```
## Props

Also support all valid `HTMLInputElement` props

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { QuantityInput } from "@appier/aiqua-design-system

<QuantityInput />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [inputValue, setInputValue] = React.useState('123');
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <QuantityInput label="Count (Uncontrolled)" defaultValue="123" />
      <QuantityInput label="Count (Controlled)" value={inputValue} onChange={setInputValue} />
    </div>;
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  args: {
    hint: 'Hint',
    label: 'Label'
  }
};
```

### With Unit

```tsx
export const WithUnit = {
  args: {
    unit: 'Sec'
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```

### Error

```tsx
export const Error = {
  args: {
    error: 'Error text'
  }
};
```

### With Decimal Places

```tsx
export const WithDecimalPlaces = {
  args: {
    decimalPlaces: 2
  }
};
```

### Min And Max

```tsx
export const MinAndMax = {
  args: {
    min: 0,
    max: 99
  }
};
```

### With Icon

```tsx
export const WithIcon = {
  args: {
    prefixIcon: <DSIcon is="sizeHeightOutlined20" color={color.light.semantic.gray} />
  }
};
```


# QuantityInputProps

```typescript
type QuantityInputProps = Override<Override<InputHTMLAttributes<HTMLInputElement>, InputProps<string>>, ConfigProps>;
```
# QuickSelectionRanges

```typescript
type QuickSelectionRanges = CustomQuickSelectionOption[];
```
# Radio

Version `v2.0.1` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=19447-303453&t=AJpHD5HQ2KyonQSH-0)

The RadioGroup component allows users to groups radio buttons and select a single option.
Ensure proper selection functionality by assigning a unique value prop to each individual radio component.

## Usage

```jsx
import { RadioGroup } from '@appier/aiqua-design-system/components';
// or
import { RadioGroup } from '@appier/aiqua-design-system';
```

## Main Example

```tsx
export const ControlledAndUncontrolled = () => {
  const [checkedValues, setCheckedValues] = React.useState<string>('yes');
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <RadioGroup direction="vertical" value={checkedValues} onChange={setCheckedValues}>
        <Radio label="Yes" value="yes" />
        <Radio label="No" value="no" />
      </RadioGroup>
    </div>;
};
```

## Usage

```tsx
import { Radio } from "@appier/aiqua-design-system

<Radio />
```

## Examples

### With Chip

```tsx
export const WithChip = {
  render: args => <RadioGroup {...args} defaultValue="1">
      <Radio label="Label" badgeProps={{
      content: 'Label',
      color: 'info'
    }} value="1" />
      <Radio label="Label" value="2" tooltipProps={{
      content: 'Here is tooltip content',
      placement: 'top'
    }} />
    </RadioGroup>
};
```

### Vertical

```tsx
export const Vertical = {
  render: DirectionTemplate,
  args: {
    direction: 'vertical'
  }
};
```

### Horizontal

```tsx
export const Horizontal = {
  render: DirectionTemplate,
  args: {
    direction: 'horizontal'
  }
};
```


# RadioGroup

Version `v2.0.1` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=19447-303453&t=AJpHD5HQ2KyonQSH-0)

The RadioGroup component allows users to groups radio buttons and select a single option.
Ensure proper selection functionality by assigning a unique value prop to each individual radio component.

## Usage

```jsx
import { RadioGroup } from '@appier/aiqua-design-system/components';
// or
import { RadioGroup } from '@appier/aiqua-design-system';
```

## Main Example

```tsx
export const ControlledAndUncontrolled = () => {
  const [checkedValues, setCheckedValues] = React.useState<string>('yes');
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <RadioGroup direction="vertical" value={checkedValues} onChange={setCheckedValues}>
        <Radio label="Yes" value="yes" />
        <Radio label="No" value="no" />
      </RadioGroup>
    </div>;
};
```

## Usage

```tsx
import { RadioGroup } from "@appier/aiqua-design-system

<RadioGroup />
```

## Examples

### With Chip

```tsx
export const WithChip = {
  render: args => <RadioGroup {...args} defaultValue="1">
      <Radio label="Label" badgeProps={{
      content: 'Label',
      color: 'info'
    }} value="1" />
      <Radio label="Label" value="2" tooltipProps={{
      content: 'Here is tooltip content',
      placement: 'top'
    }} />
    </RadioGroup>
};
```

### Vertical

```tsx
export const Vertical = {
  render: DirectionTemplate,
  args: {
    direction: 'vertical'
  }
};
```

### Horizontal

```tsx
export const Horizontal = {
  render: DirectionTemplate,
  args: {
    direction: 'horizontal'
  }
};
```


# RadioGroupProps

```typescript
type RadioGroupProps = Override<CheckboxGroupProps, {
  /**
   * The callback fired when any children Radio is checked or unchecked
   */
  onChange?: (newValue: string) => void;
  /**
   * The default element value. Use when the component is not controlled.
   */
  defaultValue?: string;
  /**
   * The value of the RadioGroup, required for a controlled component.
   */
  value?: string;
}>;
```
# RadioProps

```typescript
type RadioProps = SwitchBaseProps;
```
# ReplaceRule

```typescript
interface ReplaceRule {
  regex: RegExp;
  ruleName: string;
  componentSelectable?: boolean;
  component: ({
    children,
    replaceText,
    isManuallyCreated
  }: {
    children: React.ReactChildren;
    replaceText?: ReplaceText;
    isManuallyCreated?: boolean;
  }) => JSX.Element;
}
```
# ReplaceText

```typescript
type ReplaceText = (text: string) => void;
```
# ResizeOptions

```typescript
interface ResizeOptions {
  resizable?: boolean;
  handleColumnResize?: ({
    isResizing,
    columnIndex,
    deltaX,
    minWidth
  }: {
    isResizing: boolean;
    columnIndex?: number;
    deltaX?: number;
    minWidth?: string | number;
  }) => void;
}
```
# RgbaColor

```typescript
interface RgbaColor extends RgbColor {
  alpha: number;
}
```
# RgbColor

```typescript
interface RgbColor {
  r: number;
  g: number;
  b: number;
}
```
# RgbColorInput

```typescript
interface RgbColorInput {
  r: string;
  g: string;
  b: string;
}
```
# RichTextarea

The RichTextarea component is a key part of the Aiqua Design System.

## Usage

```tsx
import { RichTextarea } from "@appier/aiqua-design-system";

<RichTextarea />
```

> **Note:** This is a scaffold file. To generate full, rich examples, please create a `*.stories.tsx` file for this component.

# RichTextareaProps

```typescript
interface RichTextareaProps {
  defaultValue: string;
  onChange?: (value: string) => void;
  replaceRules?: ReplaceRule[];
  placeholder?: string;
  minRows?: number;
  onFocus?: (e?: any) => void;
  disabled?: boolean;
  editorWrapperRef?: React.MutableRefObject<any>;
  className?: string;
}
```
# RichTextareaRef

```typescript
interface RichTextareaRef {
  insertText: (text: string) => void;
  clearText: () => void;
  focus: () => void;
}
```
# Row

```typescript
type Row = RowData[];
```
# RowData

```typescript
type RowData = string | number | boolean | null;
```
# SCROLL_LAYOUT_HEIGHT

```typescript
const SCROLL_LAYOUT_HEIGHT = 376;
```
# ScrollBar

The ScrollBar component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: args => {
    return <Wrapper>
        <ScrollBar key={String(args.autoHide)} {...args}>
          {[...new Array(50)].map((x, i) => <Content key={i}>{i}</Content>)}
        </ScrollBar>
      </Wrapper>;
  }
};
```

## Usage

```tsx
import { ScrollBar } from "@appier/aiqua-design-system

<ScrollBar />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `size` | `(typeof SIZES)[keyof typeof SIZES]` | No | Defines the size of the scroll bar. The scroll bar will take the default size if the value is `undefined`. |
| `height` | `number \| string` | No | Defines the height of the scroll area, could set any string of css height attribute |
| `width` | `number \| string` | No | Defines the width of the scroll area, could set any string of css width attribute |
| `maxHeight` | `number \| string` | No | Defines the max height of the scroll area, could set any string of css max-height attribute |
| `maxWidth` | `number \| string` | No | Defines the max width of the scroll area, could set any string of css max-width attribute |
| `autoHide` | `boolean` | No | You can make the scrollbar always visible by setting the autoHide option to false. The scrollbar will take the default value if the value is `undefined`. |
| `scrollableNodeRef` | `React.RefObject<HTMLDivElement>` | No | Apply ref to inner scrollableNode |


# ScrollBarProps

```typescript
type ScrollBarProps = React.HTMLAttributes<HTMLDivElement> & StyleProps & ConfigProps;
```
# Search

The Search component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { Search } from "@appier/aiqua-design-system

<Search />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `disabled` | `boolean` | No | If `true`, the component will be disabled. |
| `placeholder` | `string` | No | The short hint displayed in the search before the user enters a value |
| `onChange` | `(value: string) => void` | No | The handler called when the value of the input changes. |
| `value` | `string` | No | The value of the `input` element, required for a controlled component. |
| `defaultValue` | `string` | No | The default element value. Use when the component is not controlled. |
| `inputProps` | `React.InputHTMLAttributes<HTMLInputElement>` | No | The attributes for the native `input` element. |


# Segment

```typescript
interface Segment {
  /**
   * Defines segment value for reference it
   */
  value: string | number;
  /**
   * Defines segment label for show
   */
  label: React.ReactNode;
}
```
# SegmentedControl

The SegmentedControl component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const WithIcon = {
  args: {
    variant: 'icon',
    segments: [{
      value: 'windows',
      label: <WindowsSolidIcon size={20} />
    }, {
      value: 'iOS',
      label: <IOSSolidIcon size={20} />
    }, {
      value: 'android',
      label: <AndroidSolidIcon size={20} />
    }]
  }
};
```

## Usage

```tsx
import { SegmentedControl } from "@appier/aiqua-design-system

<SegmentedControl />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `segments` | `Segment[]` | Yes | Defines the control segments |
| `onChange` | `(newValue: string \| number) => void` | No | The callback function when the state changes. |
| `value` | `string \| number` | No | Defines the current segment be selected, required for a controlled component. |
| `defaultValue` | `string \| number` | No | Defines the initial segment be selected, use when the component is not controlled. |
| `variant` | `(typeof VARIANT)[keyof typeof VARIANT]` | Yes | Defines variant of the segmented control item. |

## Examples

### With Text

```tsx
export const WithText = {
  args: {
    variant: 'text',
    segments: [{
      value: 0,
      label: 'First Label'
    }, {
      value: 1,
      label: 'Second Label'
    }, {
      value: 2,
      label: 'Third Label'
    }]
  }
};
```


# SegmentedControlProps

```typescript
type SegmentedControlProps = React.HTMLAttributes<HTMLDivElement> & ConfigProps & StyleProps;
```
# SelectableTag

The SelectableTag component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const NonClickableTag = {
  render: Template
};
```

## Usage

```tsx
import { SelectableTag } from "@appier/aiqua-design-system

<SelectableTag />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `tooltipContent` | `string \| React.ReactNode` | No | Allow tooltip with content if need. |
| `selected` | `boolean` | No | If `true`, the tag will be selected. |
| `readOnly` | `boolean` | No | If `true`, the tag will be read only. |
| `disabled` | `boolean` | No | If `true`, the tag will be disabled. |
| `onClick` | `(e: React.MouseEvent<SelectableTagElement>) => void` | No | Callback executed when tag is clicked |

## Examples

### Removable With Non Clickable Tag

```tsx
export const RemovableWithNonClickableTag = {
  render: Template,
  args: {
    removable: true
  },
  parameters: {
    controls: {
      exclude: ['clickable', 'removable']
    }
  }
};
```

### Clickable Tag

```tsx
export const ClickableTag = {
  render: Template,
  args: {
    clickable: true
  },
  parameters: {
    controls: {
      exclude: ['removable', 'clickable']
    }
  }
};
```

### Clickable With Removable Tag

```tsx
export const ClickableWithRemovableTag = {
  render: Template,
  args: {
    ...RemovableWithNonClickableTag.args,
    ...ClickableTag.args
  },
  parameters: {
    controls: {
      exclude: ['removable', 'clickable']
    }
  }
};
```


# SelectableTagProps

```typescript
interface SelectableTagProps extends React.HTMLAttributes<SelectableTagElement> {
  /**
   * Allow tooltip with content if need.
   */
  tooltipContent?: string | React.ReactNode;
  /**
   * If `true`, the tag will be selected.
   */
  selected?: boolean;
  /**
   * If `true`, the tag will be read only.
   */
  readOnly?: boolean;
  /**
   * If `true`, the tag will be disabled.
   */
  disabled?: boolean;
  /**
   * Callback executed when tag is clicked
   */
  onClick?: (e: React.MouseEvent<SelectableTagElement>) => void;
}
```
> Could not find definition for **SELECTION_TYPE**.
# SingleSelectFilter

The SingleSelectFilter component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { SingleSelectFilter } from "@appier/aiqua-design-system

<SingleSelectFilter />
```

## Examples

### With Hierarchical Menu

```tsx
export const WithHierarchicalMenu = {
  render: Template,
  args: {
    children: [<MenuItem submenu={{
      items: [<MenuItemCategory title="Category 1">
              <MenuItem value={'default'} keywords={['default']}>
                Selected by default
              </MenuItem>
              <MenuIconItem value={'1-2'} keywords={['Item 1-2']} icon={<DSIcon is="infoOutlined20" />}>
                Item 1-2
              </MenuIconItem>
            </MenuItemCategory>, <MenuItemCategory title="Category 2">
              <MenuItem value={'Category 2 item 1'} keywords={['Category 2 item 1']}>
                Category 2 item 1
              </MenuItem>
              <MenuIconItem value={'Category 2 item 2'} keywords={['Category 2 item 2']} icon={<DSIcon is="infoOutlined20" />}>
                Category 2 item 2
              </MenuIconItem>
            </MenuItemCategory>]
    }} key={1}>
        Item 1
      </MenuItem>, <MenuItem submenu={{
      items: [<MenuItem key={'2-1'} value={'2-1'}>
              Item 2-1
            </MenuItem>, <MenuItem key={'2-2'} value={'2-2'}>
              Item 2-2
            </MenuItem>]
    }} key={2}>
        Item 2
      </MenuItem>, <MenuItem submenu={{
      items: [<MenuItem submenu={{
        items: [<MenuItem key={'3-1-1'} value={'3-1-1'}>
                    Item 3-1-1
                  </MenuItem>, <MenuItem key={'3-1-2'} value={'3-1-2'}>
                    Item 3-1-2
                  </MenuItem>],
        hint: `(1) will be the latest event, (2) will be the 2nd latest event...etc`
      }} key={'3-1'}>
              Item 3-1
            </MenuItem>, <MenuItem key={'3-2'} value={'3-2'}>
              Item 3-2
            </MenuItem>]
    }} key={3}>
        Item 3
      </MenuItem>]
  }
};
```


# SingleSelectFilterProps

```typescript
type SingleSelectFilterProps = Override<React.HTMLAttributes<HTMLDivElement>, PickedBaseFilterProps & ConfigProps>;
```
# SingleSelectionMenuItem

The SingleSelectionMenuItem component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { SingleSelectionMenuItem } from "@appier/aiqua-design-system

<SingleSelectionMenuItem />
```


# SingleSelectionMenuItemProps

```typescript
type SingleSelectionMenuItemProps = MenuItemProps & RadioProps;
```
# SKELETON_SHAPE

```typescript
const SKELETON_SHAPE = {
  RECT: 'RECT',
  CIRCLE: 'CIRCLE'
} as const;
```
# Skeleton

Version `v2.0.0` | [Figma specification](https://www.figma.com/design/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-%7C-Spec?node-id=1-386639&t=IISXicuMFVoTdsYp-1)

When designing user interfaces with repetitive patterns that require data loading, such as tables, card views, or widgets.
To ensure proper sizing and shaping of skeletons, it’s recommended to define their dimensions using Tailwind CSS classes or by allowing the parent container to dictate their size.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs'],
  render: (args: SkeletonProps) => <Skeleton {...args} />
};
```

## Usage

```tsx
import { Skeleton } from "@appier/aiqua-design-system

<Skeleton />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `shape` | `(typeof SKELETON_SHAPE)[keyof typeof SKELETON_SHAPE]` | No | The shape of the Skeleton |
| `width` | `number \| string` | No | The width of the skeleton, can be a number (interpreted as pixels) or a string (e.g., percentage) |
| `height` | `number \| string` | No | The height of the skeleton, can be a number (interpreted as pixels) or a string (e.g., percentage) |

## Examples

### Avatar

```tsx
export const Avatar = () => {
  return <Skeleton className="h-spacing-48 w-spacing-48 rounded-radius-full" />;
};
```

### Card

```tsx
export const Card = () => {
  return <div className="grid grid-cols-1 gap-spacing-16 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
      {Array.from({
      length: 10
    }).map((_, index) => <div key={index} className="flex flex-col gap-spacing-8 pb-spacing-16">
          <Skeleton className="h-[248px] rounded-radius-8" />
          <Skeleton />
          <Skeleton />
        </div>)}
    </div>;
};
```

### Size

```tsx
export const Size = () => {
  return <Skeleton width={280} height={100} />;
};
```

### Shape

```tsx
export const Shape = () => {
  return <Skeleton className="w-[100px]" shape="CIRCLE" />;
};
```


# SkeletonProps

```typescript
type SkeletonProps = ConfigProps & React.HTMLAttributes<HTMLDivElement>;
```
# Slider

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-%7C-Spec?type=design&node-id=1-382244&mode=design&t=RbrtjaJVejBv9hFr-4)

When the user needs to adjust something quick and easy, you can use the slider.

## Usage
<br />
#### Import
```tsx
import { Slider } from "@appier/aiqua-design-system/components";
// or
import { Slider } from "@appier/aiqua-design-system";
```

## Main Example

```tsx
export const Basic = {};
```

## Usage

```tsx
import { Slider } from "@appier/aiqua-design-system

<Slider />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `min` | `number` | No | The minimum value of the slider. @default 0 |
| `max` | `number` | No | The maximum value of the slider. @default 100 |
| `step` | `number` | No | The step value of the slider. @default 1 |
| `value` | `number` | No | The current value of the slider. Required for a controlled component. |
| `onChange` | `(value: number) => void` | No | Callback function invoked when the value of the slider changes. Required for a controlled component. |
| `defaultValue` | `number` | No | The initial value of the slider. Used when the component is not controlled. |

## Examples

### Controlled

```tsx
export const Controlled = () => {
  const [value, setValue] = useState<number>(15);
  return <div className="flex flex-col gap-spacing-16">
      Current value: {value}
      <Slider value={value} onChange={setValue} />
    </div>;
};
```

### Uncontrolled

```tsx
export const Uncontrolled = () => {
  return <Slider defaultValue={15} disabled />;
};
```

### Step

```tsx
export const Step = () => {
  return <Slider min={-200} max={200} defaultValue={100} step={100} />;
};
```

### Style

```tsx
export const Style = {
  render: args => {
    return <Slider {...args} className="w-[300px]" />;
  }
};
```


# SliderProps

```typescript
type SliderProps = {
  /**
   * The minimum value of the slider.
   * @default 0
   */
  min?: number;

  /**
   * The maximum value of the slider.
   * @default 100
   */
  max?: number;

  /**
   * The step value of the slider.
   * @default 1
   */
  step?: number;

  /**
   * The current value of the slider. Required for a controlled component.
   */
  value?: number;

  /**
   * Callback function invoked when the value of the slider changes. Required for a controlled component.
   */
  onChange?: (value: number) => void;

  /**
   * The initial value of the slider. Used when the component is not controlled.
   */
  defaultValue?: number;
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'>;
```
# SORT_ORDER

```typescript
const SORT_ORDER = {
  ASC: 'asc',
  DESC: 'desc'
} as const;
```
# SortDirection

```typescript
type SortDirection = (typeof SORT_ORDER)[keyof typeof SORT_ORDER];
```
# SortOptions

```typescript
interface SortOptions {
  sortBy?: string;
  sortable?: boolean;
  sortDirection?: SortDirection;
  onSort?: ({
    event,
    sortBy,
    sortDirection
  }: {
    event: React.MouseEvent<HTMLDivElement>;
    sortBy: string;
    sortDirection: SortDirection;
  }) => void;
}
```
# SpinnerProps

```typescript
type SpinnerProps = React.HTMLAttributes<HTMLDivElement> & StyleProps;
```
# STACKED_BAR_COLOR_SETS

```typescript
const STACKED_BAR_COLOR_SETS = {
  gradient_blue_50: 'gradient_blue_50',
  gradient_azure_50: 'gradient_azure_50',
  gradient_orange_50: 'gradient_orange_50',
  gradient_yellow_50: 'gradient_yellow_50',
  gradient_green_50: 'gradient_green_50',
  gradient_teal_50: 'gradient_teal_50',
  gradient_purple_50: 'gradient_purple_50',
  gradient_fuchsia_50: 'gradient_fuchsia_50',
  gradient_red_50: 'gradient_red_50',
  gradient_gray_50: 'gradient_gray_50',
  gradient_blue_40: 'gradient_blue_40',
  gradient_azure_40: 'gradient_azure_40',
  gradient_orange_40: 'gradient_orange_40',
  gradient_yellow_40: 'gradient_yellow_40',
  gradient_green_40: 'gradient_green_40',
  gradient_teal_40: 'gradient_teal_40',
  gradient_purple_40: 'gradient_purple_40',
  gradient_fuchsia_40: 'gradient_fuchsia_40',
  gradient_red_40: 'gradient_red_40',
  gradient_gray_40: 'gradient_gray_40'
} as const;
```
# StackedBar

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/b6vo0neB2gcr0LyDoeN3m0/%5BRegular%5D-Push-Campaign-experiment?node-id=284%3A197040&mode=dev)

The StackedBar component is a graphical tool for visualizing segmented data in a compact, stacked bar format. It is primarily used to represent different data segments within a single bar, showcasing comparative metrics in an intuitive and visually distinct manner.

## Usage
#### Import

```tsx
import { StackedBar } from "@appier/aiqua-design-system/components";
// or
import { StackedBar } from "@appier/aiqua-design-system";
```

## Props

Also support all valid `HTMLDivElement` props

## Main Example

```tsx
export const Normal = {};
```

## Usage

```tsx
import { StackedBar } from "@appier/aiqua-design-system

<StackedBar />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `stacks` | `Stack[]` | Yes | Defines the stacks of the StackedBar. It should be set as an array of objects with the following properties: `percentage` (required), `color`, `label`. |
| `size` | `(typeof SIZES)[keyof typeof SIZES]` | No | Defines the size of the StackedBar. The StackedBar will take the default size if the value is undefined. |

## Examples

### Size

```tsx
export const Size = () => {
  return <div className="flex flex-col items-center gap-spacing-16">
      <StackedBar size={SIZES.SMALL} stacks={stacks} />
      <StackedBar size={SIZES.NORMAL} stacks={stacks} />
    </div>;
};
```

### Color Set Default

```tsx
export const ColorSetDefault = () => {
  return <StackedBar stacks={[{
    percentage: 1
  }, {
    percentage: 1
  }, {
    percentage: 10
  }, {
    percentage: 10
  }, {
    percentage: 10
  }, {
    percentage: 10
  }, {
    percentage: 10
  }, {
    percentage: 10
  }, {
    percentage: 10
  }, {
    percentage: 10
  }, {
    percentage: 18
  }]} />;
};
```

### Color Set Custom

```tsx
export const ColorSetCustom = () => {
  return <StackedBar stacks={[{
    percentage: 33,
    color: STACKED_BAR_COLOR_SETS.gradient_gray_50
  }, {
    percentage: 33,
    color: STACKED_BAR_COLOR_SETS.gradient_blue_50
  }, {
    percentage: 34,
    color: STACKED_BAR_COLOR_SETS.gradient_azure_50
  }]} />;
};
```


# StackedBarProps

```typescript
type StackedBarProps = ConfigProps & React.HTMLAttributes<HTMLDivElement>;
```
# StackedColumnChart

The StackedColumnChart component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const StackedColumnChartMultipleMetrics = {
  render: Template
};
```

## Usage

```tsx
import { StackedColumnChart } from "@appier/aiqua-design-system

<StackedColumnChart />
```


# StackedColumnChartOptions

```typescript
type StackedColumnChartOptions = BasicChartUiMetricsInterface & {
  axis?: StackedColumnChartTimestampMetric[];
};
```
# StackedColumnChartTooltipOptions

```typescript
type StackedColumnChartTooltipOptions = Pick<BasicChartTooltipOptions, 'tooltipSubtitle'> & {
  timeDimensions?: StackedColumnChartTooltipMetric[];
};
```
# Status

```typescript
type Status = (typeof STATUS)[keyof typeof STATUS];
```
# StatusProps

```typescript
interface StatusProps {
  /**
   * Defines the color of the Status. The Status will take the default color if the value is `undefined`.
   */
  color?: (typeof COLOR)[keyof typeof COLOR];
  /**
   * Define the Status text.
   */
  text?: React.ReactNode;
}
```
# Step

The Step component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { Step } from "@appier/aiqua-design-system

<Step />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `stepStatus` | `StepStatus` | Yes | The status of current step, this will be used to decide what icon to render. |
| `shiftHeight` | `number` | No | ShiftHeight will be calculate automatically, based on the detected height of the "steppers" component. |
| `tooltip` | `string` | No | The content of tooltip, providing the prop to enable tooltip. |
| `index` | `number` | No | The index of current step |
| `title` | `string \| ReactNode` | No | The label of current step. |
| `icon` | `ReactNode` | No | The custom icon for the step |
| `isLast` | `boolean` | No | Wether the step is the last node. |
| `onClick` | `() => void` | No | The click action of the step, providing it to enable the functionality @returns |

## Examples

### Icon Only

```tsx
export const IconOnly = {
  render: Template,
  args: {
    steps: [{
      stepStatus: StepStatus.SUCCESS
    }, {
      stepStatus: StepStatus.WARNING
    }, {
      stepStatus: StepStatus.ERROR
    }, {
      stepStatus: StepStatus.CURRENT
    }, {
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Status

```tsx
export const WithStatus = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2',
      stepStatus: StepStatus.WARNING
    }, {
      title: 'Label 3',
      stepStatus: StepStatus.ERROR
    }, {
      title: 'Label 4',
      stepStatus: StepStatus.CURRENT
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Tooltip

```tsx
export const WithTooltip = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2',
      stepStatus: StepStatus.SUCCESS,
      tooltip: 'Completed'
    }, {
      title: 'Label 3',
      stepStatus: StepStatus.ERROR,
      tooltip: 'Fix the error to continue'
    }, {
      title: 'Label 4',
      stepStatus: StepStatus.CURRENT
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Long Name

```tsx
export const WithLongName = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2 has long long long long names',
      stepStatus: StepStatus.SUCCESS,
      tooltip: 'Completed'
    }, {
      title: 'Label 3',
      stepStatus: StepStatus.ERROR,
      tooltip: 'Fix the error to continue'
    }, {
      title: 'A long long long long long long long long long long long Step 4',
      stepStatus: StepStatus.CURRENT
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Many Long Name

```tsx
export const WithManyLongName = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2 has long long long long names',
      stepStatus: StepStatus.WARNING,
      tooltip: 'Completed'
    }, {
      title: 'Label 2 has super super suppppper long long long names',
      stepStatus: StepStatus.ERROR,
      tooltip: 'Fix the error to continue'
    }, {
      title: 'A long long long long long long long long long long long Step 4',
      stepStatus: StepStatus.CURRENT
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Custom Icon

```tsx
export const WithCustomIcon = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2',
      stepStatus: StepStatus.WARNING,
      tooltip: 'Completed',
      icon: <LockIcon size={22} />
    }, {
      title: 'Label 2 has super super suppppper long long long names',
      stepStatus: StepStatus.ERROR,
      tooltip: 'Fix the error to continue'
    }, {
      title: 'A long long long long long long long long long long long Step 4',
      stepStatus: StepStatus.CURRENT,
      icon: <SuggestionInfoIcon size={22} />
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```


# Stepper

The Stepper component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { Stepper } from "@appier/aiqua-design-system

<Stepper />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `steps` | `StepProps[]` | Yes | The array of "Step", please refer to Step component for more info. |

## Examples

### Icon Only

```tsx
export const IconOnly = {
  render: Template,
  args: {
    steps: [{
      stepStatus: StepStatus.SUCCESS
    }, {
      stepStatus: StepStatus.WARNING
    }, {
      stepStatus: StepStatus.ERROR
    }, {
      stepStatus: StepStatus.CURRENT
    }, {
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Status

```tsx
export const WithStatus = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2',
      stepStatus: StepStatus.WARNING
    }, {
      title: 'Label 3',
      stepStatus: StepStatus.ERROR
    }, {
      title: 'Label 4',
      stepStatus: StepStatus.CURRENT
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Tooltip

```tsx
export const WithTooltip = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2',
      stepStatus: StepStatus.SUCCESS,
      tooltip: 'Completed'
    }, {
      title: 'Label 3',
      stepStatus: StepStatus.ERROR,
      tooltip: 'Fix the error to continue'
    }, {
      title: 'Label 4',
      stepStatus: StepStatus.CURRENT
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Long Name

```tsx
export const WithLongName = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2 has long long long long names',
      stepStatus: StepStatus.SUCCESS,
      tooltip: 'Completed'
    }, {
      title: 'Label 3',
      stepStatus: StepStatus.ERROR,
      tooltip: 'Fix the error to continue'
    }, {
      title: 'A long long long long long long long long long long long Step 4',
      stepStatus: StepStatus.CURRENT
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Many Long Name

```tsx
export const WithManyLongName = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2 has long long long long names',
      stepStatus: StepStatus.WARNING,
      tooltip: 'Completed'
    }, {
      title: 'Label 2 has super super suppppper long long long names',
      stepStatus: StepStatus.ERROR,
      tooltip: 'Fix the error to continue'
    }, {
      title: 'A long long long long long long long long long long long Step 4',
      stepStatus: StepStatus.CURRENT
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```

### With Custom Icon

```tsx
export const WithCustomIcon = {
  render: Template,
  args: {
    steps: [{
      title: 'Label 1',
      stepStatus: StepStatus.SUCCESS,
      onClick: () => {
        console.log('clicked');
      }
    }, {
      title: 'Label 2',
      stepStatus: StepStatus.WARNING,
      tooltip: 'Completed',
      icon: <LockIcon size={22} />
    }, {
      title: 'Label 2 has super super suppppper long long long names',
      stepStatus: StepStatus.ERROR,
      tooltip: 'Fix the error to continue'
    }, {
      title: 'A long long long long long long long long long long long Step 4',
      stepStatus: StepStatus.CURRENT,
      icon: <SuggestionInfoIcon size={22} />
    }, {
      title: 'Label 5',
      stepStatus: StepStatus.PENDING
    }]
  }
};
```


# StepperInput

Version `v2.0.2`| [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=33401-448681&t=AJpHD5HQ2KyonQSH-0)
StepperInput is a numeric input field that supports the **type="number"** attribute. It provides a convenient way for users to control the value by using plus and minus buttons located before and after the input field. These intuitive controls allow users to easily increment or decrement the value with a simple click.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { StepperInput } from "@appier/aiqua-design-system

<StepperInput />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [inputValue, setInputValue] = React.useState('0');
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <StepperInput label="Step (Uncontrolled)" defaultValue="0" />
      <StepperInput isFullWidth label="Step (Controlled)" value={inputValue} onChange={setInputValue} />
    </div>;
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  args: {
    hint: 'Hint',
    label: 'Label'
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```

### Error

```tsx
export const Error = {
  args: {
    error: 'Error text'
  }
};
```

### With Decimal Places

```tsx
export const WithDecimalPlaces = {
  args: {
    decimalPlaces: 2
  }
};
```

### Min And Max

```tsx
export const MinAndMax = {
  args: {
    min: 0,
    max: 99
  }
};
```


# StepperInputProps

```typescript
type StepperInputProps = Override<Override<InputHTMLAttributes<HTMLInputElement>, InputProps<string>>, ConfigProps>;
```
# StepProps

```typescript
type StepProps = {
  /**
   * The status of current step, this will be used to decide what icon to render.
   */
  stepStatus: StepStatus;
  /**
   * ShiftHeight will be calculate automatically, based on the detected height of the "steppers" component.
   */
  shiftHeight?: number;
  /**
   * The content of tooltip, providing the prop to enable tooltip.
   */
  tooltip?: string;
  /**
   * The index of current step
   */
  index?: number;
  /**
   * The label of current step.
   */
  title?: string | ReactNode;
  /**
   * The custom icon for the step
   */
  icon?: ReactNode;
  /**
   * Wether the step is the last node.
   */
  isLast?: boolean;
  /**
   * The click action of the step, providing it to enable the functionality
   * @returns
   */
  onClick?: () => void;
} & Partial<Pick<HTMLDivElement, 'className'>>;
```
# StickyOptions

```typescript
interface StickyOptions {
  stickyHeader?: boolean;
  stickyColumns?: number;
  summaryRowPosition?: StickyPosition;
}
```
# StyleProps

```typescript
interface StyleProps {
  /**
   * Defines the color of the badge. The badge will take the default color if the value is `undefined`.
   */
  color?: (typeof COLOR)[keyof typeof COLOR];
  /**
   * Defines the colorStyle of the badge. The badge will take the default style if the value is `undefined`.
   */
  colorStyle?: (typeof STYLE)[keyof typeof STYLE];
}
```
# SubMenuItemProps

```typescript
interface SubMenuItemProps extends Pick<NestMenuItemProps, 'selectedOptions' | 'searchTerm'>, Omit<MenuItemProps, 'children'> {
  option: MenuOption;
  flattenOptionsItems: MenuOption[];
  handleMenuChange: (option: MenuOption) => void;
  handleSelectAllChildren: (option: MenuOption) => void;
  handleCancelAllChildren: (option: MenuOption) => void;
}
```
# Switch

The SwitchGroup component allows users to select multiple options from a group of switches.

## Main Example

```tsx
export const NoTitle = {
  render: DirectionTemplate
};
```

## Usage

```tsx
import { Switch } from "@appier/aiqua-design-system

<Switch />
```

## Examples

### Top Title

```tsx
export const TopTitle = {
  render: DirectionTemplate,
  args: {
    titlePosition: 'top',
    title: 'Title'
  }
};
```

### Left Title

```tsx
export const LeftTitle = {
  render: DirectionTemplate,
  args: {
    titlePosition: 'left',
    title: 'Title'
  }
};
```


# SwitchGroup

The SwitchGroup component allows users to select multiple options from a group of switches.

## Main Example

```tsx
export const NoTitle = {
  render: DirectionTemplate
};
```

## Usage

```tsx
import { SwitchGroup } from "@appier/aiqua-design-system

<SwitchGroup />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `titlePosition` | `(typeof TITLE_POSITION)[keyof typeof TITLE_POSITION]` | No | Defines position of switch group's title, The component will take the default titlePosition if the value is `undefined`. |
| `title` | `React.ReactNode` | No | Defined title of switch group. |

## Examples

### Top Title

```tsx
export const TopTitle = {
  render: DirectionTemplate,
  args: {
    titlePosition: 'top',
    title: 'Title'
  }
};
```

### Left Title

```tsx
export const LeftTitle = {
  render: DirectionTemplate,
  args: {
    titlePosition: 'left',
    title: 'Title'
  }
};
```


# SwitchGroupProps

```typescript
type SwitchGroupProps = ConfigProps & React.HTMLAttributes<HTMLDivElement>;
```
# SwitchProps

```typescript
type SwitchProps = SwitchBaseProps;
```
# Tab

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=1-426409&mode=design&t=GQfItnp8WhGUB2u3-0)
The Tabs component streamline user interfaces by segmenting related content into separate views, allowing swift and intuitive navigation between them.

## Main Example

```tsx
export const Normal = () => {
  return <Tabs defaultValue={'template-1'}>
      <TabList>
        <Tab value="template-1" label="template-1" />
        <Tab value="template-2" label="template-2" />
        <Tab value="template-3" label="template-3" />
        <Tab value="template-4" label="template-4" />
      </TabList>
      <TabPanel value="template-1">template-1</TabPanel>
      <TabPanel value="template-2">template-2</TabPanel>
      <TabPanel value="template-3">template-3</TabPanel>
      <TabPanel value="template-4">template-4</TabPanel>
    </Tabs>;
};
```

## Usage

```tsx
import { Tab } from "@appier/aiqua-design-system

<Tab />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [currentTab, setCurrentTab] = useState('tab-2');
  return <div style={{
    display: 'flex',
    flexDirection: 'column',
    gap: '4px'
  }}>
      <Title>Tabs with Controlled</Title>
      <Tabs value={currentTab} onChange={setCurrentTab}>
        <TabList>
          <Tab value="tab-1" label="Tab 1" />
          <Tab value="tab-2" label="Tab 2" />
          <Tab value="tab-3" label="Tab 3" />
        </TabList>
        <TabPanel value="tab-1">Tab 1</TabPanel>
        <TabPanel value="tab-2">Tab 2</TabPanel>
        <TabPanel value="tab-3">Tab 3</TabPanel>
      </Tabs>
      <Title>Tabs with Uncontrolled</Title>
      <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" />
          <Tab value="tab-2" label="Tab 2" />
          <Tab value="tab-3" label="Tab 3" />
        </TabList>
        <TabPanel value="tab-1">Tab 1</TabPanel>
        <TabPanel value="tab-2">Tab 2</TabPanel>
        <TabPanel value="tab-3">Tab 3</TabPanel>
      </Tabs>
    </div>;
};
```

### Default Tab

```tsx
export const DefaultTab = {
  render: Template
};
```

### Contained Tab

```tsx
export const ContainedTab = {
  render: Template,
  args: {
    variant: 'contained'
  }
};
```

### Scrollable

```tsx
export const Scrollable = () => <div style={{
  width: '480px',
  margin: 'auto'
}}>
    <Tabs scrollable variant="contained">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
        <Tab value="tab-3" label="Tab 3" />
        <Tab value="tab-4" label="Tab 4" />
        <Tab value="tab-5" label="Tab 5" />
        <Tab value="tab-6" label="Tab 6" />
        <Tab value="tab-7" label="Tab 7" />
        <Tab value="tab-8" label="Tab 8" />
        <Tab value="tab-9" label="Tab 9" />
        <Tab value="tab-10" label="Tab 10" />
        <Tab value="tab-11" label="Tab 11" />
        <Tab value="tab-12" label="Tab 12" />
      </TabList>
    </Tabs>
  </div>;
```

### Label

```tsx
export const Label = () => <div style={{
  display: 'flex',
  flexDirection: 'column',
  gap: '4px'
}}>
    <Tabs defaultValue="tab-1">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
      </TabList>
    </Tabs>
    <Tabs variant="contained" defaultValue="tab-1">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
      </TabList>
    </Tabs>
  </div>;
```

### With Badge

```tsx
export const WithBadge = {
  render: args => {
    return <Tabs defaultValue="tab-1" variant="contained">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 0,
          variant: 'number'
        }} />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} />
        </TabList>
      </Tabs>;
  }
};
```

### Error

```tsx
export const Error = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 0,
          variant: 'number'
        }} error />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} error />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} error />
        </TabList>
      </Tabs>;
  }
};
```

### Warning

```tsx
export const Warning = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 19,
          variant: 'number'
        }} withWarning />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} withWarning error />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} withWarning />
        </TabList>
      </Tabs>;
  }
};
```

### With Icon

```tsx
export const WithIcon = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-1" label="Tab 1" badgeProps={{
          content: 19,
          variant: 'number'
        }} withWarning />
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} withWarning error />
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} withWarning />
        </TabList>
      </Tabs>;
  }
};
```


# TABLE_CELL_MIN_WIDTH

```typescript
const TABLE_CELL_MIN_WIDTH = 64;
```
# TABLE_HEADER_ROW_HEIGHT

```typescript
const TABLE_HEADER_ROW_HEIGHT = 40;
```
# TableProps

```typescript
type TableProps = React.HTMLAttributes<HTMLDivElement> & StyleProps & ConfigProps;
```
# TablesDataInterface

```typescript
interface TablesDataInterface {
  cols: Col[];
  rows: Row[];
}
```
# TableStatus

```typescript
interface TableStatus {
  isLoading?: boolean;
  isEmpty?: boolean;
  preventAutoHide?: boolean;
  renderEmptyView?: () => React.ReactNode;
}
```
# TabList

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=1-426409&mode=design&t=GQfItnp8WhGUB2u3-0)
The Tabs component streamline user interfaces by segmenting related content into separate views, allowing swift and intuitive navigation between them.

## Main Example

```tsx
export const Normal = () => {
  return <Tabs defaultValue={'template-1'}>
      <TabList>
        <Tab value="template-1" label="template-1" />
        <Tab value="template-2" label="template-2" />
        <Tab value="template-3" label="template-3" />
        <Tab value="template-4" label="template-4" />
      </TabList>
      <TabPanel value="template-1">template-1</TabPanel>
      <TabPanel value="template-2">template-2</TabPanel>
      <TabPanel value="template-3">template-3</TabPanel>
      <TabPanel value="template-4">template-4</TabPanel>
    </Tabs>;
};
```

## Usage

```tsx
import { TabList } from "@appier/aiqua-design-system

<TabList />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [currentTab, setCurrentTab] = useState('tab-2');
  return <div style={{
    display: 'flex',
    flexDirection: 'column',
    gap: '4px'
  }}>
      <Title>Tabs with Controlled</Title>
      <Tabs value={currentTab} onChange={setCurrentTab}>
        <TabList>
          <Tab value="tab-1" label="Tab 1" />
          <Tab value="tab-2" label="Tab 2" />
          <Tab value="tab-3" label="Tab 3" />
        </TabList>
        <TabPanel value="tab-1">Tab 1</TabPanel>
        <TabPanel value="tab-2">Tab 2</TabPanel>
        <TabPanel value="tab-3">Tab 3</TabPanel>
      </Tabs>
      <Title>Tabs with Uncontrolled</Title>
      <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" />
          <Tab value="tab-2" label="Tab 2" />
          <Tab value="tab-3" label="Tab 3" />
        </TabList>
        <TabPanel value="tab-1">Tab 1</TabPanel>
        <TabPanel value="tab-2">Tab 2</TabPanel>
        <TabPanel value="tab-3">Tab 3</TabPanel>
      </Tabs>
    </div>;
};
```

### Default Tab

```tsx
export const DefaultTab = {
  render: Template
};
```

### Contained Tab

```tsx
export const ContainedTab = {
  render: Template,
  args: {
    variant: 'contained'
  }
};
```

### Scrollable

```tsx
export const Scrollable = () => <div style={{
  width: '480px',
  margin: 'auto'
}}>
    <Tabs scrollable variant="contained">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
        <Tab value="tab-3" label="Tab 3" />
        <Tab value="tab-4" label="Tab 4" />
        <Tab value="tab-5" label="Tab 5" />
        <Tab value="tab-6" label="Tab 6" />
        <Tab value="tab-7" label="Tab 7" />
        <Tab value="tab-8" label="Tab 8" />
        <Tab value="tab-9" label="Tab 9" />
        <Tab value="tab-10" label="Tab 10" />
        <Tab value="tab-11" label="Tab 11" />
        <Tab value="tab-12" label="Tab 12" />
      </TabList>
    </Tabs>
  </div>;
```

### Label

```tsx
export const Label = () => <div style={{
  display: 'flex',
  flexDirection: 'column',
  gap: '4px'
}}>
    <Tabs defaultValue="tab-1">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
      </TabList>
    </Tabs>
    <Tabs variant="contained" defaultValue="tab-1">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
      </TabList>
    </Tabs>
  </div>;
```

### With Badge

```tsx
export const WithBadge = {
  render: args => {
    return <Tabs defaultValue="tab-1" variant="contained">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 0,
          variant: 'number'
        }} />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} />
        </TabList>
      </Tabs>;
  }
};
```

### Error

```tsx
export const Error = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 0,
          variant: 'number'
        }} error />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} error />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} error />
        </TabList>
      </Tabs>;
  }
};
```

### Warning

```tsx
export const Warning = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 19,
          variant: 'number'
        }} withWarning />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} withWarning error />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} withWarning />
        </TabList>
      </Tabs>;
  }
};
```

### With Icon

```tsx
export const WithIcon = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-1" label="Tab 1" badgeProps={{
          content: 19,
          variant: 'number'
        }} withWarning />
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} withWarning error />
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} withWarning />
        </TabList>
      </Tabs>;
  }
};
```


# TabListProps

```typescript
interface TabListProps {
  /**
   * className applied to the root element.
   */
  className?: string;
  /**
   * The list of `Tab` component to display.
   */
  children: React.ReactNode;
}
```
# TabPanel

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=1-426409&mode=design&t=GQfItnp8WhGUB2u3-0)
The Tabs component streamline user interfaces by segmenting related content into separate views, allowing swift and intuitive navigation between them.

## Main Example

```tsx
export const Normal = () => {
  return <Tabs defaultValue={'template-1'}>
      <TabList>
        <Tab value="template-1" label="template-1" />
        <Tab value="template-2" label="template-2" />
        <Tab value="template-3" label="template-3" />
        <Tab value="template-4" label="template-4" />
      </TabList>
      <TabPanel value="template-1">template-1</TabPanel>
      <TabPanel value="template-2">template-2</TabPanel>
      <TabPanel value="template-3">template-3</TabPanel>
      <TabPanel value="template-4">template-4</TabPanel>
    </Tabs>;
};
```

## Usage

```tsx
import { TabPanel } from "@appier/aiqua-design-system

<TabPanel />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [currentTab, setCurrentTab] = useState('tab-2');
  return <div style={{
    display: 'flex',
    flexDirection: 'column',
    gap: '4px'
  }}>
      <Title>Tabs with Controlled</Title>
      <Tabs value={currentTab} onChange={setCurrentTab}>
        <TabList>
          <Tab value="tab-1" label="Tab 1" />
          <Tab value="tab-2" label="Tab 2" />
          <Tab value="tab-3" label="Tab 3" />
        </TabList>
        <TabPanel value="tab-1">Tab 1</TabPanel>
        <TabPanel value="tab-2">Tab 2</TabPanel>
        <TabPanel value="tab-3">Tab 3</TabPanel>
      </Tabs>
      <Title>Tabs with Uncontrolled</Title>
      <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" />
          <Tab value="tab-2" label="Tab 2" />
          <Tab value="tab-3" label="Tab 3" />
        </TabList>
        <TabPanel value="tab-1">Tab 1</TabPanel>
        <TabPanel value="tab-2">Tab 2</TabPanel>
        <TabPanel value="tab-3">Tab 3</TabPanel>
      </Tabs>
    </div>;
};
```

### Default Tab

```tsx
export const DefaultTab = {
  render: Template
};
```

### Contained Tab

```tsx
export const ContainedTab = {
  render: Template,
  args: {
    variant: 'contained'
  }
};
```

### Scrollable

```tsx
export const Scrollable = () => <div style={{
  width: '480px',
  margin: 'auto'
}}>
    <Tabs scrollable variant="contained">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
        <Tab value="tab-3" label="Tab 3" />
        <Tab value="tab-4" label="Tab 4" />
        <Tab value="tab-5" label="Tab 5" />
        <Tab value="tab-6" label="Tab 6" />
        <Tab value="tab-7" label="Tab 7" />
        <Tab value="tab-8" label="Tab 8" />
        <Tab value="tab-9" label="Tab 9" />
        <Tab value="tab-10" label="Tab 10" />
        <Tab value="tab-11" label="Tab 11" />
        <Tab value="tab-12" label="Tab 12" />
      </TabList>
    </Tabs>
  </div>;
```

### Label

```tsx
export const Label = () => <div style={{
  display: 'flex',
  flexDirection: 'column',
  gap: '4px'
}}>
    <Tabs defaultValue="tab-1">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
      </TabList>
    </Tabs>
    <Tabs variant="contained" defaultValue="tab-1">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
      </TabList>
    </Tabs>
  </div>;
```

### With Badge

```tsx
export const WithBadge = {
  render: args => {
    return <Tabs defaultValue="tab-1" variant="contained">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 0,
          variant: 'number'
        }} />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} />
        </TabList>
      </Tabs>;
  }
};
```

### Error

```tsx
export const Error = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 0,
          variant: 'number'
        }} error />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} error />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} error />
        </TabList>
      </Tabs>;
  }
};
```

### Warning

```tsx
export const Warning = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 19,
          variant: 'number'
        }} withWarning />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} withWarning error />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} withWarning />
        </TabList>
      </Tabs>;
  }
};
```

### With Icon

```tsx
export const WithIcon = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-1" label="Tab 1" badgeProps={{
          content: 19,
          variant: 'number'
        }} withWarning />
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} withWarning error />
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} withWarning />
        </TabList>
      </Tabs>;
  }
};
```


# TabPanelProps

```typescript
interface TabPanelProps {
  /**
   * The id of the tab that this panel is associated with.
   */
  value: string;
  /**
   * className applied to the root element.
   */
  className?: string;
  children?: React.ReactNode;
}
```
# TabProps

```typescript
interface TabProps {
  /**
   * The label of the Tab.
   */
  label: React.ReactNode;
  /**
   * The value of the Tab.
   */
  value: string;
  /**
   * Callback fired when the tab be clicked.
   */
  onClick?: (newValue: string, e: React.MouseEvent<HTMLDivElement>) => void;
  /**
   * The className of the Tab.
   */
  className?: string;
  /**
   * The props of the inner Badge component.
   */
  badgeProps?: BadgeProps;
  /**
   * The error of the Tab.
   */
  error?: React.ReactNode;
  /**
   * The tabIndex of the Tab.
   */
  tabIndex?: number;
  /**
   * icon on the left
   */
  tabIcon?: ReactNode;
  /**
   * Decide whether the tab should display warning icon.
   */
  withWarning?: boolean;
  /**
   * The reference to the underlying DOM element.
   */
  ref?: React.Ref<HTMLDivElement>;
}
```
# Tabs

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?type=design&node-id=1-426409&mode=design&t=GQfItnp8WhGUB2u3-0)
The Tabs component streamline user interfaces by segmenting related content into separate views, allowing swift and intuitive navigation between them.

## Main Example

```tsx
export const Normal = () => {
  return <Tabs defaultValue={'template-1'}>
      <TabList>
        <Tab value="template-1" label="template-1" />
        <Tab value="template-2" label="template-2" />
        <Tab value="template-3" label="template-3" />
        <Tab value="template-4" label="template-4" />
      </TabList>
      <TabPanel value="template-1">template-1</TabPanel>
      <TabPanel value="template-2">template-2</TabPanel>
      <TabPanel value="template-3">template-3</TabPanel>
      <TabPanel value="template-4">template-4</TabPanel>
    </Tabs>;
};
```

## Usage

```tsx
import { Tabs } from "@appier/aiqua-design-system

<Tabs />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [currentTab, setCurrentTab] = useState('tab-2');
  return <div style={{
    display: 'flex',
    flexDirection: 'column',
    gap: '4px'
  }}>
      <Title>Tabs with Controlled</Title>
      <Tabs value={currentTab} onChange={setCurrentTab}>
        <TabList>
          <Tab value="tab-1" label="Tab 1" />
          <Tab value="tab-2" label="Tab 2" />
          <Tab value="tab-3" label="Tab 3" />
        </TabList>
        <TabPanel value="tab-1">Tab 1</TabPanel>
        <TabPanel value="tab-2">Tab 2</TabPanel>
        <TabPanel value="tab-3">Tab 3</TabPanel>
      </Tabs>
      <Title>Tabs with Uncontrolled</Title>
      <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" />
          <Tab value="tab-2" label="Tab 2" />
          <Tab value="tab-3" label="Tab 3" />
        </TabList>
        <TabPanel value="tab-1">Tab 1</TabPanel>
        <TabPanel value="tab-2">Tab 2</TabPanel>
        <TabPanel value="tab-3">Tab 3</TabPanel>
      </Tabs>
    </div>;
};
```

### Default Tab

```tsx
export const DefaultTab = {
  render: Template
};
```

### Contained Tab

```tsx
export const ContainedTab = {
  render: Template,
  args: {
    variant: 'contained'
  }
};
```

### Scrollable

```tsx
export const Scrollable = () => <div style={{
  width: '480px',
  margin: 'auto'
}}>
    <Tabs scrollable variant="contained">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
        <Tab value="tab-3" label="Tab 3" />
        <Tab value="tab-4" label="Tab 4" />
        <Tab value="tab-5" label="Tab 5" />
        <Tab value="tab-6" label="Tab 6" />
        <Tab value="tab-7" label="Tab 7" />
        <Tab value="tab-8" label="Tab 8" />
        <Tab value="tab-9" label="Tab 9" />
        <Tab value="tab-10" label="Tab 10" />
        <Tab value="tab-11" label="Tab 11" />
        <Tab value="tab-12" label="Tab 12" />
      </TabList>
    </Tabs>
  </div>;
```

### Label

```tsx
export const Label = () => <div style={{
  display: 'flex',
  flexDirection: 'column',
  gap: '4px'
}}>
    <Tabs defaultValue="tab-1">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
      </TabList>
    </Tabs>
    <Tabs variant="contained" defaultValue="tab-1">
      <TabList>
        <Tab value="tab-1" label="Tab 1" />
        <Tab value="tab-2" label="Tab 2" />
      </TabList>
    </Tabs>
  </div>;
```

### With Badge

```tsx
export const WithBadge = {
  render: args => {
    return <Tabs defaultValue="tab-1" variant="contained">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 0,
          variant: 'number'
        }} />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} />
        </TabList>
      </Tabs>;
  }
};
```

### Error

```tsx
export const Error = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 0,
          variant: 'number'
        }} error />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} error />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} error />
        </TabList>
      </Tabs>;
  }
};
```

### Warning

```tsx
export const Warning = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab value="tab-1" label="Tab 1" badgeProps={{
          content: 19,
          variant: 'number'
        }} withWarning />
          <Tab value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} withWarning error />
          <Tab value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} withWarning />
        </TabList>
      </Tabs>;
  }
};
```

### With Icon

```tsx
export const WithIcon = {
  render: args => {
    return <Tabs defaultValue="tab-1">
        <TabList>
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-1" label="Tab 1" badgeProps={{
          content: 19,
          variant: 'number'
        }} withWarning />
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-2" label="Tab 2" badgeProps={{
          content: 20,
          variant: 'number',
          color: 'primary'
        }} withWarning error />
          <Tab tabIcon={<DSIcon is="questionSolid20" />} value="tab-3" label="Tab 3" badgeProps={{
          content: 'info',
          variant: 'text',
          color: 'info'
        }} withWarning />
        </TabList>
      </Tabs>;
  }
};
```


# TabsProps

```typescript
interface TabsProps {
  /**
   * The currently selected value in the Tabs.
   */
  value?: string;
  /**
   * Callback fired when the value changes.
   */
  onChange?: (newValue: string) => void;
  /**
   * The initial value of the Tabs when used in an uncontrolled component.
   */
  defaultValue?: string;
  /**
   * The variant of the Tabs.
   */
  variant?: (typeof VARIANT)[keyof typeof VARIANT];
  /**
   * If `true`, the Tabs will be scrollable. Only in `contained` variant.
   */
  scrollable?: boolean;
  /**
   * className applied to the root element.
   */
  className?: string;
  /**
   * Assign `TabList` and `TabPanel` component.
   */
  children: React.ReactNode;
}
```
# Tag

The Tag component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const NonClickableTag = {
  render: Template
};
```

## Usage

```tsx
import { Tag } from "@appier/aiqua-design-system

<Tag />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `clickable` | `boolean` | No | If `true`, will be set button role, even if the onClick prop is not defined. |
| `editable` | `boolean` | No | Whether the Tag is editable |
| `removable` | `boolean` | No | Whether the Tag can be removed or closed |
| `error` | `boolean` | No | Mark the tag as failed or warning. |
| `tooltipContent` | `string \| React.ReactNode` | No | Allow tooltip with content if need. |
| `disabled` | `boolean` | No | If `true`, the tag will be disabled. |
| `onClose` | `(e: React.MouseEvent<HTMLOrSVGElement>) => void` | No | Callback executed when tag is removed or closed |
| `onClick` | `(e: React.MouseEvent<TagElement>) => void` | No | Callback executed when tag is clicked |

## Examples

### Removable With Non Clickable Tag

```tsx
export const RemovableWithNonClickableTag = {
  render: Template,
  args: {
    removable: true
  },
  parameters: {
    controls: {
      exclude: ['clickable', 'removable']
    }
  }
};
```

### Clickable Tag

```tsx
export const ClickableTag = {
  render: Template,
  args: {
    clickable: true
  },
  parameters: {
    controls: {
      exclude: ['removable', 'clickable']
    }
  }
};
```

### Clickable With Removable Tag

```tsx
export const ClickableWithRemovableTag = {
  render: Template,
  args: {
    ...RemovableWithNonClickableTag.args,
    ...ClickableTag.args
  },
  parameters: {
    controls: {
      exclude: ['removable', 'clickable']
    }
  }
};
```


# TagInput

TagInput is an interactive input component that allows users to add tags by typing or selecting from a dropdown menu. It facilitates the creation of tags by enabling users to enter tag names directly or choose from a predefined list, enhancing the user experience when selecting and managing tags.ement that offers a straightforward and adaptable text input field. It is essential for gathering user input in diverse contexts.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { TagInput } from "@appier/aiqua-design-system

<TagInput />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [currTags, setCurrTags] = React.useState<string[]>(['Tag01', 'Tag02']);
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <TagInput label="Tags (Uncontrolled)" width={300} defaultValue={['Tag01', 'Tag02']} />
      <TagInput label="Tags (Controlled)" value={currTags} onChange={setCurrTags} width={300} />
    </div>;
};
```

### Type Of Value

```tsx
export const TypeOfValue = () => {
  const [tags, setTags] = React.useState<string[]>(['Tag01', 'Tag02']);
  const [tagInfos, seTagInfos] = React.useState<TagInfo[]>([{
    value: 'Error Tag',
    key: 'tag01',
    error: true
  }, {
    value: 'Tag02',
    key: 'tag02'
  }]);
  return <div className="flex gap-spacing-8">
      <TagInput label="With type: string[]" value={tags} onChange={setTags} width={300} />
      <TagInput label="With type: TagInfo[]" value={tagInfos} onChange={tags => {
      seTagInfos(tags.map(tag => ({
        value: tag,
        key: tag,
        error: tag.toLowerCase().startsWith('error')
      })));
    }} error={tagInfos.some(({
      error
    }) => error)} width={300} />
    </div>;
};
```

### With Separator

```tsx
export const WithSeparator = {
  args: {
    separator: 'or'
  }
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  args: {
    hint: 'Hint',
    label: 'Label'
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```

### Editable

```tsx
export const Editable = () => {
  const [currTags, setCurrTags] = React.useState<TagInfo[]>([{
    value: 'Label',
    key: 'tag01',
    error: 'duplicate label',
    editable: true
  }, {
    value: 'Label',
    key: 'tag02',
    error: 'duplicate label',
    editable: true
  }, {
    value: 'Label2',
    key: 'tag03',
    editable: true
  }]);
  const checkDuplicate = (tagValue: string, tagIdx: number, tags: string[]) => {
    const isDuplicated = tags.filter(tag => tag === tagValue).length > 1;
    if (isDuplicated) {
      return 'duplicate label';
    }
  };
  const handleChange = (newTags: string[]) => {
    setCurrTags(newTags.map((tag, idx) => ({
      value: tag,
      key: tag,
      editable: true,
      error: checkDuplicate(tag, idx, newTags)
    })));
  };
  return <TagInput value={currTags} onChange={handleChange} />;
};
```

### Error

```tsx
export const Error = () => {
  const [currTags, setCurrTags] = React.useState<string[]>(['Label', 'Label', 'Label02']);
  const handleChange = (newTags: string[]) => {
    setCurrTags(newTags);
  };
  const onTagsValueValidate = (tag: string, tagIdx: number, tags: string[]) => {
    const isDuplicated = tags.filter(tagValue => tagValue === tag).length > 1;
    if (isDuplicated) {
      return 'duplicate label';
    }
  };
  return <TagInput onTagsValueValidate={onTagsValueValidate} value={currTags} onChange={handleChange} />;
};
```

### Height

```tsx
export const Height = () => {
  return <div style={{
    display: 'flex',
    gap: '8px',
    flexDirection: 'column'
  }}>
      <TagInput defaultValue={['Label', 'Label']} height={32} />
      <TagInput defaultValue={['Label', 'Label', 'Label', 'Label']} height={60} />
      <TagInput defaultValue={['Label', 'Label', 'Label', 'Label', 'Label', 'Label']} height={88} />
      <TagInput defaultValue={['Label', 'Label', 'Label', 'Label', 'Label', 'Label', 'Label', 'Label']} height={116} />
      <TagInput defaultValue={['Label', 'Label', 'Label', 'Label', 'Label', 'Label', 'Label', 'Label', 'Label', 'Label']} height={148} />
    </div>;
};
```

### Add Tag With Menu

```tsx
export const AddTagWithMenu = () => {
  const [currTags, setCurrTags] = React.useState<string[]>(['Tag01', 'Tag02']);
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const [inputValue, setInputValue] = React.useState('');
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const handleClickMenuItem = (e: MouseEvent<HTMLLIElement>) => {
    const newTags = [...currTags, e.currentTarget.dataset.value || ''];
    setCurrTags(newTags);
  };
  const searchedMenuItems = useMenuSearch({
    menuItems: ['Tag03', 'Tag04', 'Tag05'].filter(item => !currTags.includes(item)).map(name => <MenuItem value={name} onClick={handleClickMenuItem} keywords={[name]} key={name}>
          {name}
        </MenuItem>),
    searchTerm: inputValue
  });
  return <>
      <TagInput value={currTags} onChange={setCurrTags} onInputValueChange={setInputValue} width={300} onClick={handleClick} avoidFocusLossArea={['.appier-ds-Menu']} />
      <Menu open={open} anchorEl={anchorEl} onClose={handleClose} autoFocus={false}>
        <MenuItemCategory title="Category">
          {searchedMenuItems}
        </MenuItemCategory>
      </Menu>
    </>;
};
```

### Virtualized With Thousands Tags

```tsx
export const VirtualizedWithThousandsTags = () => {
  const generateRandomString = () => {
    const length = Math.floor(Math.random() * (20 - 10 + 1)) + 10; // Random length between 10 and 20
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length);
      result += characters[randomIndex];
    }
    return result;
  };

  // Generate 10,000 tags
  const generateTags = () => {
    const tags: TagInfo[] = [];
    for (let i = 1; i <= 10_000; i++) {
      tags.push({
        value: generateRandomString(),
        key: `tag-${i}`,
        editable: true
      });
    }
    return tags;
  };
  const [tags, setTags] = React.useState<TagInfo[]>(generateTags());
  const handleChange = (newTags: string[]) => {
    setTags(newTags.map((tag, idx) => ({
      value: tag,
      key: tag,
      editable: true
    })));
  };
  return <div style={{
    width: '100%',
    maxWidth: '600px'
  }}>
      <h3>Virtualized TagInput with 10,000 tags</h3>
      <p style={{
      marginBottom: '1rem'
    }}>
        This input contains 10,000 tags but maintains smooth performance through
        virtualization. Try scrolling through the tags!
      </p>
      <TagInput value={tags} onChange={handleChange} isFullWidth virtualizedConfig={{
      enable: true
    }} />
      <div style={{
      marginTop: '1rem'
    }}>
        <strong>Total tags:</strong> {tags.length}
      </div>
    </div>;
};
```


# TagInputProps

```typescript
type TagInputProps = Override<Override<InputHTMLAttributes<HTMLInputElement>, InputProps<string[]>>, ConfigProps & StyleProps & {
  /**
   * The value of the `tags`, required for a controlled component.
   */
  value?: string[] | TagInfo[];

  /**
   * The default element value. Use when the component is not controlled.
   */
  defaultValue?: string[] | TagInfo[];
}>;
```
# TagProps

```typescript
interface TagProps extends React.HTMLAttributes<TagElement> {
  /**
   * If `true`, will be set button role, even if the onClick prop is not defined.
   */
  clickable?: boolean;
  /**
   * Whether the Tag is editable
   */
  editable?: boolean;
  /**
   * Whether the Tag can be removed or closed
   */
  removable?: boolean;
  /**
   * Mark the tag as failed or warning.
   */
  error?: boolean;
  /**
   * Allow tooltip with content if need.
   */
  tooltipContent?: string | React.ReactNode;
  /**
   * If `true`, the tag will be disabled.
   */
  disabled?: boolean;
  /**
   * Callback executed when tag is removed or closed
   */
  onClose?: (e: React.MouseEvent<HTMLOrSVGElement>) => void;
  /**
   * Callback executed when tag is clicked
   */
  onClick?: (e: React.MouseEvent<TagElement>) => void;
}
```
# TagSelect

The TagSelect component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Solo = {
  render: Template
};
```

## Usage

```tsx
import { TagSelect } from "@appier/aiqua-design-system

<TagSelect />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `placeholder` | `string` | No | The short hint displayed in the select before the user select a value |
| `separator` | `React.ReactNode` | No | Custom separator node. |
| `isMenuOpen` | `boolean` | No | Pass this prop to manually control the open / close state for the menu. |
| `onDelete` | `(deleteTag: string) => void` | No | Callback called when the user delete a tag |
| `onTagsValueValidate` | `(tagValue: string, tagIdx: number, tags: string[]) => React.ReactNode` | No | Callback called for tag validation when the tags change |
| `renderDisplayContent` | `(value: T) => React.ReactNode` | No | Function to render custom display content for the tags |
| `height` | `number \| string` | No | Defined height of  `Select input` area. |

## Examples

### With Label

```tsx
export const WithLabel = {
  render: Template,
  args: {
    label: 'label'
  },
  parameters: {
    controls: {
      exclude: ['hint']
    }
  }
};
```

### With Hint

```tsx
export const WithHint = {
  render: Template,
  args: {
    hint: 'hint'
  }
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  render: Template,
  args: {
    ...WithHint.args,
    ...WithLabel.args
  }
};
```

### With Separator

```tsx
export const WithSeparator = {
  render: Template,
  args: {
    separator: 'or'
  }
};
```

### With Single Tag Error

```tsx
export const WithSingleTagError = {
  render: args => {
    const [currentSelects, setCurrentSelects] = useState<string[]>(['item-01', 'item-02', 'item-02-long-long-long-long']);
    const handleChange = (newValue: string[]) => {
      setCurrentSelects(newValue);
    };
    return <TagSelect {...args} onChange={handleChange} value={currentSelects} onTagsValueValidate={onTagsValueValidate}>
        <MenuItem value="item-01">item 01</MenuItem>
        <MenuItem value="item-02-long-long-long-long">
          item 02 long long long long
        </MenuItem>
        <MenuItem value="item-02">item 02</MenuItem>
        <MenuItem value="item-03">item 03</MenuItem>
      </TagSelect>;
  }
};
```

### With Custom Menu

```tsx
export const WithCustomMenu = () => {
  const [currentSelects, setCurrentSelects] = useState<string[]>(['item-01', 'item-02']);
  const [isDialogOpen, setDialogOpen] = useState(false);
  return <>
      <TagSelect onChange={setCurrentSelects} value={currentSelects} isMenuOpen={isDialogOpen} onClick={() => {
      setDialogOpen(true);
    }} />
      <Dialog size="400" height={200} backgroundColor="quaternary" header="Custom selector" open={isDialogOpen} content={<CheckboxGroup direction="vertical" value={currentSelects} onChange={setCurrentSelects}>
            <Checkbox label="Item 01" value="item-01" />
            <Checkbox label="Item 02" value="item-02" />
            <Checkbox label="Item 03" value="item-03" />
          </CheckboxGroup>} footer={[<Button key="1" variant="secondary" onClick={() => {
      setDialogOpen(false);
    }}>
            Done
          </Button>]} />
    </>;
};
```

### Render Display Content

```tsx
export const RenderDisplayContent = args => {
  const [currentSelects, setCurrentSelects] = useState<string[]>(['item-01']);
  const renderDisplayContent: TagSelectProps['renderDisplayContent'] = value => {
    switch (value) {
      case 'today':
        {
          return format(new Date(), 'PP');
        }
      case 'yesterday':
        {
          return format(startOfYesterday(), 'PP');
        }
      default:
        {
          return value;
        }
    }
  };
  return <TagSelect {...args} value={currentSelects} onChange={setCurrentSelects} renderDisplayContent={renderDisplayContent}>
      <MenuItem value="item-01">item 01</MenuItem>
      <MenuItem value="today">Today</MenuItem>
      <MenuItem value="yesterday">Yesterday</MenuItem>
    </TagSelect>;
};
```


# TagSelectProps

```typescript
type TagSelectProps<T = string> = Override<React.HTMLAttributes<HTMLDivElement>, SelectProps<T[]>> & ConfigProps<T> & StyleProps;
```
# Textarea

Version `v2.0.2` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=33401-449212&t=AJpHD5HQ2KyonQSH-0)

Textarea is a multi-line input field that allows users to enter and edit longer blocks of text. It provides a larger text input area compared to a regular single-line input field, enabling users to input or modify substantial amounts of text conveniently.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { Textarea } from "@appier/aiqua-design-system

<Textarea />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [textareaValue, setTextareaValue] = React.useState('Type your message');
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <Textarea label="Message (Uncontrolled)" defaultValue="Type your message" width={300} />
      <Textarea label="Message (Controlled)" value={textareaValue} onChange={setTextareaValue} width={300} />
    </div>;
};
```

### With Content Actions

```tsx
export const WithContentActions = {
  render: args => {
    return <Textarea {...args} contentActions={<div style={{
      display: 'flex',
      gap: '8px',
      alignItems: 'center'
    }}>
            <span>3/20</span>
            <EmojiIcon size={16} />
            <Button size="small" variant="secondary" startIcon={<DSIcon is="insightOutlined20" />}>
              Try example
            </Button>
          </div>} />;
  }
};
```

### One Line Layout

```tsx
export const OneLineLayout = () => {
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <Textarea placeholder="default layout" contentActions={<div style={{
      display: 'flex',
      gap: '8px'
    }}>
            <span>3/20</span>
            <EmojiIcon size={16} />
          </div>} width={300} />
      <Textarea oneLineLayout placeholder="one line layout" contentActions={<div style={{
      display: 'flex',
      gap: '8px'
    }}>
            <span>3/20</span>
            <EmojiIcon size={16} />
          </div>} width={300} />
    </div>;
};
```

### Min And Max Rows

```tsx
export const MinAndMaxRows = {
  args: {
    minRows: 2,
    maxRows: 4
  }
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  args: {
    hint: 'Hint',
    label: 'Label'
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```

### Error

```tsx
export const Error = {
  args: {
    error: 'Error text'
  }
};
```

### Clearable

```tsx
export const Clearable = {
  args: {
    clearable: true
  }
};
```


# TextareaProps

```typescript
type TextareaProps = Override<Override<TextareaHTMLAttributes<HTMLTextAreaElement>, InputProps<string>>, ConfigProps>;
```
# TextareaWithReplaceRule

The TextareaWithReplaceRule component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: args => {
    const [value, setValue] = React.useState(DEFAULT_VALUE);
    const ref = React.useRef<RichTextareaRef>(null);
    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
    const open = Boolean(anchorEl || args.open);
    const handleClose = () => {
      setAnchorEl(null);
    };
    const handleMenuOpen = e => {
      e.stopPropagation();
      setAnchorEl(e.currentTarget);
    };
    const handleChange = newValue => {
      setValue(newValue);
    };
    const handleMenuClick = e => {
      const content = e.currentTarget.dataset.content;
      ref.current?.insertText(content);
    };
    return <div style={{
      display: 'flex',
      flexDirection: 'column',
      gap: '8px',
      alignItems: 'start'
    }}>
        {<TextareaWithReplaceRule {...args} ref={ref} replaceRules={replaceRules} width={300} maxRows={4} onChange={handleChange} defaultValue={value} clearable avoidFocusLossArea={['.appier-ds-Menu']} disableEnforceFocus contentActions={<div style={{
        display: 'flex',
        gap: '8px'
      }} className="123">
                <span>3/20</span>
                <EmojiIcon size={16} onClick={handleMenuOpen} />
              </div>} />}
        {<Menu open={open} anchorEl={anchorEl} onClose={handleClose}>
            <MenuItem data-content="{{123}}" onClick={handleMenuClick}>{`{{123}}`}</MenuItem>
            <MenuItem data-content="{{456}}" onClick={handleMenuClick}>{`{{456}}`}</MenuItem>
            <MenuItem data-content="{{789}}" onClick={handleMenuClick}>{`{{789}}`}</MenuItem>
            <MenuItem data-content="{{3345678}}" onClick={handleMenuClick}>{`{{3345678}}`}</MenuItem>
          </Menu>}
      </div>;
  }
};
```

## Usage

```tsx
import { TextareaWithReplaceRule } from "@appier/aiqua-design-system

<TextareaWithReplaceRule />
```


# TextareaWithReplaceRuleProps

```typescript
type TextareaWithReplaceRuleProps = Override<Override<TextareaHTMLAttributes<Editor>, Omit<InputProps<string>, 'value'>>, ConfigProps>;
```
# TextButton

Version `v2.0.2` | [Figma specification](https://www.figma.com/design/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0-%7C-Library?node-id=27962-384872&m=dev)

The `TextButton` component is a lightweight, text-only button designed for less prominent actions.

## Main Example

```tsx
export const Basic = Template.bind({});
```

## Usage

```tsx
import { TextButton } from "@appier/aiqua-design-system

<TextButton />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `variant` | `(typeof VARIANT)[keyof typeof VARIANT]` | No | Defines the variant of the button. The button will take the default variant if the value is `undefined`. |
| `disabled` | `boolean` | No | If `true`, the button will be disabled. |
| `startIcon` | `React.ReactNode` | No | A icon start of contained button or icon only base button use |
| `endIcon` | `React.ReactNode` | No | A icon end of contained button |

## Examples

### Variant

```tsx
export const Variant = () => {
  return <Layout>
      <TextButton>Label</TextButton>
      <TextButton variant="secondary">Label</TextButton>
    </Layout>;
};
```

### With Icon

```tsx
export const WithIcon = () => {
  return <Layout>
      <TextButton startIcon={<DSIcon is="addOutlined20" />}>Label</TextButton>
      <TextButton endIcon={<DSIcon is="directionalTriangleArrowDownSolid20" />}>
        Label
      </TextButton>
      <TextButton startIcon={<DSIcon is="addOutlined20" />} endIcon={<DSIcon is="directionalTriangleArrowDownSolid20" />}>
        Label
      </TextButton>
    </Layout>;
};
```

### Disabled

```tsx
export const Disabled = () => {
  return <Layout>
      <TextButton disabled>Label</TextButton>
      <TextButton disabled variant="secondary">
        Label
      </TextButton>
    </Layout>;
};
```


# TextButtonProps

```typescript
interface TextButtonProps extends React.ComponentPropsWithoutRef<'button'>, StyleProps, ConfigProps {}
```
# TextInput

The TextInput component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { TextInput } from "@appier/aiqua-design-system

<TextInput />
```

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [inputValue, setInputValue] = React.useState('Placeholder');
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <TextInput label="Title (Uncontrolled)" defaultValue="Placeholder" />
      <TextInput label="Title (Controlled)" value={inputValue} onChange={setInputValue} />
    </div>;
};
```

### With Content Actions

```tsx
export const WithContentActions = {
  render: args => {
    return <TextInput {...args} contentActions={<div style={{
      display: 'flex',
      gap: '8px'
    }}>
            <span>3/20</span>
            <EmojiIcon size={16} />
          </div>} />;
  }
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  args: {
    hint: 'Hint',
    label: 'Label'
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```

### Error

```tsx
export const Error = {
  args: {
    error: 'Error text'
  }
};
```

### Is Summary

```tsx
export const IsSummary = {
  args: {
    isSummary: true
  }
};
```

### With Prefix Icon

```tsx
export const WithPrefixIcon = {
  args: {
    prefixIcon: <DSIcon is="sizeHeightOutlined20" color={color.light.semantic.gray} />
  }
};
```

### With Suffix Icon

```tsx
export const WithSuffixIcon = {
  args: {
    suffixIcon: <DSIcon is="sizeHeightOutlined20" color={color.light.semantic.gray} />
  }
};
```

### With Both Prefix And Suffix Icon

```tsx
export const WithBothPrefixAndSuffixIcon = {
  args: {
    prefixIcon: <DSIcon is="sizeHeightOutlined20" color={color.light.semantic.gray} />,
    suffixIcon: <DSIcon is="sizeHeightOutlined20" color={color.light.semantic.gray} />
  }
};
```

### Padding Size

```tsx
export const PaddingSize = {
  render: args => {
    return <div style={{
      display: 'flex',
      gap: '8px'
    }}>
        <TextInput {...args} paddingSize="normal" />
        <TextInput {...args} paddingSize="small" />
      </div>;
  }
};
```


# TextInputProps

```typescript
type TextInputProps = Override<Override<InputHTMLAttributes<HTMLInputElement>, InputProps<string>>, ConfigProps & StyleProps>;
```
# TextSelect

The TextSelect component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { TextSelect } from "@appier/aiqua-design-system

<TextSelect />
```

## Examples

### Controlled With Value

```tsx
export const ControlledWithValue = (args: {
  size: 'small' | 'default' | undefined;
}) => {
  const [selectValue, setSelectValue] = useState<string>('2');
  const handleChange = (currString: string) => {
    setSelectValue(currString);
  };
  return <div style={{
    display: 'flex',
    gap: '8px'
  }}>
      <TextSelect size={args.size} value={selectValue} onChange={handleChange}>
        <MenuItem value="1">Controlled options 1</MenuItem>
        <MenuItem value="2">Controlled options 2</MenuItem>
      </TextSelect>

      <TextSelect size={args.size} defaultValue="1">
        <MenuItem value="1">UnControlled options 1</MenuItem>
        <MenuItem value="2">UnControlled options 2</MenuItem>
      </TextSelect>
    </div>;
};
```

### Controlled With Open

```tsx
export const ControlledWithOpen = (args: {
  size: 'small' | 'default' | undefined;
}) => {
  const [open, setOpen] = useState(false);
  const handleOpenChange = (isOpen: boolean, e?: React.MouseEvent<HTMLElement>) => {
    if (e && !e.currentTarget) {
      return;
    }
    if (e?.currentTarget.getAttribute('role') !== 'menuitem') {
      setOpen(isOpen);
    }
  };
  return <TextSelect size={args.size} defaultValue="1" open={open} onOpenChange={handleOpenChange}>
      <SingleSelectionMenuItem value="1">Radio 1</SingleSelectionMenuItem>
      <SingleSelectionMenuItem value="2">Radio 2</SingleSelectionMenuItem>
    </TextSelect>;
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  args: {
    hint: 'hint',
    label: 'label'
  }
};
```

### With Icon

```tsx
export const WithIcon = {
  args: {
    icon: <DSIcon is="wineOutlined20" />
  }
};
```

### With Badge

```tsx
export const WithBadge = {
  args: {
    badgeProps: {
      variant: 'text',
      content: 'Label',
      color: 'error'
    },
    defaultValue: ''
  }
};
```

### Render Display Content

```tsx
export const RenderDisplayContent = (args: {
  size: 'small' | 'default' | undefined;
}) => {
  const [open, setOpen] = useState(false);
  const [date, setDate] = useState<Date | undefined>(new Date());
  const handleOpenChange = (isOpen: boolean, e?: React.MouseEvent<HTMLElement>) => {
    if (e && !e.currentTarget) {
      return;
    }
    if (e?.currentTarget.getAttribute('role') !== 'menuitem') {
      setOpen(isOpen);
    }
  };
  const renderDisplayContent = (value: any) => {
    return value === 'datePicker' ? formatDisplayDate(date) : 'custom display content';
  };
  return <TextSelect size={args.size} renderDisplayContent={renderDisplayContent} open={open} onOpenChange={handleOpenChange} defaultValue="datePicker">
      <SingleSelectionMenuItem value="default">
        Selected by default
      </SingleSelectionMenuItem>
      <SingleSelectionMenuItem value="datePicker">
        <DatePicker placeholder="Select a date" value={date} onChange={setDate} />
      </SingleSelectionMenuItem>
    </TextSelect>;
};
```

### Multiple

```tsx
export const Multiple = {
  args: {
    multiple: true,
    defaultValue: ['2', '3']
  }
};
```

### With Hierarchical Menu

```tsx
export const WithHierarchicalMenu = {
  args: {
    children: [<MenuItem submenu={{
      items: [<MenuItemCategory title="Category 1">
              <MenuItem value={'default'} keywords={['default']}>
                Selected by default
              </MenuItem>
              <MenuIconItem value={'1-2'} keywords={['Item 1-2']} icon={<DSIcon is="infoOutlined20" />}>
                Item 1-2
              </MenuIconItem>
            </MenuItemCategory>, <MenuItemCategory title="Category 2">
              <MenuItem value={'Category 2 item 1'} keywords={['Category 2 item 1']}>
                Category 2 item 1
              </MenuItem>
              <MenuIconItem value={'Category 2 item 2'} keywords={['Category 2 item 2']} icon={<DSIcon is="infoOutlined20" />}>
                Category 2 item 2
              </MenuIconItem>
            </MenuItemCategory>]
    }} key={1}>
        Item 1
      </MenuItem>, <MenuItem submenu={{
      items: [<MenuItem key={'2-1'} value={'2-1'}>
              Item 2-1
            </MenuItem>, <MenuItem key={'2-2'} value={'2-2'}>
              Item 2-2
            </MenuItem>]
    }} key={2}>
        Item 2
      </MenuItem>, <MenuItem submenu={{
      items: [<MenuItem submenu={{
        items: [<MenuItem key={'3-1-1'} value={'3-1-1'}>
                    Item 3-1-1
                  </MenuItem>, <MenuItem key={'3-1-2'} value={'3-1-2'}>
                    Item 3-1-2
                  </MenuItem>],
        hint: `(1) will be the latest event, (2) will be the 2nd latest event...etc`
      }} key={'3-1'}>
              Item 3-1
            </MenuItem>, <MenuItem key={'3-2'} value={'3-2'}>
              Item 3-2
            </MenuItem>]
    }} key={3}>
        Item 3
      </MenuItem>]
  }
};
```

### With Drill Down Menu

```tsx
export const WithDrillDownMenu = {
  args: {
    ...WithHierarchicalMenu.args,
    isDrillDown: true,
    drillDownTitle: 'Drill Down Menu'
  }
};
```

### With Virtualized Menu

```tsx
export const WithVirtualizedMenu = {
  args: {
    children: Array.from({
      length: 100
    }, (_, i) => ({
      id: `item${i}`,
      name: `Item ${i}`
    })).map(menu => <MenuItem key={menu.id} keywords={[menu.name]} value={menu.id}>
        {menu.name}
      </MenuItem>),
    search: true,
    virtualized: true,
    defaultValue: [],
    menuProps: {
      zIndex: 1555
    }
  }
};
```

### With Virtualized Multiple Menu

```tsx
export const WithVirtualizedMultipleMenu = {
  args: {
    children: WithVirtualizedMenu.args.children,
    search: true,
    multiple: true,
    virtualized: true,
    defaultValue: []
  }
};
```

### Disabled

```tsx
export const Disabled = {
  args: {
    disabled: true
  }
};
```

### Error

```tsx
export const Error = {
  args: {
    error: 'Error text'
  }
};
```

### Loading

```tsx
export const Loading = {
  args: {
    loading: true
  }
};
```

### Search

```tsx
export const Search = {
  args: {
    search: true
  }
};
```

### Is Summary

```tsx
export const IsSummary = {
  args: {
    isSummary: true,
    badgeProps: {
      variant: 'text',
      content: 'Label',
      color: 'error'
    },
    icon: <DSIcon is="wineOutlined20" />
  }
};
```

### With Menu Category

```tsx
export const WithMenuCategory = {
  args: {
    children: [<MenuItemCategory title="Category 1">
        <MenuItem value={'default'} keywords={['default']}>
          Selected by default
        </MenuItem>
        <MenuIconItem value={'1-2'} keywords={['Item 1-2']} icon={<DSIcon is="infoOutlined20" />}>
          Item 1-2
        </MenuIconItem>
      </MenuItemCategory>, <MenuItemCategory title="Category 2">
        <MenuItem value={'Category 2 item 1'} keywords={['Category 2 item 1']}>
          Category 2 item 1
        </MenuItem>
        <MenuIconItem value={'Category 2 item 2'} keywords={['Category 2 item 2']} icon={<DSIcon is="infoOutlined20" />}>
          Category 2 item 2
        </MenuIconItem>
      </MenuItemCategory>]
  }
};
```

### Is Small

```tsx
export const IsSmall = {
  args: {
    size: 'small'
  }
};
```


# TextSelectProps

```typescript
type TextSelectProps<T = Value> = Override<React.HTMLAttributes<HTMLDivElement>, SelectProps<T> & ConfigProps & ConditionalProps>;
```
# TimeFormat

```typescript
type TimeFormat = string;
```
# TimePicker

The TimePicker component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Simple = {
  render: Template
};
```

## Usage

```tsx
import { TimePicker } from "@appier/aiqua-design-system

<TimePicker />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `onBlur` | `(v?: string) => void` | No | Callback function fired when the input is blurred. |
| `minHour` | `number` | No | Minimum hour option in the picker. Must be between 0 and 24. If `minHour` >= `maxHour`, it will fallback to 0. @default 0 |
| `maxHour` | `number` | No | Maximum hour option in the picker. Must be between 0 and 24. If `maxHour` <= `minHour`, it will fallback to 23. @default 23 |
| `hourStep` | `number` | No | Interval between hours in picker |
| `minuteStep` | `number` | No | Interval between minutes in picker |
| `allowInput` | `boolean` | No | Allow input hh:mm value |

## Examples

### With Label

```tsx
export const WithLabel = {
  render: Template,
  args: {
    label: 'label'
  },
  parameters: {
    controls: {
      exclude: ['hint']
    }
  }
};
```

### With Hint

```tsx
export const WithHint = {
  render: Template,
  args: {
    hint: 'hint'
  }
};
```

### With Label And Hint

```tsx
export const WithLabelAndHint = {
  render: Template,
  args: {
    ...WithHint.args,
    ...WithLabel.args
  }
};
```

### With Hour Step

```tsx
export const WithHourStep = {
  render: Template,
  args: {
    hourStep: 3
  }
};
```

### With Minute Step

```tsx
export const WithMinuteStep = {
  render: Template,
  args: {
    minuteStep: 15
  }
};
```

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [inputValue, setInputValue] = React.useState<string>('11:20');
  const handleChange = (newValue?: string) => {
    setInputValue(newValue ?? '');
  };
  return <TimePickerWrapper>
      <TimePicker value={inputValue} onChange={handleChange}></TimePicker>
    </TimePickerWrapper>;
};
```

### Has Error

```tsx
export const HasError = {
  render: Template,
  args: {
    error: 'here is an error'
  }
};
```

### Allow Input

```tsx
export const AllowInput = {
  render: Template,
  args: {
    allowInput: false
  }
};
```

### Custom Hour Range

```tsx
export const CustomHourRange = {
  render: Template,
  args: {
    minHour: 1,
    maxHour: 24,
    minuteStep: 60
  }
};
```


# TimePickProps

```typescript
type TimePickProps = PickerProps<string> & {
  /**
   * Callback function fired when the input is blurred.
   */
  onBlur?: (v?: string) => void;
  /**
   * Minimum hour option in the picker. Must be between 0 and 24.
   * If `minHour` >= `maxHour`, it will fallback to 0.
   * @default 0
   */
  minHour?: number;
  /**
   * Maximum hour option in the picker. Must be between 0 and 24.
   * If `maxHour` <= `minHour`, it will fallback to 23.
   * @default 23
   */
  maxHour?: number;
  /**
   * Interval between hours in picker
   */
  hourStep?: number;
  /**
   * Interval between minutes in picker
   */
  minuteStep?: number;
  /**
   * Allow input hh:mm value
   */
  allowInput?: boolean;
};
```
# Timestamp

```typescript
type Timestamp = number;
```
# TIMEZONE_LIST

```typescript
const TIMEZONE_LIST = Intl.supportedValuesOf('timeZone');
```
# Timezone

```typescript
type Timezone = string;
```
# TimezoneConfigurations

```typescript
interface TimezoneConfigurations {
  timezone: string;
  axisDisplayDate: string;
  tooltipDisplayDate: string;
}
```
# TITLE_POSITION

```typescript
const TITLE_POSITION = {
  LEFT: 'left',
  TOP: 'top'
} as const;
```
# TOAST_PLACEMENT

```typescript
const TOAST_PLACEMENT = {
  BOTTOM: 'bottom',
  TOP: 'top',
  TOP_LEFT: 'top-left',
  TOP_RIGHT: 'top-right',
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_RIGHT: 'bottom-right'
} as const;
```
# TOAST_TYPE

```typescript
const TOAST_TYPE = {
  SUCCESS: 'SUCCESS',
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  LOADING: 'LOADING'
} as const;
```
# ToastId

```typescript
type ToastId = string;
```
# ToastManager

Version `v2.1.0` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?node-id=1%3A82&mode=dev)
Toast is an ephemeral user interface element that floats on the screen and is used to display a brief message or notification and provide feedback on the user's interaction with the application.

## Main Example

```tsx
export const Normal = {
  render: Template,
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { ToastManager } from "@appier/aiqua-design-system

<ToastManager />
```

## Examples

### Type

```tsx
export const Type = {
  render: args => {
    return <>
        <Toast {...args} type={TOAST_TYPE.INFO} />
        <Toast {...args} type={TOAST_TYPE.SUCCESS} />
        <Toast {...args} type={TOAST_TYPE.WARNING} />
        <Toast {...args} type={TOAST_TYPE.ERROR} />
        <Toast {...args} type={TOAST_TYPE.LOADING} />
      </>;
  }
};
```

### Closable

```tsx
export const Closable = {
  render: args => {
    return <>
        <Toast {...args} />
        <Toast {...args} closable={false} />
      </>;
  }
};
```

### With Action Button

```tsx
export const WithActionButton = {
  render: Template,
  args: {
    ...Normal.args,
    onButtonAction: () => {
      console.log('Action button clicked!!');
    },
    actionButtonLabel: 'Action Button'
  }
};
```

### With Hooks

```tsx
export const WithHooks = {
  render: args => {
    const {
      toast,
      toastRenderer
    } = useToast();
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>, placement) => {
      toast({
        type: args.type,
        placement,
        title: 'Title',
        onButtonAction: () => {
          console.log('Action button clicked!!');
        },
        actionButtonLabel: 'Action Button',
        description: 'This is the description of the toast. This is the description of the toast. This is the description of the toast.'
      });
    };
    return <>
        {['top', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right'].map(placement => <StyledButton variant="secondary" size="normal" onClick={e => {
        handleClick(e, placement);
      }}>
            Open {placement} toast
          </StyledButton>)}
        {toastRenderer}
      </>;
  }
};
```

### Auto Hide Duration

```tsx
export const AutoHideDuration = {
  render: args => {
    const {
      toast,
      toastRenderer
    } = useToast();
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>, placement, autoHideDuration) => {
      toast({
        type: args.type,
        placement,
        autoHideDuration,
        title: 'Title'
      });
    };
    return <>
        {[6000, 8000].map(autoHideDuration => <StyledButton variant="secondary" size="normal" onClick={e => {
        handleClick(e, 'bottom', autoHideDuration);
      }}>
            Open {autoHideDuration} ms toast
          </StyledButton>)}
        {toastRenderer}
      </>;
  }
};
```

### Is Continuously Displayed With Hooks

```tsx
export const IsContinuouslyDisplayedWithHooks = {
  render: args => {
    const {
      toast,
      toastRenderer
    } = useToast();
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>, placement) => {
      toast({
        type: TOAST_TYPE.LOADING,
        placement,
        title: 'Loading',
        isContinuouslyDisplayed: true
      });
    };
    return <>
        <StyledButton variant="secondary" size="normal" onClick={e => {
        handleClick(e, 'bottom');
      }}>
          Open bottom toast
        </StyledButton>
        {toastRenderer}
      </>;
  }
};
```

### Close By Event

```tsx
export const CloseByEvent = {
  render: args => {
    const {
      toast,
      toastRenderer
    } = useToast();
    const toastRef = useRef<ToastRef>(null);
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>, placement) => {
      toast({
        ref: toastRef,
        type: TOAST_TYPE.LOADING,
        placement,
        title: 'Loading',
        isContinuouslyDisplayed: true
      });
    };
    const handleClickToClose = () => {
      toastRef.current?.close();
    };
    return <>
        <StyledButton variant="secondary" size="normal" onClick={e => {
        handleClick(e, 'top');
      }}>
          Open toast
        </StyledButton>
        <StyledButton variant="secondary" size="normal" onClick={e => {
        handleClickToClose();
      }}>
          Close toast
        </StyledButton>
        {toastRenderer}
      </>;
  }
};
```


# ToastProps

```typescript
interface ToastProps {
  /**
   * The unique identifier of the Toast.
   */
  id: ToastId;
  /**
   * The ref of the Toast.
   */
  ref?: React.Ref<ToastRef>;
  /**
   * The toast offers four severity levels that set a distinctive icon and color.
   */
  type: (typeof TOAST_TYPE)[keyof typeof TOAST_TYPE];
  /**
   * If true, the component is shown.
   */
  open: boolean;
  /**
   * The title of the toast to display.
   */
  title: string | React.ReactNode;
  /**
   * The description of the toast to display.
   */
  description?: string | React.ReactNode;
  /**
   * Position of Toast.
   */
  placement?: (typeof TOAST_PLACEMENT)[keyof typeof TOAST_PLACEMENT];
  /**
   * The number of milliseconds to wait before automatically calling the onClose function.
   * @default 6000
   */
  autoHideDuration?: number;
  /**
   * if true, the Toast is continuously displayed.
   * @default true
   */
  isContinuouslyDisplayed?: boolean;
  /**
   * if true, the close button is shown.
   * @default true
   */
  closable?: boolean;
  /**
   * Callback fired when the component requests to be closed.
   * Typically onClose is used to set state in the parent component,
   * which is used to control the Toast open prop.
   */
  onClose?: () => void;
  /**
   * Callback fired when the component requests to be removed.
   */
  onRemove?: () => void;
  /**
   * Callback fired when the component requests to call action function.
   */
  onButtonAction?: () => void;
  /**
   * The Label of the action button.
   */
  actionButtonLabel?: string;
}
```
# ToastRef

```typescript
interface ToastRef {
  close: () => void;
}
```
# ToggleButton

Version `v2.0.2` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?node-id=1%3A78314)
A ToggleButton can be used to group related options with button.


## Min Width
The min width of ToggleButtonGroup will depends on number of ToggleButton. Ex 2-options will be `200px`, 3-options will be `300px`.

## Main Example

```tsx
export const Normal = () => {
  return <ToggleButtonGroup defaultValue="2">
      <ToggleButton value="1" label="All" />
      <ToggleButton value="2" label="Android" />
      <ToggleButton value="3" label="iOS" />
      <ToggleButton value="4" label="Web" />
    </ToggleButtonGroup>;
};
```

## Usage

```tsx
import { ToggleButton } from "@appier/aiqua-design-system

<ToggleButton />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `icon` | `React.ReactNode` | No | The icon before the label. |
| `label` | `React.ReactNode` | Yes | The label of the button. |
| `value` | `string` | Yes | Define the value of the ToggleButton, which is used to decide whether the ToggleButton is selected or not. |
| `className` | `string` | No | The className of the ToggleButton. |
| `disabled` | `boolean` | No | The disabled state of the ToggleButton. |

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [value, setValue] = useState('2');
  return <div className="flex gap-spacing-16">
      <div>
        <div className="m-spacing-8 text-content-high headline-5">
          ToggleButton with Controlled
        </div>
        <ToggleButtonGroup value={value} onChange={setValue}>
          <ToggleButton value="1" label="Label1" />
          <ToggleButton value="2" label="Label2" />
          <ToggleButton value="3" label="Label3" />
        </ToggleButtonGroup>
      </div>

      <div>
        <div className="m-spacing-8 text-content-high headline-5">
          ToggleButton with UnControlled
        </div>
        <ToggleButtonGroup defaultValue="3">
          <ToggleButton value="1" label="Label1" />
          <ToggleButton value="2" label="Label2" />
          <ToggleButton value="3" label="Label3" />
        </ToggleButtonGroup>
      </div>
    </div>;
};
```

### With Icon

```tsx
export const WithIcon = () => {
  return <ToggleButtonGroup defaultValue="2">
      <ToggleButton value="1" label="Label1" icon={<DSIcon is="wineOutlined20" />} />
      <ToggleButton value="2" label="Label2" icon={<DSIcon is="wineOutlined20" />} />
      <ToggleButton value="3" label="Label3" icon={<DSIcon is="wineOutlined20" />} />
    </ToggleButtonGroup>;
};
```

### Disabled

```tsx
export const Disabled = () => {
  return <ToggleButtonGroup defaultValue="2">
      <ToggleButton value="1" label="Label1" disabled />
      <ToggleButton value="2" label="Label2" disabled icon={<DSIcon is="wineOutlined20" />} />
    </ToggleButtonGroup>;
};
```


# ToggleButtonGroup

Version `v2.0.2` | [Figma specification](https://www.figma.com/file/CfUvdo5ibWVSExALxU4jvI/Design-System-2.0-Change-log-%2F-Use-case-%2F-Specifications?node-id=1%3A78314)
A ToggleButton can be used to group related options with button.


## Min Width
The min width of ToggleButtonGroup will depends on number of ToggleButton. Ex 2-options will be `200px`, 3-options will be `300px`.

## Main Example

```tsx
export const Normal = () => {
  return <ToggleButtonGroup defaultValue="2">
      <ToggleButton value="1" label="All" />
      <ToggleButton value="2" label="Android" />
      <ToggleButton value="3" label="iOS" />
      <ToggleButton value="4" label="Web" />
    </ToggleButtonGroup>;
};
```

## Usage

```tsx
import { ToggleButtonGroup } from "@appier/aiqua-design-system

<ToggleButtonGroup />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `value` | `string` | No | The currently selected value of the ToggleButton. |
| `defaultValue` | `string` | No | The initial value of the ToggleButton when used in an uncontrolled component. |
| `onChange` | `(newValue: string) => void` | No | Callback fired when the value changes. |
| `className` | `string` | No | The className of the ToggleButtonGroup. |
| `children` | `React.ReactNode` | No | - |

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [value, setValue] = useState('2');
  return <div className="flex gap-spacing-16">
      <div>
        <div className="m-spacing-8 text-content-high headline-5">
          ToggleButton with Controlled
        </div>
        <ToggleButtonGroup value={value} onChange={setValue}>
          <ToggleButton value="1" label="Label1" />
          <ToggleButton value="2" label="Label2" />
          <ToggleButton value="3" label="Label3" />
        </ToggleButtonGroup>
      </div>

      <div>
        <div className="m-spacing-8 text-content-high headline-5">
          ToggleButton with UnControlled
        </div>
        <ToggleButtonGroup defaultValue="3">
          <ToggleButton value="1" label="Label1" />
          <ToggleButton value="2" label="Label2" />
          <ToggleButton value="3" label="Label3" />
        </ToggleButtonGroup>
      </div>
    </div>;
};
```

### With Icon

```tsx
export const WithIcon = () => {
  return <ToggleButtonGroup defaultValue="2">
      <ToggleButton value="1" label="Label1" icon={<DSIcon is="wineOutlined20" />} />
      <ToggleButton value="2" label="Label2" icon={<DSIcon is="wineOutlined20" />} />
      <ToggleButton value="3" label="Label3" icon={<DSIcon is="wineOutlined20" />} />
    </ToggleButtonGroup>;
};
```

### Disabled

```tsx
export const Disabled = () => {
  return <ToggleButtonGroup defaultValue="2">
      <ToggleButton value="1" label="Label1" disabled />
      <ToggleButton value="2" label="Label2" disabled icon={<DSIcon is="wineOutlined20" />} />
    </ToggleButtonGroup>;
};
```


# ToggleButtonGroupProps

```typescript
interface ToggleButtonGroupProps {
  /**
   * The currently selected value of the ToggleButton.
   */
  value?: string;
  /**
   * The initial value of the ToggleButton when used in an uncontrolled component.
   */
  defaultValue?: string;
  /**
   * Callback fired when the value changes.
   */
  onChange?: (newValue: string) => void;
  /**
   * The className of the ToggleButtonGroup.
   */
  className?: string;
  children?: React.ReactNode;
}
```
# ToggleButtonProps

```typescript
type ToggleButtonProps = {
  /**
   * The icon before the label.
   */
  icon?: React.ReactNode;
  /**
   * The label of the button.
   */
  label: React.ReactNode;
  /**
   * Define the value of the ToggleButton, which is used to decide whether the ToggleButton is selected or not.
   */
  value: string;
  /**
   * The className of the ToggleButton.
   */
  className?: string;
  /**
   * The disabled state of the ToggleButton.
   */
  disabled?: boolean;
} & React.HTMLAttributes<HTMLButtonElement>;
```
# Tooltip

Version `v2.0.1` | [Figma specification](https://www.figma.com/file/xQS97DcKNTYfyCYaUOLMWv/Design-System-2.0?type=design&node-id=19447-303453&t=eDO7bVdYrybm1cTl-0)
Tooltip provides contextual information or additional details about a specific element when users hover over it, enhancing the user experience by offering concise and helpful explanations or descriptions.

## Main Example

```tsx
export const Normal = {
  tags: ['!autodocs'],
  render: Template
};
```

## Usage

```tsx
import { Tooltip } from "@appier/aiqua-design-system

<Tooltip />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `placement` | `Placement` | No | Define the default placement strategy. |
| `withInfoIcon` | `boolean` | No | Define the Tooltip info icon display or not. |
| `title` | `React.ReactNode` | No | Define the Tooltip title. |
| `content` | `React.ReactNode` | No | Define the Tooltip content. |
| `fallbackPlacements` | `Placement[]` | No | Define fallback array of placement. |
| `children` | `React.ReactNode` | Yes | The reference element to show tooltip |
| `disableHoverListener` | `boolean` | No | Make hover event no respond |
| `enterDelay` | `number` | No | The number of milliseconds to wait before showing the tooltip. Will take the default delay if the value be `undefined`. |
| `defaultOpen` | `boolean` | No | Whether the tooltip is open by default. Use when the component is not controlled. |
| `isOpen` | `boolean` | No | Whether the tooltip is open by default. required for a controlled component. |
| `onOpenChange` | `(isOpen: boolean) => void` | No | Callback that is fired when the tooltip's open state changes. |
| `ignoreSafePolygonTriangle` | `boolean` | No | Whether the tooltip should ignore the safe polygon triangle. If `true`, the tooltip will only allow rectangle bridge between the reference element and the tooltip. |

## Examples

### Controlled And Uncontrolled

```tsx
export const ControlledAndUncontrolled = () => {
  const [isOpen, setIsOpen] = React.useState(false);
  return <div style={{
    display: 'flex',
    gap: '40px'
  }}>
      <Tooltip defaultOpen={true} content="Description goes here">
        <Button>Uncontrolled</Button>
      </Tooltip>
      <Tooltip onOpenChange={setIsOpen} isOpen={isOpen} content="Description goes here">
        <Button>Controlled</Button>
      </Tooltip>
    </div>;
};
```

### Placement And Fallback Placements

```tsx
export const PlacementAndFallbackPlacements = () => {
  return <div>
      <div style={{
      display: 'flex',
      justifyContent: 'center'
    }}>
        <Tooltip placement="top-start" content="tooltip">
          <Button variant="minimal">top start</Button>
        </Tooltip>
        <Tooltip placement="top" content="tooltip">
          <Button variant="minimal">top</Button>
        </Tooltip>
        <Tooltip placement="top-end" content="tooltip">
          <Button variant="minimal">top end</Button>
        </Tooltip>
      </div>
      <div style={{
      display: 'flex',
      width: '100%'
    }}>
        <div style={{
        display: 'flex',
        flexFlow: 'column',
        flex: 1,
        alignItems: 'center'
      }}>
          <Tooltip placement="left-start" content="tooltip">
            <Button variant="minimal">left start</Button>
          </Tooltip>
          <Tooltip placement="left" content="tooltip">
            <Button variant="minimal">left</Button>
          </Tooltip>
          <Tooltip placement="left-end" content="tooltip">
            <Button variant="minimal">left end</Button>
          </Tooltip>
        </div>
        <div style={{
        flex: 1,
        display: 'flex',
        flexFlow: 'column',
        alignItems: 'center'
      }}>
          <Tooltip placement="right-start" content="tooltip">
            <Button variant="minimal">right start</Button>
          </Tooltip>
          <Tooltip placement="right" content="tooltip">
            <Button variant="minimal">right</Button>
          </Tooltip>
          <Tooltip placement="right-end" content="tooltip">
            <Button variant="minimal">right end</Button>
          </Tooltip>
        </div>
      </div>

      <div style={{
      display: 'flex',
      justifyContent: 'center'
    }}>
        <Tooltip placement="bottom-start" content="tooltip">
          <Button variant="minimal">bottom start</Button>
        </Tooltip>
        <Tooltip placement="bottom" content="tooltip">
          <Button variant="minimal">bottom</Button>
        </Tooltip>
        <Tooltip placement="bottom-end" content="tooltip">
          <Button variant="minimal">bottom end</Button>
        </Tooltip>
      </div>
    </div>;
};
```

### Title And Info Icon

```tsx
export const TitleAndInfoIcon = Template.bind({});
```

### Enter Delay

```tsx
export const EnterDelay = {
  render: Template,
  args: {
    enterDelay: 2000
  }
};
```


# TooltipProps

```typescript
interface TooltipProps {
  /**
   * Define the default placement strategy.
   */
  placement?: Placement;
  /**
   * Define the Tooltip info icon display or not.
   */
  withInfoIcon?: boolean;
  /**
   * Define the Tooltip title.
   */
  title?: React.ReactNode;
  /**
   * Define the Tooltip content.
   */
  content?: React.ReactNode;
  /**
   * Define fallback array of placement.
   */
  fallbackPlacements?: Placement[];
  /**
   * The reference element to show tooltip
   */
  children: React.ReactNode;
  /**
   * Make hover event no respond
   */
  disableHoverListener?: boolean;
  /**
   * The number of milliseconds to wait before showing the tooltip.
   * Will take the default delay if the value be `undefined`.
   */
  enterDelay?: number;
  /**
   * Whether the tooltip is open by default. Use when the component is not controlled.
   */
  defaultOpen?: boolean;
  /**
   * Whether the tooltip is open by default. required for a controlled component.
   */
  isOpen?: boolean;
  /**
   * Callback that is fired when the tooltip's open state changes.
   */
  onOpenChange?: (isOpen: boolean) => void;
  /**
   * Whether the tooltip should ignore the safe polygon triangle.
   * If `true`, the tooltip will only allow rectangle bridge between the reference element and the tooltip.
   */
  ignoreSafePolygonTriangle?: boolean;
}
```
# TriggerButton

Version `v2.0.0` | [Figma specification](https://www.figma.com/file/v8AjTv6zlRwLWeGQtkTfEQ/AI-Copilot-%7C-Library%2C-Spec?type=design&node-id=799-4134)
Buttons enable actions or navigation with a single tap, coming in various styles for specific needs. From submittng forms to opening dialogs, they serve as primary triggers.

## Main Example

```tsx
export const Basic = {
  render: Template,
  tags: ['!autodocs']
};
```

## Usage

```tsx
import { TriggerButton } from "@appier/aiqua-design-system

<TriggerButton />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `variant` | `(typeof VARIANT)[keyof typeof VARIANT]` | No | Defines the variant of the button. The button will take the default variant if the value is `undefined`. |
| `disabled` | `boolean` | No | If `true`, the button will be disabled. |
| `theme` | `THEME_TYPES` | No | The theme of the button. The button will take the default theme if the value is `undefined`. |
| `icon` | `React.ReactNode` | No | An icon of the button. |

## Examples

### Compact

```tsx
export const Compact = {
  render: Template,
  args: {
    variant: 'compact'
  }
};
```

### Disabled

```tsx
export const Disabled = () => <Layout>
    <TriggerButton variant="normal" disabled>
      Copilot
    </TriggerButton>
    <TriggerButton variant="compact" disabled>
      Copilot
    </TriggerButton>
  </Layout>;
```


# UnixTimestamp

```typescript
type UnixTimestamp = number;
```
# Upload

The Upload component is a key part of the Aiqua Design System.

## Usage

```tsx
import { Upload } from "@appier/aiqua-design-system";

<Upload />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `className` | `string` | No | - |
| `disabled` | `boolean` | No | - |
| `type` | `UploadType` | Yes | - |
| `onChange` | `(value: FileProps[]) => void` | Yes | - |
| `onClickUpload` | `() => void` | No | - |

> **Note:** This is a scaffold file. To generate full, rich examples, please create a `*.stories.tsx` file for this component.

# UploadFolder

```typescript
interface UploadFolder extends UploadItem {
  /**
   * The list of folder to be uploaded.
   */
  subList: UploadItem[];
  /**
   * Defines whether the sub list is open. Available when subList is provided.
   */
  isSubListOpen?: boolean;
  /**
   * The callback to be called when the sub list is collapsed. Available when subList is provided.
   */
  onSubListCollapse?: () => void;
  /**
   * Defines whether the folder is collapsible.
   */
  disableCollapse?: boolean;
}
```
# UploadItem

```typescript
interface UploadItem {
  /**
   * The file name.
   */
  label: string | (() => JSX.Element);
  /**
   * The sub label of the file.
   */
  subLabel?: string | (() => JSX.Element);
  /**
   * The status of the upload.
   */
  status?: 'uploading' | 'success' | 'error';
  /**
   * The tooltip on the endIcon to display when hovering over the item status.
   */
  iconTooltipContent?: string | (() => JSX.Element);
  /**
   * The icon to display at the start of the item.
   */
  startIcon?: () => JSX.Element;
  /**
   * The icon to display at the end of the item.
   */
  endIcon?: () => JSX.Element;
}
```
# UploadList

```typescript
type UploadList = (UploadItem | UploadFolder)[];
```
# UploadWindow

The UploadWindow component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { UploadWindow } from "@appier/aiqua-design-system

<UploadWindow />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `title` | `string` | Yes | The title of the upload. |
| `list` | `UploadList` | Yes | The list of items to be uploaded. |
| `open` | `boolean` | No | Defines whether the upload window is open. @default true |
| `closeable` | `boolean` | No | Defines whether the upload window is closeable. @default true |
| `loading` | `boolean` | No | Defines whether the upload window is loading. |
| `showCollapse` | `boolean` | No | Defines whether the collapse button is shown. |
| `hint` | `string` | No | The hint to display at the top of the upload window. |
| `wrapperStyle` | `CSSProperties` | No | The width of the upload window. |
| `onClose` | `() => void` | No | The callback to be called when the upload window is closed. |
| `onCollapse` | `() => void` | No | The callback to be called when the upload window is collapsed. |
| `onHintCancel` | `() => void` | No | The callback to be called when the cancel hint is clicked. |


# UploadWindowItem

The UploadWindowItem component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { UploadWindowItem } from "@appier/aiqua-design-system

<UploadWindowItem />
```


# UploadWindowProps

```typescript
interface UploadWindowProps {
  /**
   * The title of the upload.
   */
  title: string;
  /**
   * The list of items to be uploaded.
   */
  list: UploadList;
  /**
   * Defines whether the upload window is open.
   * @default true
   */
  open?: boolean;
  /**
   * Defines whether the upload window is closeable.
   * @default true
   */
  closeable?: boolean;
  /**
   * Defines whether the upload window is loading.
   */
  loading?: boolean;
  /**
   * Defines whether the collapse button is shown.
   */
  showCollapse?: boolean;
  /**
   * The hint to display at the top of the upload window.
   */
  hint?: string;
  /**
   * The width of the upload window.
   */
  wrapperStyle?: CSSProperties;
  /**
   * The callback to be called when the upload window is closed.
   */
  onClose?: () => void;
  /**
   * The callback to be called when the upload window is collapsed.
   */
  onCollapse?: () => void;
  /**
   * The callback to be called when the cancel hint is clicked.
   */
  onHintCancel?: () => void;
}
```
# VirtualizedMenu

The VirtualizedMenu component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { VirtualizedMenu } from "@appier/aiqua-design-system

<VirtualizedMenu />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `maxHeight` | `number` | No | - |
| `maxWidth` | `number` | No | - |
| `minWidth` | `number` | No | - |
| `search` | `boolean` | No | - |
| `searchInputPlaceholder` | `string` | No | - |
| `noSearchResultLabel` | `string` | No | - |
| `truncateLines` | `number` | No | - |
| `hint` | `ReactNode` | No | - |
| `autoFocus` | `boolean` | No | - |
| `isDrillDownMenu` | `boolean` | No | - |
| `title` | `string` | No | - |
| `searchProps` | `MenuSearchBarProps` | No | - |
| `menuItems` | `ReactNode` | Yes | - |
| `zIndex` | `number` | No | Define the zIndex for the menu |


# VirtualizedTable

The VirtualizedTable component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { VirtualizedTable } from "@appier/aiqua-design-system

<VirtualizedTable />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `height` | `string \| number` | No | Defines the height of the whole table, could set any string of css height attribute or number |
| `headerColor` | `HeaderColor` | No | Defines the color of the table header. The table color will take the default color if the value is `undefined`. |
| `theme` | `THEME_TYPES` | No | - |
| `size` | `(typeof SIZES)[keyof typeof SIZES]` | No | - |
| `fillUpWithBlankCol` | `boolean` | No | - |
| `columns` | `ColumnsType<any>` | Yes | - |
| `rows` | `Object[]` | Yes | - |
| `summaryRows` | `Object` | No | - |
| `actionHeaderContent` | `ActionHeaderContent` | No | - |
| `onResize` | `({
  columnsWidth
}: {
  columnsWidth: number[];
}) => void` | No | - |
| `selectionIdentifier` | `string` | No | it is an identifier for the selection, which has to be a UNIQUE FIELD, and it will be used for checking which row has been choosen. it is REQUIRED when onSelectChange has value.  Note: if not provided, row index will be used. |
| `selectionType` | `SELECTION_TYPE` | No | - |
| `onSelectAllChange` | `(checked: boolean, currentPageValue: Object[]) => void` | No | - |
| `onSelectChange` | `({
  rowIdentifier,
  rowData
}: {
  rowIdentifier: any;
  rowData: Object;
}) => void` | No | - |
| `selectValue` | `number \| null \| undefined \| number[] \| string \| string[]` | No | - |
| `supportPagination` | `boolean` | No | - |
| `rvTableProps` | `RVTableProps` | No | Additional properties to be passed to the underlying `react-virtualized` Table component. This allows for further customization and configuration of the virtualized table.  Doc: https://github.com/bvaughn/react-virtualized/blob/master/docs/Table.md#prop-types |
| `supportDynamicRowHeight` | `boolean` | No | Enables dynamic row height if set to true, allowing each row's height to adjust based on its content.  When handling a large amount of data, using a fixed row height can significantly improve performance. If you enable this option, each row's height will be calculated based on its content, which may impact performance. It is recommended to enable this only when dynamic row height is truly needed. |

## Examples

### With Border Bottom

```tsx
export const WithBorderBottom = {
  render: Template,
  args: {
    columns: columnsWithBorder
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Highlighter

```tsx
export const WithHighlighter = {
  render: Template,
  args: {
    columns: columns.map(column => column.field === 'age' ? {
      ...column,
      highlighter: (data: rowType) => data.age && data.age < 40
    } : {
      ...column,
      highlighter: rowData => rowData.highlighted ? 'var(--color-compBg-grayLite)' : false
    }),
    rows: rows.map((row, idx) => idx < 3 ? {
      ...row,
      highlighted: true
    } : row)
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Dynamic Height

```tsx
export const WithDynamicHeight = {
  render: Template,
  args: {
    supportDynamicRowHeight: true,
    columns: columnsWithDynamicHeight
  }
};
```

### With Skeleton

```tsx
export const WithSkeleton = {
  render: Template,
  args: {
    isLoading: true
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Empty State

```tsx
export const WithEmptyState = {
  render: Template,
  args: {
    rows: [],
    isEmpty: true,
    renderEmptyView: () => <EmptyContentWrapper>
        <BoxIcon size={48} />
        <EmptyMessage>No data yet</EmptyMessage>
      </EmptyContentWrapper>
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Empty State And Loading

```tsx
export const WithEmptyStateAndLoading = {
  render: Template,
  args: {
    rows: [],
    isEmpty: true,
    isLoading: true,
    renderEmptyView: () => <EmptyContentWrapper>
        <BoxIcon size={48} />
        <EmptyMessage>No data yet</EmptyMessage>
      </EmptyContentWrapper>
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Empty State And Summary

```tsx
export const WithEmptyStateAndSummary = {
  render: Template,
  args: {
    rows: [],
    isEmpty: true,
    summaryRows: {
      campaign_channel: 'Grand total',
      firstName: '-',
      lastName: '-',
      age: 0,
      fullName: '-',
      nickname: '-',
      gender: '-',
      hobby: '-',
      birthday: '-'
    },
    summaryRowPosition: 'bottom',
    renderEmptyView: () => <EmptyContentWrapper>
        <BoxIcon size={48} />
        <EmptyMessage>No data yet</EmptyMessage>
      </EmptyContentWrapper>
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Initial Sort By

```tsx
export const WithInitialSortBy = {
  render: Template,
  args: {
    sortDirection: 'asc',
    sortBy: 'firstName'
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Summary

```tsx
export const WithSummary = {
  render: Template,
  args: {
    columns: columnsWitSummary,
    rows: rowsWithSummary,
    summaryRows: {
      campaign_channel: 'Grand total',
      impressions: 100_000,
      clicks: 50_000
    },
    summaryRowPosition: 'bottom',
    fillUpWithBlankCol: true
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### Summary Row With Full Table Height

```tsx
export const SummaryRowWithFullTableHeight = {
  render: TemplateWithFullHeight,
  args: {
    height: '100%',
    columns: columnsWitSummary,
    rows: rowsWithSummary,
    summaryRows: {
      campaign_channel: 'Grand total',
      impressions: 100_000,
      clicks: 50_000
    },
    summaryRowPosition: 'bottom',
    fillUpWithBlankCol: true
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Actions

```tsx
export const WithActions = {
  render: Template,
  args: {
    actionHeaderContent: <ActionHeaderContentWrapper>
        <Button variant="primary" size="normal" startIcon={<AddIcon />}>
          Add Report
        </Button>
        <Button variant="primary" size="normal" startIcon={<AddIcon />}>
          Add Report
        </Button>
      </ActionHeaderContentWrapper>
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### With Summary And Actions

```tsx
export const WithSummaryAndActions = {
  render: Template,
  args: {
    columns: columnsWitSummary,
    rows: rowsWithSummary,
    summaryRows: {
      campaign_channel: 'Grand total',
      impressions: 100_000,
      clicks: 50_000
    },
    summaryRowPosition: 'bottom',
    fillUpWithBlankCol: true,
    actionHeaderContent: <ActionHeaderContentWrapper className="flex-wrap">
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<AddIcon />}>
          Add Report1
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<AddIcon />}>
          Add Report2
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<AddIcon />}>
          Add Report3
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<AddIcon />}>
          Add Report4
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<AddIcon />}>
          Add Report5
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<AddIcon />}>
          Add Report6
        </Button>
        <Button variant="primary" size="normal" className="mb-spacing-4" startIcon={<AddIcon />}>
          Add Report7
        </Button>
      </ActionHeaderContentWrapper>
  },
  parameters: {
    controls: {
      exclude: ['isLoading']
    }
  }
};
```

### Loading With Actions And Summary

```tsx
export const LoadingWithActionsAndSummary = {
  render: Template,
  args: {
    isLoading: true,
    actionHeaderContent: <Skeleton className="w-full" />,
    summaryRows: {
      campaign_channel: 'Grand total',
      impressions: 100_000,
      clicks: 50_000
    },
    summaryRowPosition: 'bottom'
  }
};
```

### With Radio Buttons

```tsx
export const WithRadioButtons = {
  render: (args, {
    globals: {
      theme
    }
  }) => {
    const [radioValue, setRadioValue] = useState<number | null>(3);
    const handleSetRadioValue = () => {
      console.log('checked value:', radioValue);
    };
    const handleResetRadioValue = () => {
      setRadioValue(null);
    };
    return <>
        <StyledButton variant="primary" size="normal" onClick={handleResetRadioValue}>
          Reset value
        </StyledButton>
        <StyledButton variant="primary" size="normal" onClick={handleSetRadioValue}>
          Show selected value
        </StyledButton>
        <VirtualizedTable {...args} selectValue={radioValue} selectionIdentifier="id" onSelectChange={data => {
        setRadioValue(data.rowIdentifier);
      }} theme={theme} />
      </>;
  }
};
```

### With Checkboxs

```tsx
export const WithCheckboxs = {
  render: (args, {
    globals: {
      theme
    }
  }) => {
    const [checkedValue, setCheckedValue] = useState<number[]>([]);
    const handleSetCheckboxValue = () => {
      console.log('checked value:', checkedValue);
    };
    const handleResetCheckboxValue = () => {
      setCheckedValue([]);
    };
    return <>
        <StyledButton variant="primary" size="normal" onClick={handleResetCheckboxValue}>
          Reset value
        </StyledButton>
        <StyledButton variant="primary" size="normal" onClick={handleSetCheckboxValue}>
          Show selected value
        </StyledButton>
        <VirtualizedTable {...args} selectValue={checkedValue} selectionType={SELECTION_TYPE.MULTIPLE as SELECTION_TYPE} selectionIdentifier={'id'} onSelectAllChange={(checked, currentPageValue) => {
        const updatedData = checkedValue.filter(checkedValue => !currentPageValue.find(value => value.id === checkedValue));
        setCheckedValue(prev => checked ? [...prev, ...currentPageValue.map(v => v.id)] : updatedData);
      }} onSelectChange={data => {
        setCheckedValue(prev => {
          if (prev?.includes(data.rowIdentifier)) {
            return prev.filter(prevData => prevData !== data.rowIdentifier);
          }
          return [...(prev ?? []), data.rowIdentifier];
        });
      }} theme={theme} />
      </>;
  }
};
```

### With Rv Table Props

```tsx
export const WithRvTableProps = {
  render: Template,
  args: {
    rvTableProps: {
      onRowClick: ({
        rowData
      }) => {
        console.log(rowData);
      }
    }
  }
};
```


> Could not find definition for **WEEK_DAYS**.
# WeekDays

The WeekDays component is a key part of the Aiqua Design System.

## Usage

```tsx
import { WeekDays } from "@appier/aiqua-design-system";

<WeekDays />
```

> **Note:** This is a scaffold file. To generate full, rich examples, please create a `*.stories.tsx` file for this component.

# WidgetCard

The WidgetCard component is a key part of the Aiqua Design System.

## Main Example

```tsx
export const Normal = {
  render: Template
};
```

## Usage

```tsx
import { WidgetCard } from "@appier/aiqua-design-system

<WidgetCard />
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `isActive` | `boolean` | No | Defines widget is be selected / active or not. |
| `isDragging` | `boolean` | No | Defines widget is be dragging or not. |
| `isDisabled` | `boolean` | No | Defines widget is be disabled or not. |
| `title` | `string \| React.ReactNode` | Yes | Defines title of widget. |
| `leftSubTitle` | `string \| React.ReactNode` | No | Defines subTitle below title of widget. |
| `rightSubTitle` | `string \| React.ReactNode` | No | Defines subTitle below action of widget. |
| `action` | `React.ReactNode` | No | Operating area, actionable element to place in the top-right |
| `showDrag` | `boolean` | No | If `true`, display drag icon in the top-left |

## Examples

### With Drag Icon

```tsx
export const WithDragIcon = {
  render: Template,
  args: {
    showDrag: true
  }
};
```


# WidgetCardProps

```typescript
type WidgetCardProps = React.HTMLAttributes<HTMLDivElement> & StyleProps & ConfigProps;
```
